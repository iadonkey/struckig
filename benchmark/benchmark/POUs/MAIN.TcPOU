<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="MAIN" Id="{c24cf36f-30d9-4bef-a3e5-6c8b5a1b2c55}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR CONSTANT
  Dofs : ARRAY [0..3] OF SINT := [1, 3, 6, 7];
  IterationCount : INT := 5;
  TrajactoryCount : DINT := 64 * 1024;
END_VAR
VAR
  _positionDist : RandomGaussian(seed:=42, mu:=0, sigma:=4);
  _dynamicDist : RandomGaussian(seed:=43, mu:=0, sigma:=0.8);
  _limitDist : RandomUniform(seed:=44, lowerBound:=0, upperBound:=4);
  
  _p : Randomizer(_positionDist);
  _d : Randomizer(_dynamicDist);
  _l : Randomizer(_limitDist);
  
  _otg : Struckig.Otg(cycletime:=0.001, dofs:=0);
  
  _step : INT := 0;
  _dt, _it, _jt : DINT := 0;
  
  _trajectoryStatistic, _itStatistic, _worstStatistic : MovingStatistic;
  
  _averageMean, _worstMean, _averageSigma, _worstSigma : ARRAY[0..3] OF LREAL; 
  
  _cpucounter : Tc2_System.GETCPUACCOUNT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[REPEAT
  CASE _step
  OF
    // setup ****************************************************
    0: 
    // **********************************************************

      _otg.FB_init(TRUE, TRUE, 0.001, dofs:=Dofs[_dt]);
      _trajectoryStatistic.Reset();
      _itStatistic.Reset();
      _worstStatistic.Reset();
      
      _p.Fill(ADR(_otg.CurrentPosition), Dofs[_dt]);
      _p.Fill(ADR(_otg.TargetPosition), Dofs[_dt]);
      _l.FillMax(ADR(_otg.maxVelocity), Dofs[_dt], ADR(_otg.TargetVelocity));
      _l.FillMax(ADR(_otg.maxAcceleration), Dofs[_dt], ADR(_otg.TargetAcceleration));
      _l.Fill(ADR(_otg.maxJerk), Dofs[_dt]);
      CheckCalculation(_otg);  
    
      _step := 1;
  
    // iterate start ********************************************
    1: 
    // **********************************************************
    
      _trajectoryStatistic.Reset();
      _step := 2;
      
    // iterate loop *********************************************
    2: 
    // **********************************************************
    
      _p.Fill(ADR(_otg.CurrentPosition), Dofs[_dt]);
      _d.FillOrZero(ADR(_otg.CurrentVelocity), Dofs[_dt], 0.9);
      _d.FillOrZero(ADR(_otg.CurrentAcceleration), Dofs[_dt], 0.8);
      _p.Fill(ADR(_otg.TargetPosition), Dofs[_dt]);
      _d.FillOrZero(ADR(_otg.TargetVelocity), Dofs[_dt], 0.7);
      _d.FillOrZero(ADR(_otg.TargetAcceleration), Dofs[_dt], 0.6);
      _l.FillMax(ADR(_otg.MaxVelocity), Dofs[_dt], ADR(_otg.TargetVelocity));
      _l.FillMax(ADR(_otg.MaxAcceleration), Dofs[_dt], ADR(_otg.TargetAcceleration));
      _l.Fill(ADR(_otg.MaxJerk), Dofs[_dt]);
  
      IF NOT _otg.ValidateInput()
      THEN
        RETURN;
      END_IF
  
      _trajectoryStatistic.Append(CheckCalculation(_otg));
      _jt := _jt + 1;
      IF _jt > TrajactoryCount
      THEN
        _it := _it + 1;
        _jt := 0;        
        _step := 1;
        _itStatistic.Append(_trajectoryStatistic.Mean);
        _worstStatistic.Append(_trajectoryStatistic.Maximum);
      END_IF
      
      IF _it > IterationCount
      THEN
        _step := 3;
      END_IF
      
    // iterate end **********************************************
    3: 
    // **********************************************************

      _it := 0;
      _jt := 0;
      _averageMean[_dt] := _itStatistic.Mean;
      _averageSigma[_dt] := _itStatistic.Sigma;
      _worstMean[_dt] := _worstStatistic.Mean;
      _worstSigma[_dt] := _worstStatistic.Sigma;      
      _dt := _dt + 1;
      _step := SEL(_dt > 3, 0, 4);

    // done******* **********************************************
    4: 
    // **********************************************************
      ; 
  END_CASE
UNTIL _step = 4 
AND_THEN TRUE // wtf, fix this already Beckhoff - no breakpoints without an additional condition!!!! 
END_REPEAT

_step := 4;]]></ST>
    </Implementation>
    <Method Name="CheckCalculation" Id="{829178d5-91bc-4df1-995d-bbe41aca5758}">
      <Declaration><![CDATA[METHOD CheckCalculation : LREAL;
VAR_INPUT
  otg : REFERENCE TO Struckig.Otg;
END_VAR
VAR
  cpuAccount : UDINT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_cpucounter(cpuAccountDW => cpuAccount);
otg();
_cpucounter();
CheckCalculation := (_cpucounter.cpuAccountDW - cpuAccount) * 0.1; // us  
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
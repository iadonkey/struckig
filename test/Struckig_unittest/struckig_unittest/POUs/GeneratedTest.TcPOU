<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="GeneratedTest" Id="{8a002d40-1b8b-4a36-917f-04dd149a7db3}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK GeneratedTest EXTENDS TcUnit.FB_TestSuite]]></Declaration>
    <Implementation>
      <ST><![CDATA[Test_Trajectory_0();
Test_Trajectory_1();
Test_Trajectory_2();
Test_Trajectory_3();
Test_Trajectory_4();
Test_Trajectory_HasTargetAcceleration_5();
Test_Trajectory_HasTargetAcceleration_6();
Test_Trajectory_HasTargetAcceleration_7();
Test_Trajectory_HasTargetAcceleration_8();
Test_Trajectory_10();
Test_Trajectory_12();
Test_Trajectory_14();
Test_Trajectory_HasTargetAcceleration_15();
Test_Trajectory_HasTargetAcceleration_16();
Test_Trajectory_HasTargetAcceleration_17();
Test_Trajectory_HasTargetAcceleration_18();
Test_Trajectory_HasTargetAcceleration_19();
Test_Trajectory_20();
Test_Trajectory_21();
Test_Trajectory_22();
Test_Trajectory_23();
Test_Trajectory_24();
Test_Trajectory_HasTargetAcceleration_25();
Test_Trajectory_HasTargetAcceleration_26();
Test_Trajectory_HasTargetAcceleration_27();
Test_Trajectory_HasTargetAcceleration_28();
Test_Trajectory_HasTargetAcceleration_29();
Test_Trajectory_30();
Test_Trajectory_31();
Test_Trajectory_32();
Test_Trajectory_33();
Test_Trajectory_34();
Test_Trajectory_HasTargetAcceleration_36();
Test_Trajectory_HasTargetAcceleration_37();
Test_Trajectory_40();
Test_Trajectory_41();
Test_Trajectory_42();
Test_Trajectory_43();
Test_Trajectory_44();
Test_Trajectory_HasTargetAcceleration_45();
Test_Trajectory_HasTargetAcceleration_47();
Test_Trajectory_HasTargetAcceleration_48();
Test_Trajectory_HasTargetVelocity_50();
Test_Trajectory_HasTargetVelocity_51();
Test_Trajectory_HasTargetVelocity_52();
Test_Trajectory_HasTargetVelocity_53();
Test_Trajectory_HasTargetVelocity_54();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_55();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_56();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_57();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_58();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_59();
Test_Trajectory_HasTargetVelocity_60();
Test_Trajectory_HasTargetVelocity_61();
Test_Trajectory_HasTargetVelocity_63();
Test_Trajectory_HasTargetVelocity_64();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_65();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_66();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_67();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_68();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_69();
Test_Trajectory_HasTargetVelocity_70();
Test_Trajectory_HasTargetVelocity_71();
Test_Trajectory_HasTargetVelocity_72();
Test_Trajectory_HasTargetVelocity_73();
Test_Trajectory_HasTargetVelocity_74();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_75();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_76();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_77();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_78();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_79();
Test_Trajectory_HasTargetVelocity_80();
Test_Trajectory_HasTargetVelocity_81();
Test_Trajectory_HasTargetVelocity_83();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_86();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_89();
]]></ST>
    </Implementation>
    <Method Name="Test_Trajectory_0" Id="{6345266d-0285-40ed-93d8-7e1774a0d4df}">
      <Declaration><![CDATA[METHOD Test_Trajectory_0
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -48.4728881357, -97.9711416865, -10.8349305231 ],
    CurrentVelocity := [ 308.3606028938, 107.9102070378, -867.6194648353 ],
    CurrentAcceleration := [ -148.9497769995, 6462.4944696955, 8019.1496616752 ],
    TargetPosition := [ -30.0375232756, -22.1840843594, -57.0636865806 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_0');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1383607006, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1383607006, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-30.0375232756, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-48.4728881357, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1383607006, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-22.1840843594, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-97.9711416865, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-10.8349305231, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1383607006, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-57.0636865806, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_1" Id="{f9bb294d-862d-4a99-a443-4e11a2358552}">
      <Declaration><![CDATA[METHOD Test_Trajectory_1
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -63.1702667557, 93.7154058406, -35.1149959185 ],
    CurrentVelocity := [ 661.6245530577, -37.3192323339, -725.9012268632 ],
    CurrentAcceleration := [ -9486.1061868153, 1633.3864716659, -542.8697817779 ],
    TargetPosition := [ -77.2493099821, 92.0635618500, 99.2266414845 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_1');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2409886551, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0372047565, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-50.1030591106, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2409886551, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-77.2493099821, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(93.7154058406, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2409886551, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(92.0635618500, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2409886551, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(99.2266414845, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0256785872, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-51.6764686908, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_10" Id="{81f58fa9-2220-42d3-b176-faa8d9e80dba}">
      <Declaration><![CDATA[METHOD Test_Trajectory_10
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 84.0469071279, -29.4614046874, -81.9073442773 ],
    CurrentVelocity := [ -162.6088777538, -720.5566056476, 960.9335347527 ],
    CurrentAcceleration := [ -2199.4130799162, 7865.3171263636, -3178.3535187764 ],
    TargetPosition := [ 54.4828537226, 98.7075572352, 89.6214860302 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_10');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2250927552, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(84.0469071279, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2250927552, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(54.4828537226, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2250927552, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(98.7075572352, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0151683536, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-39.0209175922, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2250927552, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(89.6214860302, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-81.9073442773, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_12" Id="{eaeed8d0-4d86-40e5-89a7-23635c7cb107}">
      <Declaration><![CDATA[METHOD Test_Trajectory_12
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 88.4088387432, 37.3302406857, -58.4502247835 ],
    CurrentVelocity := [ 817.0089582056, -67.3717611941, 833.9591693891 ],
    CurrentAcceleration := [ 1334.1244465087, 8665.1777038223, -6063.8533297960 ],
    TargetPosition := [ -0.0705145115, 25.0219047869, 22.1400721207 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_12');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2224463578, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0266676556, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(108.1422664125, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2224463578, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-0.0705145115, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(37.3302406857, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2224463577, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(25.0219047869, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2224463578, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(22.1400721207, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-58.4502247835, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_14" Id="{a564df0f-c51f-4a8c-b52e-ad9492d841b0}">
      <Declaration><![CDATA[METHOD Test_Trajectory_14
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 32.5856936017, -82.9762071980, 32.7281576406 ],
    CurrentVelocity := [ -490.2184623687, 120.6266786326, -271.9228820945 ],
    CurrentAcceleration := [ -4925.2920326356, -3458.9827242044, -3470.6840467306 ],
    TargetPosition := [ -66.1309266896, 42.9290262854, 36.6445325803 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_14');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1833133586, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(32.5856936017, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1833133586, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-66.1309266896, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1833133586, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(42.9290262854, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-82.9762071980, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1833133582, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(36.6445325803, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0327720515, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(26.5373633644, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_2" Id="{094c212a-fb0b-4d19-9fde-daf3eb08650c}">
      <Declaration><![CDATA[METHOD Test_Trajectory_2
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 83.3099744325, 19.0272372304, 87.2739426707 ],
    CurrentVelocity := [ -517.5373535027, -268.5463937446, 50.2852689221 ],
    CurrentAcceleration := [ 4025.6219003529, 1978.1609197336, -3050.7744272538 ],
    TargetPosition := [ 96.4693415333, -91.9443114153, 8.2071853173 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_2');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1637541138, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1637541138, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(96.4693415333, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0338874880, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(72.9121307738, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(19.0272372304, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1637541133, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-91.9443114153, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0080294924, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(87.5103374908, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1637541138, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(8.2071853173, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_20" Id="{e1e7a5de-e62e-48fc-924b-444e2a2bd9d2}">
      <Declaration><![CDATA[METHOD Test_Trajectory_20
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -56.9068264863, -60.7794722325, 86.4623338090 ],
    CurrentVelocity := [ -393.9223654046, -546.3815605210, 675.0392519000 ],
    CurrentAcceleration := [ 5.8238073617, 1591.5772459549, -488.2138700634 ],
    TargetPosition := [ 41.6689824136, 85.3287803578, -73.8957999973 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_20');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2494122871, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.2494122871, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(41.6689824136, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0249927202, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-64.6686851580, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2494122871, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(85.3287803578, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0230105284, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-71.3061474894, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0243897327, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(100.8466910205, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2494122871, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-73.8957999973, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_21" Id="{b8b56667-d899-4e62-89ba-d6c28f260724}">
      <Declaration><![CDATA[METHOD Test_Trajectory_21
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 88.6870012735, 23.1719087852, -74.0629641346 ],
    CurrentVelocity := [ -251.7614304232, -740.5368060875, -969.7074500525 ],
    CurrentAcceleration := [ 8241.1809824260, -3282.0893708034, -4577.0224180479 ],
    TargetPosition := [ -71.0612113625, -49.4576435725, 79.8932731661 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_21');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2794166064, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(88.6870012735, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2794166064, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-71.0612113625, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(23.1719087852, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2794166064, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-49.4576435725, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2794166064, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(79.8932731661, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0307212780, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-102.1475531225, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_22" Id="{761ecb6d-8220-4b1e-ae2b-705e89bed146}">
      <Declaration><![CDATA[METHOD Test_Trajectory_22
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -96.3997915133, -72.5782898949, -45.4942938213 ],
    CurrentVelocity := [ -781.6606495560, 785.6572640893, -651.5283266711 ],
    CurrentAcceleration := [ 2968.1240254719, 5582.8931603415, 6725.0797030688 ],
    TargetPosition := [ 41.1639177524, 70.1412602793, 98.6618456908 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_22');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2412612383, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.2412612383, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(41.1639177524, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0212898450, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-111.0819257402, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2412612383, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(70.1412602793, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-72.5782898949, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2412612383, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(98.6618456908, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0165936504, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-54.7704477936, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_23" Id="{ce3a2a7e-5353-4480-be44-d057a4187457}">
      <Declaration><![CDATA[METHOD Test_Trajectory_23
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 27.3639225260, 29.1802301857, 67.6614910432 ],
    CurrentVelocity := [ -556.9966077652, -606.5725164211, -936.6017534345 ],
    CurrentAcceleration := [ -7191.5705657314, -1503.6533689598, -6280.9141119380 ],
    TargetPosition := [ 66.3433216320, 1.7737341240, 72.3913471225 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_23');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1813664628, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1813664628, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(66.3433216320, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0339894632, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(9.5134176507, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(29.1802301857, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1813664628, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(1.7737341240, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1813664628, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(72.3913471225, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0936402510, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(31.9473509731, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_24" Id="{b99c8912-5b95-4160-9141-02b4a47d87e5}">
      <Declaration><![CDATA[METHOD Test_Trajectory_24
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -47.8333402473, 37.0025949833, 83.7741924140 ],
    CurrentVelocity := [ -478.1883604580, -547.2061425493, -69.6743699396 ],
    CurrentAcceleration := [ -2569.8879284979, 3585.4461809563, 6015.4796212587 ],
    TargetPosition := [ -70.0100304050, 59.5905652584, -91.1450685924 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_24');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2183689211, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-47.8333402473, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2183689211, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-70.0100304050, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2183689211, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(59.5905652584, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0358414126, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(25.3514136059, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(83.7741924140, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2183689211, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-91.1450685924, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_3" Id="{cb9558ae-0e2c-497e-806d-c78bc81fd420}">
      <Declaration><![CDATA[METHOD Test_Trajectory_3
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -85.5818879810, -52.0008539458, 44.5758150819 ],
    CurrentVelocity := [ -209.8939132586, 498.9867426388, 817.4240077871 ],
    CurrentAcceleration := [ 1871.2486829497, 4375.0694697864, 2406.3866581230 ],
    TargetPosition := [ 72.2356784803, -68.8043138835, 50.0588540802 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_3');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2144962387, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.2144962387, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(72.2356784803, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0206871414, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-88.3431554345, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0435710315, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-36.8349972865, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2144962387, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-68.8043138835, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0569081169, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(73.6453407519, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(44.5758150819, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_30" Id="{ac170d6b-f8f8-46cb-9132-75ae719eb312}">
      <Declaration><![CDATA[METHOD Test_Trajectory_30
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 86.7809261646, -98.8080786581, -72.6257761169 ],
    CurrentVelocity := [ 601.0745499204, 474.8188978646, 590.4929535518 ],
    CurrentAcceleration := [ 2023.2993218710, 3965.0463731444, -9065.9106258038 ],
    TargetPosition := [ -35.6009678368, 17.9462524582, -45.2985577928 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_30');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2272313630, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0275291242, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(101.3129274211, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2272313630, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-35.6009678368, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2272313630, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(17.9462524582, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-98.8080786581, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2272313628, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-45.2985577928, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-72.6257761169, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_31" Id="{4fed1c00-5b2c-4571-bc6f-07f1970f063e}">
      <Declaration><![CDATA[METHOD Test_Trajectory_31
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 37.8656730190, 41.7929237965, -44.9490570075 ],
    CurrentVelocity := [ 77.7653029048, -711.6409074721, 451.8070467646 ],
    CurrentAcceleration := [ 3306.4202361260, -3815.5224465614, 6243.3302206802 ],
    TargetPosition := [ 26.4010345123, -55.8555389223, 2.7807343308 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_31');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1318658828, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0186758983, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(39.0261048772, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1318658828, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(26.4010345123, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(41.7929237965, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1318658828, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-55.8555389223, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1318658828, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(2.7807343308, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-44.9490570075, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_32" Id="{a9c6139b-89fb-4449-9d41-19ccf65cbbf0}">
      <Declaration><![CDATA[METHOD Test_Trajectory_32
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 85.4441880594, -81.1993531509, 17.1974893406 ],
    CurrentVelocity := [ 838.5287750234, 370.6770957518, -319.3120402268 ],
    CurrentAcceleration := [ -3050.5723540448, 3049.5705340562, 8743.3037131448 ],
    TargetPosition := [ -64.4477289941, 27.2715031109, -13.0409961300 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_32');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2521800489, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0211867846, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(101.2572036182, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2521800489, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-64.4477289941, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2521800489, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(27.2715031109, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-81.1993531509, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(17.1974893406, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2521800489, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-13.0409961300, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_33" Id="{d39131a0-f115-4213-8305-31ea14b5303b}">
      <Declaration><![CDATA[METHOD Test_Trajectory_33
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 72.3651244690, 94.4754837072, -67.3472654685 ],
    CurrentVelocity := [ 280.3420195634, 373.0706662864, 844.1045357417 ],
    CurrentAcceleration := [ 586.7577663830, -245.7769674142, -9508.4753027693 ],
    TargetPosition := [ 1.4291920102, 97.1574271552, 25.5927465994 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_33');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1660478283, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0257334472, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(77.5014423587, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1660478283, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(1.4291920102, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0350169038, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(102.1907789121, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(94.4754837072, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1660478276, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(25.5927465994, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-67.3472654685, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_34" Id="{4756b060-8770-4e33-9e11-8c09ef6d618c}">
      <Declaration><![CDATA[METHOD Test_Trajectory_34
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 22.0560906354, 89.0955529555, -36.3327171454 ],
    CurrentVelocity := [ -685.5570517853, -659.3873770511, 655.9338145535 ],
    CurrentAcceleration := [ 6426.0696326829, 6826.9817690797, -6835.8161945745 ],
    TargetPosition := [ -4.1192277756, -14.3002750912, -95.6107071528 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_34');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1747536630, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(22.0560906354, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1747536630, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-4.1192277756, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(89.0955529555, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1747536630, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-14.3002750912, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0164552298, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-27.0587459103, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1747536630, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-95.6107071528, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_4" Id="{1a4cddfa-23d3-47b7-be46-d1fb45f7fa3a}">
      <Declaration><![CDATA[METHOD Test_Trajectory_4
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -13.0766395412, 56.4296338433, -0.4646208813 ],
    CurrentVelocity := [ -115.9039415255, -616.8555129935, -736.3627211732 ],
    CurrentAcceleration := [ 5039.7397824762, -2776.6753419578, -1525.3299706299 ],
    TargetPosition := [ 98.0443986978, 20.4035571799, -51.4441600876 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_4');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1772962001, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1772962001, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(98.0443986978, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0118509659, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-13.8743872752, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(56.4296338433, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1772962001, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(20.4035571799, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-0.4646208813, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1772962001, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-51.4441600876, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_40" Id="{68460179-d980-432c-abbc-1db92eca1bc4}">
      <Declaration><![CDATA[METHOD Test_Trajectory_40
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -82.7007622228, -34.3146607357, -46.8699283447 ],
    CurrentVelocity := [ -591.1062210669, -281.6149780500, -360.1782038397 ],
    CurrentAcceleration := [ 2531.4032100677, -6009.2460339027, -4235.4451266363 ],
    TargetPosition := [ 44.2958344167, -49.6700342265, -63.0074453746 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_40');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2216122248, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.2216122248, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(44.2958344167, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0218357460, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-93.6163506577, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-34.3146607357, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2216122248, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-49.6700342265, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-46.8699283447, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2216122248, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-63.0074453746, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_41" Id="{eaf27503-d10c-4076-9fac-7f92c99a145b}">
      <Declaration><![CDATA[METHOD Test_Trajectory_41
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -3.0615617051, -77.3427318696, 34.9476353856 ],
    CurrentVelocity := [ 350.8173929322, 668.9712564839, -993.9913204254 ],
    CurrentAcceleration := [ 2108.3122476097, 2005.1682121858, -5358.9742488683 ],
    TargetPosition := [ 55.0096087226, 75.3693983663, -18.5596021490 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_41');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1682142605, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1682142605, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(55.0096087226, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-3.0615617051, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1682142605, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(75.3693983663, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-77.3427318696, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(34.9476353856, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1213193157, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-24.9770559792, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_42" Id="{a3416107-385e-4e15-9f9c-e65fbc7aba64}">
      <Declaration><![CDATA[METHOD Test_Trajectory_42
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -24.5242802221, 3.8914007909, 67.3479329470 ],
    CurrentVelocity := [ 750.9575455307, -221.6038652504, -541.7393628959 ],
    CurrentAcceleration := [ -3512.8884423143, 479.8680441473, -6830.8020017088 ],
    TargetPosition := [ -21.2176764360, 11.1951719267, 41.1724379037 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_42');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1221319183, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0530099153, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-4.9777979956, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-24.5242802221, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1221319183, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(11.1951719267, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0232772087, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(0.5388286833, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(67.3479329470, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1221319183, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(41.1724379037, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_43" Id="{daee04b8-d1bb-4e4f-889a-c48633ef8889}">
      <Declaration><![CDATA[METHOD Test_Trajectory_43
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -49.7956339816, 24.0054085265, 33.9314012723 ],
    CurrentVelocity := [ -393.6807344354, -696.9716651798, -707.8878081362 ],
    CurrentAcceleration := [ 1096.7678603534, 4061.5889772987, 1892.6944507970 ],
    TargetPosition := [ 70.6901902254, -39.7936918653, -28.1147999529 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_43');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2057638747, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.2057638747, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(70.6901902254, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0236290402, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-57.0327067103, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(24.0054085265, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2057638741, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-39.7936918653, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(33.9314012723, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2057638747, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-28.1147999529, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_44" Id="{7a01a2e5-b6ea-40b5-9704-819df92fe761}">
      <Declaration><![CDATA[METHOD Test_Trajectory_44
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 95.4104873043, -69.5763134954, 17.2132631894 ],
    CurrentVelocity := [ -992.8310974528, 412.8070050507, -864.0351832214 ],
    CurrentAcceleration := [ 5511.8179942172, 7507.2963098201, 6151.3418850742 ],
    TargetPosition := [ -28.2391797744, -41.1122360903, -61.0988614069 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_44');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1453292393, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(95.4104873043, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1453292393, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-28.2391797744, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1453292390, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-41.1122360903, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-69.5763134954, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(17.2132631894, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1453292393, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-61.0988614069, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_15" Id="{a5f9f957-2d1e-44da-bd6e-366a42004265}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_15
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 23.9033680049, -12.5673967528, 8.9069317377 ],
    CurrentVelocity := [ -736.9699370880, 387.3262049082, 969.8535873770 ],
    CurrentAcceleration := [ -1671.7327481758, -4102.2493271688, 2764.8032816735 ],
    TargetPosition := [ -46.9784880131, -31.7663441143, -8.5623634278 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ -6856.9134368548, -6159.3176100358, -6824.1790674824 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_15');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1971168672, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(23.9033680049, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1799745836, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-47.3143143618, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0274806653, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-6.1760019415, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1817185732, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-32.0097474722, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0946594559, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(38.6963179237, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1800564196, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-8.8934030745, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_16" Id="{3b921736-5de7-4a90-a498-74610564c2da}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_16
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 13.0074162025, 11.6625146992, 53.3210756785 ],
    CurrentVelocity := [ 884.1493198103, -435.6847476968, 627.2592315324 ],
    CurrentAcceleration := [ 4026.4317773748, -5531.5256961141, -4566.9948048665 ],
    TargetPosition := [ -9.7731514888, -91.4159887082, 25.9932781584 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 3493.8717626659, -6203.3799342171, 9911.7926760811 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_16');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1817893395, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0927611708, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(38.8315040772, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1817893395, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-9.7731514888, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(11.6625146992, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1662808896, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-91.6646532775, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0435440654, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(67.1984120522, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1817893395, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(25.9932781584, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_17" Id="{bb09bf0e-a5f2-429e-b60c-ee8a7b9cb6ef}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_17
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -92.2610408938, 5.3622393416, -72.9017304386 ],
    CurrentVelocity := [ -123.8199201729, -607.2119453499, 83.2451642353 ],
    CurrentAcceleration := [ 6947.0032733553, -1211.5445086949, 2431.1278525048 ],
    TargetPosition := [ 1.0831292532, -99.7403716061, 37.1124135973 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ -9506.0188438533, -5936.3240710632, 3649.2987579435 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_17');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1730809692, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1730809692, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(1.0831292532, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0109365768, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-93.0253312542, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(5.3622393416, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1582401591, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-99.9582838193, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1639577223, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(37.1630376634, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-72.9017304386, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_18" Id="{f6d4fe43-ea4b-41a2-8559-02912e67df35}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_18
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 99.7569020904, -43.9485759614, -84.0872168199 ],
    CurrentVelocity := [ 54.9532303428, -796.5231731934, -342.1432214790 ],
    CurrentAcceleration := [ -8264.0627308273, -5965.0654096955, 2435.6917393118 ],
    TargetPosition := [ -87.3250076996, -77.9675748102, 91.7117445429 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 7628.5534426582, -6245.6975481518, 7574.7601485903 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_18');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2433279755, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0052934166, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(99.9122354544, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2433279755, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-87.3250076996, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-43.9485759614, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2272214227, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-78.2226954886, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2243910751, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(92.1644705296, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0219553853, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-89.6009405094, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_19" Id="{93751bac-2dd4-4992-81ae-0ad3dd9fe5c3}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_19
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -46.7789724843, 77.2362833114, 92.0718559473 ],
    CurrentVelocity := [ -584.9840758707, 429.0343060618, 927.8928030360 ],
    CurrentAcceleration := [ -7825.7890227773, 4766.9166104992, 3636.4745583016 ],
    TargetPosition := [ 30.6054093349, 31.1198422408, 32.5060586298 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 4456.0365117673, 7317.5951556793, 4823.4367522070 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_19');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2164886225, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.2053485313, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(30.6975762367, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0347822363, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-66.2492371466, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0477605125, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(89.2704493589, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2164886225, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(31.1198422408, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0295455932, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(117.6353361974, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2164886225, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(32.5060586298, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_25" Id="{7b9e3cff-b047-4bab-b2ee-b277402ef85c}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_25
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 24.5192170841, -37.3646286865, -65.4029093422 ],
    CurrentVelocity := [ -407.5258269508, 621.6108638781, -869.2024670456 ],
    CurrentAcceleration := [ 9506.1787878031, -4849.3398138873, 1802.6105161772 ],
    TargetPosition := [ 37.5302786185, 15.7223447275, 72.1193238713 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ -6856.9134368548, -6159.3176100358, -6824.1790674824 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_25');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2429570325, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.2429570325, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(37.5302786185, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0258334180, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(19.0531070387, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2429570325, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(15.7223447275, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-37.3646286865, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2429570325, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(72.1193238713, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0227467369, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-83.1388170134, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_26" Id="{da849087-b089-4875-aae6-cd89e6618e74}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_26
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -50.6801137524, -38.9531307879, -36.7905774493 ],
    CurrentVelocity := [ 394.0252072949, 244.1932319934, -413.1369944892 ],
    CurrentAcceleration := [ 4855.3587210479, 6560.8953819915, 8419.8576976034 ],
    TargetPosition := [ 2.1361074282, 66.3404345612, -87.1439402870 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 3493.8717626659, -6203.3799342171, 9911.7926760811 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_26');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2616639468, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.2552074622, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(2.1730443662, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-50.6801137524, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2616639468, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(66.3404345612, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-38.9531307879, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-36.7905774493, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2616639468, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-87.1439402870, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_27" Id="{79cbc284-0db4-4ee9-be0a-8d55f24e051b}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_27
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 71.7323580806, 66.8087571857, -32.2436270819 ],
    CurrentVelocity := [ 704.5089517638, -345.1100506328, 524.8006584419 ],
    CurrentAcceleration := [ -7486.4411143517, -4006.1193186634, 7181.9909251343 ],
    TargetPosition := [ 87.0356650598, 28.2698175233, 29.8008838661 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ -9506.0188438533, -5936.3240710632, 3649.2987579435 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_27');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1144237452, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0448784341, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(87.5802600287, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(71.7323580806, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(66.8087571857, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0995829350, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(28.0519053101, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1053004983, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(29.8515079322, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-32.2436270819, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_28" Id="{c7e590b0-bf18-473c-9468-1e1d6503c162}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_28
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 65.6834047564, -24.5020186554, -3.0991198960 ],
    CurrentVelocity := [ -367.5332216623, 443.1211092813, 434.7757146593 ],
    CurrentAcceleration := [ 3147.6093156917, -8131.6579297566, 6470.4199773479 ],
    TargetPosition := [ -50.8819628165, -28.4906132999, 58.7244045839 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 7628.5534426582, -6245.6975481518, 7574.7601485903 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_28');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1562937297, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(65.6834047564, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1562937297, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-50.8819628165, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0280047352, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-17.8230644667, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1406794859, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-28.7444016108, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1373568294, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(59.1771305706, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-3.0991198960, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_29" Id="{cd741861-9434-40e8-af35-a7d62e4de824}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_29
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -21.2669960224, 17.6516167523, 27.8132016954 ],
    CurrentVelocity := [ 171.7216402452, -544.5199304830, 678.2666303806 ],
    CurrentAcceleration := [ -7772.3521150167, -4145.6500173661, 3973.0136719389 ],
    TargetPosition := [ -62.3891814793, -22.5809455547, 85.5435626343 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 4456.0365117673, 7317.5951556793, 4823.4367522070 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_29');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1168949811, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0131689187, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-19.9840512404, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1168949811, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-62.3891814793, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(17.6516167523, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1168949811, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-22.5809455547, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1048363893, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(85.6604583331, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(27.8132016954, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_36" Id="{39747e93-38aa-43a4-a468-9f053f84e82f}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_36
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 16.0524930539, -80.2763892269, 35.8598662399 ],
    CurrentVelocity := [ 321.8579141550, -833.8709936419, -534.9681129857 ],
    CurrentAcceleration := [ -2253.1649036632, -7491.9479907428, -2965.3768789757 ],
    TargetPosition := [ 67.3871906217, -61.4651110529, -35.2874485191 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 3493.8717626659, -6203.3799342171, 9911.7926760811 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_36');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1807086035, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1719739241, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(67.4316178940, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(16.0524930539, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1807086035, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-61.4651110529, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0950363966, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-108.6874657282, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(35.8598662399, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1807086035, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-35.2874485191, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_37" Id="{a89f3e42-f40b-4a24-bec3-a5ed5bf90a8a}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_37
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -77.3799629614, -9.4565712113, 28.5792375586 ],
    CurrentVelocity := [ -899.7347881691, -931.7818007645, 800.1501400028 ],
    CurrentAcceleration := [ 2303.9803138012, 7847.7585360529, 5288.7379580818 ],
    TargetPosition := [ 80.5420011539, -65.0001553768, 85.9559280930 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ -9506.0188438533, -5936.3240710632, 3649.2987579435 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_37');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2533874987, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.2533874987, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(80.5420011539, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0221200246, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-95.2753579295, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-9.4565712113, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2385466886, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-65.2180675901, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2442642518, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(86.0065521591, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(28.5792375586, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_45" Id="{c77db414-22fd-4dd3-a3ce-441e6edd77dd}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_45
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 12.5659082908, 41.0748657884, 30.7468444732 ],
    CurrentVelocity := [ -292.6172696556, 919.1887466828, 686.9596059585 ],
    CurrentAcceleration := [ 4383.2572968432, -4289.9793218619, -6253.0812828934 ],
    TargetPosition := [ 15.1488442127, 10.4968539052, 80.9653017814 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ -6856.9134368548, -6159.3176100358, -6824.1790674824 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_45');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1868183006, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1868183006, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(15.1488442127, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0258181189, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(8.4632334842, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0845528510, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(59.3358614973, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1714200066, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(10.2534505474, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1868183006, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(80.9653017814, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(30.7468444732, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_47" Id="{40a40938-bf57-4beb-8f8f-edf2eeaa7116}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_47
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 37.4278284503, 4.3030022494, 32.6039568087 ],
    CurrentVelocity := [ 365.6510253381, -410.0572151845, 419.7285979179 ],
    CurrentAcceleration := [ 6227.2853840922, 46.4471807646, 557.5363272125 ],
    TargetPosition := [ 35.6955147497, -31.8825256521, 48.8378426118 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ -9506.0188438533, -5936.3240710632, 3649.2987579435 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_47');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1263449364, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0445899744, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(48.3214492940, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1025798893, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(34.8007172136, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(4.3030022494, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1115041262, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-32.1004378653, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1172216895, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(48.8884666780, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(32.6039568087, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_48" Id="{0e2dddec-a551-4206-a94c-48ae119a3139}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_48
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -68.3741970367, -5.1847676739, 36.3232876904 ],
    CurrentVelocity := [ -518.3205243038, 740.3727503777, 57.1648676194 ],
    CurrentAcceleration := [ -2508.8136422686, -9224.0599544854, -7203.2105148272 ],
    TargetPosition := [ -55.5339332537, -85.8234247070, -3.6978500682 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 7628.5534426582, -6245.6975481518, 7574.7601485903 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_48');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2042490764, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1851776928, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-55.0714933030, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0417911191, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-82.8343635959, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0134699251, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(3.6253338122, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1886348325, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-86.0772130179, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0059620960, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(36.5078277149, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2042490764, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-3.6978500682, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_5" Id="{c6615f21-8634-4f31-bbea-3ca9ab42e2e7}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_5
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -23.3154387205, 12.1328431936, -83.2625704216 ],
    CurrentVelocity := [ 112.4418791404, 722.4880088950, -976.2055240379 ],
    CurrentAcceleration := [ -174.3193167004, 6439.1295279447, -85.4461908449 ],
    TargetPosition := [ 96.4298541834, 52.5468258004, 24.2579324361 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ -6856.9134368548, -6159.3176100358, -6824.1790674824 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_5');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2383046418, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.2383046418, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(96.4298541834, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-23.3154387205, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1823490433, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(60.4641134157, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(12.1328431936, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2383046418, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(24.2579324361, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0251068077, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-105.6887558974, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_6" Id="{a3027d30-8ba0-4f7c-b275-2f4efd16da38}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_6
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -17.4854719252, -37.9186327430, 15.9186527777 ],
    CurrentVelocity := [ 800.2172181332, -969.9744687460, -378.8206497576 ],
    CurrentAcceleration := [ 9864.5238343369, -4674.8055020254, -6942.3853242682 ],
    TargetPosition := [ -47.2144527212, -51.2292351776, -29.1176014513 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 3493.8717626659, -6203.3799342171, 9911.7926760811 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_6');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1968898910, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0373306548, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(12.3242286126, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1968898910, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-47.2144527212, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-37.9186327430, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0681095210, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-79.5994121600, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(15.9186527777, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1968898910, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-29.1176014513, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_7" Id="{4058a334-70dd-407c-8233-13568ab69f32}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_7
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -89.9296657191, 37.7424448896, -41.5971459071 ],
    CurrentVelocity := [ -374.1237942012, 123.3490045310, 126.9945919943 ],
    CurrentAcceleration := [ 1304.8125105796, 2189.5615654459, 1038.1412563567 ],
    TargetPosition := [ 1.0335664517, 97.1273477079, 38.4426416539 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ -9506.0188438533, -5936.3240710632, 3649.2987579435 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_7');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1759152439, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1759152439, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(1.0335664517, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0233689844, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-96.6146705760, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1759152439, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(97.1273477079, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(37.7424448896, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1667919970, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(38.4932657201, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-41.5971459071, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_8" Id="{a14d7a9c-e267-4725-becc-2a4218fe0cae}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_8
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -2.0268876623, -23.3047910819, -20.9885620331 ],
    CurrentVelocity := [ -644.4934247319, 424.1441346946, -916.5321003421 ],
    CurrentAcceleration := [ -5844.0756790672, 1675.0161138122, 5977.3303726519 ],
    TargetPosition := [ -23.7778427519, 59.9247230329, 43.4496341690 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 7628.5534426582, -6245.6975481518, 7574.7601485903 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_8');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2136336728, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-2.0268876623, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0593793837, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-26.0722458369, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2136336728, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(59.9247230329, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-23.3047910819, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1946967724, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(43.9023601557, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0175283370, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-35.4175400866, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_50" Id="{2adf7609-b288-445d-94e2-0ed51728037b}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_50
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 3.7627850875, -62.8333055035, -5.4447225945 ],
    CurrentVelocity := [ -524.7571872995, -385.7365200211, 824.9047963306 ],
    CurrentAcceleration := [ -6758.9715693121, -5096.2938665384, 3450.7805139817 ],
    TargetPosition := [ -7.0843970572, 61.8188402002, -11.1465364178 ],
    TargetVelocity := [ 744.5103243424, -202.3751265097, -49.1344472328 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_50');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2306562320, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(3.7627850875, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1795727529, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-29.7834904499, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2081631705, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(64.8535309799, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0313703673, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-73.3254228490, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0584354993, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(25.3384553288, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2306562320, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-11.1465364178, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_51" Id="{7d8737d3-d315-4f66-834e-9f40cd1972e0}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_51
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 87.0156938449, -99.9183010384, 30.9067648898 ],
    CurrentVelocity := [ 452.5146360983, 135.3117362333, 84.0028467549 ],
    CurrentAcceleration := [ -7033.4939935035, -1092.4254263228, -4340.0912607950 ],
    TargetPosition := [ 14.8890187612, -27.3812335043, 72.4054716923 ],
    TargetVelocity := [ 744.5103243424, -202.3751265097, -49.1344472328 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_51');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2233045901, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0162081325, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(92.8585245282, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1983045901, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-1.6404060141, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2008115286, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-24.3465427246, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-99.9183010384, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2122214444, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(72.7685145166, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(30.9067648898, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_52" Id="{a34f62cb-acb4-47be-9d91-ed851512b359}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_52
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 0.8469321969, 93.1149249535, 4.8420763721 ],
    CurrentVelocity := [ -26.2996922396, -523.3141159467, -83.1911320589 ],
    CurrentAcceleration := [ -3001.5144502002, -1518.8764799393, -95.5538051550 ],
    TargetPosition := [ -38.0635532816, -28.3018067918, 81.8559858628 ],
    TargetVelocity := [ 744.5103243424, -202.3751265097, -49.1344472328 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_52');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1714894273, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(0.8469321969, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1464894273, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-54.5929780569, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(93.1149249535, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1714894273, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-28.3018067918, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1604062816, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(82.2190286871, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0145413734, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(4.0322333315, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_53" Id="{c427df11-2032-42a9-9ea0-027dbb3d6158}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_53
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -70.2314012573, 83.0326468271, 11.6067186944 ],
    CurrentVelocity := [ 275.2621683497, -359.8810582301, -947.8244213438 ],
    CurrentAcceleration := [ -159.4973166594, -1110.8714295063, -7631.1287084820 ],
    TargetPosition := [ -8.9232242607, -87.4650592039, -9.9461717600 ],
    TargetVelocity := [ 744.5103243424, -202.3751265097, -49.1344472328 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_53');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1806593117, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1806593117, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-8.9232242607, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-70.2314012573, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(83.0326468271, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1806593117, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-87.4650592039, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(11.6067186944, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0745203586, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-33.5581805268, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_54" Id="{2a87545e-9c47-4e85-be5d-f969fa5dba6b}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_54
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -87.1029407723, -98.1664219273, -14.4566641472 ],
    CurrentVelocity := [ -450.8952830845, 401.3350763170, 69.5603844636 ],
    CurrentAcceleration := [ -8674.6000509357, -4417.4131933268, 7231.3184380025 ],
    TargetPosition := [ 0.8186981956, 29.2606978832, -37.8043918543 ],
    TargetVelocity := [ 744.5103243424, -202.3751265097, -49.1344472328 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_54');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1829587262, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1829587262, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(0.8186981956, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0358432501, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-102.6968956758, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1604656646, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(32.2953886628, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-98.1664219273, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0250268670, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-12.5411962434, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1829587262, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-37.8043918543, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_60" Id="{5b5e475c-3b7a-4e2b-9f44-f9c7be711702}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_60
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 92.3145531090, -96.8986497922, 34.6278034382 ],
    CurrentVelocity := [ -39.8670405425, 883.9657324688, -542.6805218955 ],
    CurrentAcceleration := [ 1925.8787609316, 8093.5322745842, 4156.3546130833 ],
    TargetPosition := [ 38.4425575973, 61.8275264374, 61.0481001312 ],
    TargetVelocity := [ -178.2717208743, 907.0691528041, -980.1450825283 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_60');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2210122026, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(92.3145531090, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2210122026, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(38.4425575973, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2210122026, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(61.8275264374, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-96.8986497922, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1960122026, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(83.4683938611, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0198045567, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(25.7310602619, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_61" Id="{15765298-33dc-433a-abab-5579916c2fee}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_61
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 18.2471735065, -72.8266453459, 43.0093725563 ],
    CurrentVelocity := [ -770.5700123930, -890.0133848408, -820.1478231117 ],
    CurrentAcceleration := [ 9971.1325138339, 1252.7424655035, 1879.4313286579 ],
    TargetPosition := [ 1.3448250170, -22.5187329670, -44.5681269254 ],
    TargetVelocity := [ -178.2717208743, 907.0691528041, -980.1450825283 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_61');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1577503752, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(18.2471735065, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0464113622, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(0.8828678717, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1577503752, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-22.5187329670, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0234340719, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-91.6234470258, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(43.0093725563, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1577503752, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-44.5681269254, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_63" Id="{2aa79888-c58f-4607-83f5-0b5be8166d16}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_63
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 77.4754609681, 11.7772831592, 89.1695222672 ],
    CurrentVelocity := [ 701.7567710549, 539.0944740595, 186.0896874390 ],
    CurrentAcceleration := [ -7233.1726828454, -9279.2312139473, -6531.9065916408 ],
    TargetPosition := [ -36.3304773088, -54.1446636903, -66.9402209993 ],
    TargetVelocity := [ -178.2717208743, 907.0691528041, -980.1450825283 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_63');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2370508111, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0159585341, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(87.2115186899, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2370508111, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-36.3304773088, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0134009610, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(17.8475754059, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2120508111, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-74.7380591771, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0148978472, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(90.7761244949, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2370508111, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-66.9402209993, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_64" Id="{040b2d05-63f6-4f3a-b035-318e95bfc0b4}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_64
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 46.9275708207, -73.3359847426, 79.1344205580 ],
    CurrentVelocity := [ 664.6461875576, 745.2713761234, -444.0059340411 ],
    CurrentAcceleration := [ -1687.2061397191, 4836.1685650800, 9116.3993016577 ],
    TargetPosition := [ -94.3230910425, -15.1538190366, 63.3839855485 ],
    TargetVelocity := [ -178.2717208743, 907.0691528041, -980.1450825283 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_64');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2267260552, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0228909923, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(60.1006258839, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2267260552, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-94.3230910425, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2267260552, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-15.1538190366, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-73.3359847426, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1651449977, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(99.1329660130, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2267260552, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(63.3839855485, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_70" Id="{f5879547-a530-4dcc-9d90-b0c9eef41000}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_70
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 7.9384183974, 14.8439310276, -78.7868009446 ],
    CurrentVelocity := [ 42.8558362556, 381.7028370648, -474.9628009908 ],
    CurrentAcceleration := [ -8178.0559665182, -9349.2444703662, -7109.0934418181 ],
    TargetPosition := [ -50.8877050354, 33.1635707780, -7.5486147544 ],
    TargetVelocity := [ -390.7287890346, -321.0329916204, 424.0223704179 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_70');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1727066835, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0043253002, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(8.0364951553, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1727066835, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-50.8877050354, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1436984794, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(39.2444025350, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(14.8439310276, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1727066835, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-7.5486147544, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0338863668, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-93.7750356001, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_71" Id="{469260a7-b376-407d-91b4-034ff4762bb7}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_71
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 5.1522446134, -54.6185715675, 78.7530236571 ],
    CurrentVelocity := [ 821.9310887688, -40.3076301399, -674.3122888434 ],
    CurrentAcceleration := [ -5168.0861830348, -1197.1092343736, -3581.4075595549 ],
    TargetPosition := [ -57.5767125510, 4.9153459492, -18.5699911557 ],
    TargetVelocity := [ -390.7287890346, -321.0329916204, 424.0223704179 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_71');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1731995424, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0185398923, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(18.6528618059, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1731995424, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-57.5767125510, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1481995424, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(10.8578374063, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0116456845, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-54.9585705800, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(78.7530236571, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1481995424, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-27.0872170828, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_72" Id="{2a9306aa-cf6b-48d7-ad42-baeade31b7b9}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_72
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 70.0150182719, -60.8791965909, -75.5446587862 ],
    CurrentVelocity := [ -15.2742803348, -663.3952130493, -912.5201644051 ],
    CurrentAcceleration := [ -8583.5590704684, -4177.3971623951, 2932.1755946003 ],
    TargetPosition := [ 71.6999252163, 40.6014503268, -79.5860476611 ],
    TargetVelocity := [ -390.7287890346, -321.0329916204, 424.0223704179 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_72');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2439964233, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.2088730159, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(80.0343601059, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0231111601, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(69.0155641017, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2189964233, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(46.5439417840, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0302217465, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-79.1554594007, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-75.5446587862, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0564294143, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-104.2785860819, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_73" Id="{f923fff4-5046-45a7-a8e7-e8d37d854d50}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_73
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 5.2674767624, 30.4244778415, 13.6128776143 ],
    CurrentVelocity := [ 929.7611550648, 349.0032151314, 76.0896000954 ],
    CurrentAcceleration := [ -4925.9003916547, 7517.0955662034, 1123.2413669342 ],
    TargetPosition := [ 93.3268978756, 1.2692681822, -88.9230837058 ],
    TargetVelocity := [ -390.7287890346, -321.0329916204, 424.0223704179 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_73');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2042053671, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1792053671, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(101.0117842681, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(5.2674767624, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0415777148, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(41.8986186712, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2042053671, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(1.2692681822, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0152675059, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(14.4309805414, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1792053671, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-97.4403096329, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_74" Id="{896fae9c-c464-4f76-a1ed-88c333447d1a}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_74
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 22.5732451572, 5.7492403818, 52.3981030125 ],
    CurrentVelocity := [ 2.7776070120, 479.7947584468, 878.7354530958 ],
    CurrentAcceleration := [ 1627.7997178264, -9861.6831555400, -7226.5997782965 ],
    TargetPosition := [ -99.2274097233, 49.0042431923, -63.9617143892 ],
    TargetVelocity := [ -390.7287890346, -321.0329916204, 424.0223704179 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_74');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2578382532, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0053640474, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(22.5909840825, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2578382532, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-99.2274097233, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2291972453, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(55.0740561533, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(5.7492403818, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0159667503, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(64.9647526722, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2328382532, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-72.4789403163, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_80" Id="{aa84968b-e9cc-4444-9d32-ff94a714ce93}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_80
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 6.7507951410, 88.7393666769, 49.1727325876 ],
    CurrentVelocity := [ -197.5689459281, -321.6541615354, 527.6686714639 ],
    CurrentAcceleration := [ -5590.6598527119, 6896.9303240144, -147.3288736165 ],
    TargetPosition := [ -67.8746536945, -31.2721120302, 10.6814722895 ],
    TargetVelocity := [ 846.6609809028, 683.1583104383, 881.4464945306 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_80');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2260530871, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(6.7507951410, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1461428440, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-89.5692964073, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(88.7393666769, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2010530871, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-46.2677364578, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0248158389, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(60.1842774896, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2010530871, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-9.2713567404, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_81" Id="{0887686b-78f6-40bc-925f-28bb729f077e}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_81
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 97.5657667574, -62.9101352929, -19.9550398847 ],
    CurrentVelocity := [ -21.8012638922, -231.2419779434, 451.7345454372 ],
    CurrentAcceleration := [ -5215.4128091470, 1804.3839554747, -3965.6408062771 ],
    TargetPosition := [ -71.3016467524, -93.6394888935, -50.3460249872 ],
    TargetVelocity := [ 846.6609809028, 683.1583104383, 881.4464945306 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_81');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2608262533, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(97.5657667574, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2358262533, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-90.3848379416, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-62.9101352929, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2141672527, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-113.3257680417, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0200429490, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-12.7710389298, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1936105889, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-79.1341641085, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_83" Id="{a41499b7-b86d-4dc1-947e-e57f41f61316}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_83
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 57.7279063403, -74.8040175424, 53.4133305227 ],
    CurrentVelocity := [ 710.7289273785, 949.6943026652, 780.3698457313 ],
    CurrentAcceleration := [ -5932.4548182375, -5852.3868120424, 7761.1860122775 ],
    TargetPosition := [ 37.1310880678, -20.6783897894, 11.9841365297 ],
    TargetVelocity := [ 846.6609809028, 683.1583104383, 881.4464945306 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_83');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2678396067, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0514635959, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(73.4598487544, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2032636527, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(10.0970306963, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2678396067, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-20.6783897894, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-74.8040175424, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0347014825, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(79.5946664521, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2428396067, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-7.9686925002, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_55" Id="{35fc4b1f-425c-45c6-8622-194d850ec933}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_55
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 34.5930321570, 9.9525034935, -71.2141602865 ],
    CurrentVelocity := [ -905.0958880479, -318.1336730903, 711.6566828703 ],
    CurrentAcceleration := [ 8754.4343009910, -4235.9740340295, 3067.9954051950 ],
    TargetPosition := [ 54.5401183094, -9.0231259201, -62.7763497178 ],
    TargetVelocity := [ 744.5103243424, -202.3751265097, -49.1344472328 ],
    TargetAcceleration := [ -6856.9134368548, -6159.3176100358, -6824.1790674824 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_55');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1330325507, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1330325507, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(54.5401183094, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0646215511, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(13.1264941007, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(9.9525034935, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1330325507, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-9.0231259201, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0579660352, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-47.4810264663, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-71.2141602865, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_56" Id="{366484e0-acf6-4115-bef8-dc5a52d5e834}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_56
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 71.6387381070, 81.8113619108, -99.4217595702 ],
    CurrentVelocity := [ 721.7732335562, 79.3127849235, 195.9283254510 ],
    CurrentAcceleration := [ -8788.4573857700, 3563.3886508772, 619.2039167704 ],
    TargetPosition := [ 84.3205128229, 44.5097635330, 89.9699296676 ],
    TargetVelocity := [ 744.5103243424, -202.3751265097, -49.1344472328 ],
    TargetAcceleration := [ 3493.8717626659, -6203.3799342171, 9911.7926760811 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_56');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2293264400, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0403377743, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(87.2926823555, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1832657618, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(64.5629415691, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0192231958, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(83.0472559544, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2293264400, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(44.5097635330, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2003131677, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(92.3108719619, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-99.4217595702, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_57" Id="{c7f43fc4-92b6-4b5c-81c5-77500b46af8f}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_57
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -48.0100921448, 33.7443184110, -93.2403249798 ],
    CurrentVelocity := [ 989.3392655495, -56.0379382181, -713.0420521300 ],
    CurrentAcceleration := [ 7571.1242195661, 4656.5878425323, -6972.6551795371 ],
    TargetPosition := [ -79.8831521410, -4.1750267449, -0.9774501527 ],
    TargetVelocity := [ 744.5103243424, -202.3751265097, -49.1344472328 ],
    TargetAcceleration := [ -9506.0188438533, -5936.3240710632, 3649.2987579435 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_57');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2919406850, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0344639053, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-14.8752385324, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2550581615, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-107.1185808103, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(33.7443184110, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2919406850, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-4.1750267449, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2753938821, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-0.2689104922, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0801188531, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-117.4981560740, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_58" Id="{0a668454-289c-4916-8637-51f02b09ef56}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_58
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 2.5039212296, -19.8689427441, 67.8639572856 ],
    CurrentVelocity := [ 156.4557340962, -67.6174019710, 285.9318667728 ],
    CurrentAcceleration := [ -4243.0808560296, 1798.5569522434, 7006.0401270439 ],
    TargetPosition := [ 32.7430143270, -69.8888135717, 74.5836760124 ],
    TargetVelocity := [ 744.5103243424, -202.3751265097, -49.1344472328 ],
    TargetAcceleration := [ 7628.5534426582, -6245.6975481518, 7574.7601485903 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_58');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1222715308, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1222715308, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(32.7430143270, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(2.5039212296, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-19.8689427441, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1222715308, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-69.8888135717, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0438542186, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(76.7658248813, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(67.8639572856, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_59" Id="{f81358d2-cba7-4a39-9fe5-78f8c4b0bf0c}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_59
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -17.4178184644, -30.7643636460, 14.1574943277 ],
    CurrentVelocity := [ -607.1637839826, 746.7308031860, -439.3105539886 ],
    CurrentAcceleration := [ -4895.3246294317, -9710.6259750760, -4996.1616960526 ],
    TargetPosition := [ -33.2050230175, -44.0856367821, 86.3505956227 ],
    TargetVelocity := [ 744.5103243424, -202.3751265097, -49.1344472328 ],
    TargetAcceleration := [ 4456.0365117673, 7317.5951556793, 4823.4367522070 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_59');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1975456856, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-17.4178184644, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1519321785, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-52.3049890094, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0408224346, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-14.5246670715, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1975456856, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-44.0856367821, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1788993960, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(87.2408844313, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0312452021, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(2.0595007650, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_65" Id="{3f3a0aeb-8778-4bb2-a7ee-bbde9e822269}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_65
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -84.6051756077, -64.2825361239, 73.8293770418 ],
    CurrentVelocity := [ -630.4212368384, 310.2429576756, -117.9550623444 ],
    CurrentAcceleration := [ 4694.3591812965, -7236.1963911159, 3118.3448217266 ],
    TargetPosition := [ 66.7225090554, -97.9688285469, 81.1642980960 ],
    TargetVelocity := [ -178.2717208743, 907.0691528041, -980.1450825283 ],
    TargetAcceleration := [ -6856.9134368548, -6159.3176100358, -6824.1790674824 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_65');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2381424047, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.2239288197, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(68.1808834274, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0191320510, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-94.8735417794, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0159547545, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-60.7952012411, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1505723347, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-133.5071926342, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1837083387, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(110.1974165261, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0137112008, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(72.8488799407, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_66" Id="{bb5b5b9a-bb57-4dc3-bd79-e50b2b6ca09e}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_66
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 30.5848311694, 43.3217166449, -82.6395362281 ],
    CurrentVelocity := [ 96.0006477942, 482.5905794272, 97.6091912996 ],
    CurrentAcceleration := [ -686.7323201741, 6959.6624415725, -250.6103323330 ],
    TargetPosition := [ 11.9116645003, -99.2984431198, 65.4599910980 ],
    TargetVelocity := [ -178.2717208743, 907.0691528041, -980.1450825283 ],
    TargetAcceleration := [ 3493.8717626659, -6203.3799342171, 9911.7926760811 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_66');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.3154336638, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0148643196, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(31.4996006554, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.3154336638, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(11.9116645003, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0336995781, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(58.4338840444, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2826794389, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-127.6510691588, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2780439229, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(102.0662573254, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-82.6395362281, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_67" Id="{8c06704e-170f-4392-af55-55d36211f6f6}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_67
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 68.0298214781, -76.2103329227, 88.8106658811 ],
    CurrentVelocity := [ 858.2588611158, 913.1827502246, -354.1405542724 ],
    CurrentAcceleration := [ -6697.7816149381, -8284.6411914094, 8519.0660760935 ],
    TargetPosition := [ -72.1586291606, -23.9195305902, -18.0981735373 ],
    TargetVelocity := [ -178.2717208743, 907.0691528041, -980.1450825283 ],
    TargetAcceleration := [ -9506.0188438533, -5936.3240710632, 3649.2987579435 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_67');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2477689389, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0166277730, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(80.7618716507, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2477689389, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-72.1586291606, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2477689389, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-23.9195305902, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-76.2103329227, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(88.8106658811, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2477689389, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-18.0981735373, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_68" Id="{0f93d517-d344-4744-ad44-404ccab087b2}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_68
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 35.4883020055, 67.6522117748, 2.4005345821 ],
    CurrentVelocity := [ -658.2283960345, -389.1648971185, -524.5644704693 ],
    CurrentAcceleration := [ 4726.3656628765, -9770.2206042140, 1834.8395635038 ],
    TargetPosition := [ -11.4879644895, 90.3492150514, 1.6502950667 ],
    TargetVelocity := [ -178.2717208743, 907.0691528041, -980.1450825283 ],
    TargetAcceleration := [ 7628.5534426582, -6245.6975481518, 7574.7601485903 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_68');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2212906341, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(35.4883020055, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2212906341, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-11.4879644895, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2212906341, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(90.3492150514, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1477911106, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(49.9637872880, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1175308901, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(39.5386143847, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0227064505, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-7.4765156712, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_69" Id="{29c30451-f872-4e2e-bf61-0a484a8f382b}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_69
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 19.2006416266, -21.5653171708, -74.1624621894 ],
    CurrentVelocity := [ -297.3290083114, -344.7060407814, 244.6964137243 ],
    CurrentAcceleration := [ -2885.2851517094, 5762.5886532453, 7398.0196688907 ],
    TargetPosition := [ 37.4474249343, 37.9961079624, 91.4109055053 ],
    TargetVelocity := [ -178.2717208743, 907.0691528041, -980.1450825283 ],
    TargetAcceleration := [ 4456.0365117673, 7317.5951556793, 4823.4367522070 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_69');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2670806272, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.2395918047, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(41.2626158169, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0318423938, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(12.5503650336, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2670806272, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(37.9961079624, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0236834168, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-26.3707904802, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2360513313, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(120.1627559469, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-74.1624621894, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_75" Id="{e53e663d-7115-4c67-a742-eedb229b6430}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_75
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 23.9328346669, -66.6552204903, 27.7529624551 ],
    CurrentVelocity := [ -298.9593857947, 925.1140158206, -87.8736786502 ],
    CurrentAcceleration := [ 889.4010299159, -1907.5527165396, -9689.9313873767 ],
    TargetPosition := [ -78.2643535206, -78.7424510489, 75.7112920394 ],
    TargetVelocity := [ -390.7287890346, -321.0329916204, 424.0223704179 ],
    TargetAcceleration := [ -6856.9134368548, -6159.3176100358, -6824.1790674824 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_75');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1535153335, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(23.9328346669, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1535153335, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-78.2643535206, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0775611045, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-40.7340060484, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1535153335, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-78.7424510489, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1535153335, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(75.7112920394, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0312538555, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(24.3445084899, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_76" Id="{7638a569-813e-41a9-8604-900d1144ef90}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_76
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -53.7628670686, 88.7015501783, -54.0820028516 ],
    CurrentVelocity := [ 816.8890113811, -938.1945824580, 282.2311835070 ],
    CurrentAcceleration := [ -5961.3406851582, -1170.5149490967, -939.0506546861 ],
    TargetPosition := [ -82.3539205566, 0.3310624649, 49.9227751096 ],
    TargetVelocity := [ -390.7287890346, -321.0329916204, 424.0223704179 ],
    TargetAcceleration := [ 3493.8717626659, -6203.3799342171, 9911.7926760811 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_76');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1472525852, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0665665529, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-36.2174608094, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1472525852, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-82.3539205566, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(88.7015501783, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1472525852, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(0.3310624649, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1472525852, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(49.9227751096, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-54.0820028516, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_77" Id="{2c6f57a6-0922-4336-8459-8a387ab364e5}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_77
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -12.6905178111, 59.0723132836, 64.4888014333 ],
    CurrentVelocity := [ 718.9186552238, 101.9460971768, -703.3172768794 ],
    CurrentAcceleration := [ -7714.9170939878, -9826.4584100794, 4036.5887524358 ],
    TargetPosition := [ 19.2247534741, -44.7207857826, 27.0332280095 ],
    TargetVelocity := [ -390.7287890346, -321.0329916204, 424.0223704179 ],
    TargetAcceleration := [ -9506.0188438533, -5936.3240710632, 3649.2987579435 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_77');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1575814422, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1345616774, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(24.2039887539, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-12.6905178111, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0078598941, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(59.5053272517, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1575814422, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-44.7207857826, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(64.4888014333, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1242832730, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(19.5762747589, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_78" Id="{ef7bd31d-ca69-4d57-9d3c-94cf01ef6cd1}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_78
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -83.9757056141, -14.7290997410, -36.7501994216 ],
    CurrentVelocity := [ -180.0893969258, 728.4862123978, -924.2461760019 ],
    CurrentAcceleration := [ 5646.1191059504, 2994.3657764014, -2663.0088999165 ],
    TargetPosition := [ -38.3611619531, 59.2206233181, -82.6903602426 ],
    TargetVelocity := [ -390.7287890346, -321.0329916204, 424.0223704179 ],
    TargetAcceleration := [ 7628.5534426582, -6245.6975481518, 7574.7601485903 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_78');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1726153942, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1380797024, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-25.8098920926, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0153037889, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-85.5926799047, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1554225162, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(63.1393884381, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-14.7290997410, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-36.7501994216, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1464218328, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-88.9671360068, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_79" Id="{ccfa1c25-da1e-46f9-b5bd-2499b13ba34b}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_79
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -65.8180677489, 99.6867803923, -33.0369923967 ],
    CurrentVelocity := [ -983.1787645421, -526.3056826602, -865.1627250836 ],
    CurrentAcceleration := [ -427.9431108639, 8872.8803081223, 4423.8048527442 ],
    TargetPosition := [ 17.9089169920, 38.7175302176, 20.5320418820 ],
    TargetVelocity := [ -390.7287890346, -321.0329916204, 424.0223704179 ],
    TargetAcceleration := [ 4456.0365117673, 7317.5951556793, 4823.4367522070 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_79');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2648440299, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.2342739842, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(28.1265181074, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0255349289, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-88.8430365605, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(99.6867803923, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2648440299, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(38.7175302176, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2648440299, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(20.5320418820, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0576223603, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-57.4398490086, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_86" Id="{d1b97c61-0f9d-486a-ad91-a6bd19f2617e}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_86
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -81.3956453052, 47.5341418412, 72.7045268150 ],
    CurrentVelocity := [ -475.6820957083, -808.6877899529, 350.9656207539 ],
    CurrentAcceleration := [ 8674.4581110296, -6681.2999097829, -2265.6823736026 ],
    TargetPosition := [ -54.0892087624, -4.9832657490, 36.4199046341 ],
    TargetVelocity := [ 846.6609809028, 683.1583104383, 881.4464945306 ],
    TargetAcceleration := [ 3493.8717626659, -6203.3799342171, 9911.7926760811 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_86');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1917227470, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1917227470, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-54.0892087624, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0298546897, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-88.8386302284, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(47.5341418412, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1181557020, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-28.0050124134, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0221678970, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(78.4755137630, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1109233219, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(25.6129286690, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_89" Id="{9a8b8640-4622-40e3-af33-68e82d12b651}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_89
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -62.5596241011, 99.5978250071, -36.1460990211 ],
    CurrentVelocity := [ 726.0340534185, -322.9010560181, -562.8712460859 ],
    CurrentAcceleration := [ 8635.8380657381, -5616.5677472114, -3864.2870920477 ],
    TargetPosition := [ -49.7127965718, 10.1534083676, -70.9309943364 ],
    TargetVelocity := [ 846.6609809028, 683.1583104383, 881.4464945306 ],
    TargetAcceleration := [ 4456.0365117673, 7317.5951556793, 4823.4367522070 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_89');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2092374844, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0856405131, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-35.9483347394, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1356405131, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-67.9951278249, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(99.5978250071, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1933844784, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(0.7740355131, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-36.1460990211, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1512999543, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-95.8623434324, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
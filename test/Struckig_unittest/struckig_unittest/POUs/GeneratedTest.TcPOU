<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="GeneratedTest" Id="{8a002d40-1b8b-4a36-917f-04dd149a7db3}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK GeneratedTest EXTENDS TcUnit.FB_TestSuite
VAR
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 48.86656216713086564596, 31.55963588984187140341, -13.09422790776093847853 ],
    CurrentVelocity := [ -274.21841080128081102885, -440.94461360926254656079, -764.75678162210920163488 ],
    CurrentAcceleration := [ -1478.09700836416959646158, 686.79611869591644790489, -9263.72976579731221136171 ],
    TargetPosition := [ 25.57994474955607699940, -15.83091418217283319336, -38.97164514571973370494 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;  
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[Test_Trajectory_HasTargetAcceleration_1();
Test_Trajectory_2();
Test_Trajectory_HasTargetVelocity_3();
Test_Trajectory_HasTargetVelocity_4();
Test_Trajectory_5();
Test_Trajectory_6();
Test_Trajectory_7();
Test_Trajectory_HasTargetAcceleration_8();
Test_Trajectory_HasTargetVelocity_9();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_10();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_11();
Test_Trajectory_12();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_13();
Test_Trajectory_HasTargetVelocity_14();
Test_Trajectory_HasTargetVelocity_15();
// Test_Trajectory_16(); // struckig time_vel instead of a two step profile in step1 for profile[0], because cbrt(a*srqt(b*c)) deviates in the 10e-16 digit
Test_Trajectory_HasTargetVelocity_17();
Test_Trajectory_HasTargetAcceleration_18();
Test_Trajectory_HasTargetVelocity_19();
Test_Trajectory_HasTargetVelocity_20();
Test_Trajectory_HasTargetVelocity_21();
Test_Trajectory_HasTargetVelocity_22();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_23();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_24();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_25();
Test_Trajectory_HasTargetAcceleration_26();
Test_Trajectory_HasTargetVelocity_27();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_28();
Test_Trajectory_HasTargetAcceleration_29();
Test_Trajectory_30();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_31();
Test_Trajectory_32();
Test_Trajectory_33();
Test_Trajectory_HasTargetVelocity_34();
Test_Trajectory_HasTargetVelocity_35();
Test_Trajectory_HasTargetVelocity_36();
//Test_Trajectory_HasTargetAcceleration_37();  // struckig time_vel instead of a two step profile in step1 for profile[0], because cbrt(a*srqt(b*c)) deviates in the 10e-16 digit
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_38();
Test_Trajectory_HasTargetAcceleration_39();
Test_Trajectory_40();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_41();
//Test_Trajectory_HasTargetAcceleration_42(); // struckig time_vel instead of a two step profile in step1 for profile[0], because cbrt(a*srqt(b*c)) deviates in the 10e-16 digit
Test_Trajectory_HasTargetAcceleration_43();
Test_Trajectory_HasTargetVelocity_44();
Test_Trajectory_HasTargetVelocity_45();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_46();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_47();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_48();
Test_Trajectory_49();
Test_Trajectory_HasTargetAcceleration_50();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_51();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_52();
Test_Trajectory_53();
Test_Trajectory_HasTargetVelocity_54();
Test_Trajectory_HasTargetVelocity_55();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_56();
Test_Trajectory_HasTargetAcceleration_57();
Test_Trajectory_HasTargetAcceleration_58();
Test_Trajectory_59();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_60();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_61();
Test_Trajectory_62();
Test_Trajectory_HasTargetAcceleration_63();
Test_Trajectory_64();
Test_Trajectory_65();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_66();
Test_Trajectory_HasTargetAcceleration_67();
Test_Trajectory_68();
Test_Trajectory_HasTargetVelocity_69();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_70();
]]></ST>
    </Implementation>
    <Method Name="Test_Trajectory_12" Id="{58f9f3ea-5aa9-42a6-982d-d62f562beb42}">
      <Declaration><![CDATA[METHOD Test_Trajectory_12
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 12.15863849634686744139, 83.56438022017914590833, -29.82534868849941744884 ],
    CurrentVelocity := [ -881.54677264260010360886, -40.22247547933807254594, 795.30816871835008896596 ],
    CurrentAcceleration := [ 6802.73049394882036722265, -2844.95338607063877134351, -3652.21806306270900677191 ],
    TargetPosition := [ 61.24855302996508044089, -54.65891429617437324850, 65.64407005892678625969 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_12');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.18765626933931714437, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.18765626933931711662, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(61.24855302996508044089, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.01649658688256397387, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-0.85965741863935996037, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(83.56438022017914590833, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.18765626933931714437, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-54.65891429617437324850, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.18765626933931711662, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(65.64407005892678625969, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-29.82534868849941744884, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_16" Id="{86edb4f5-1bc8-4378-bcbe-49b36e551e58}">
      <Declaration><![CDATA[METHOD Test_Trajectory_16
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 8.21667911707363884943, -42.91905125747626215116, 48.44417367414695263506 ],
    CurrentVelocity := [ -786.82135287550590874162, 724.24582523622666485608, -678.96507198447488917736 ],
    CurrentAcceleration := [ 2775.55640569175011478364, 5006.65330127050037845038, -1991.17849814757664717035 ],
    TargetPosition := [ -91.18523630560480341956, 39.65724384459844031880, 80.00859285567460688071 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_16');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.25458567912226787167, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(8.21667911707363884943, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.25458567912226787167, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-91.18523630560480341956, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.25458567912226787167, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(39.65724384459844031880, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-42.91905125747626215116, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.25458567912226787167, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(80.00859285567460688071, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.05149542234051582984, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(27.20307271065990661896, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_2" Id="{feb7deb7-240d-4725-bc69-7e49533aac11}">
      <Declaration><![CDATA[METHOD Test_Trajectory_2
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 44.74559775494429914033, 63.66880079927278757168, -12.48356919175202506267 ],
    CurrentVelocity := [ 264.84303106023071450181, -712.27423462239960372244, -643.21373646696986270399 ],
    CurrentAcceleration := [ 424.20358939641846518498, -6495.14198884339384676423, -9831.31287541736855928320 ],
    TargetPosition := [ 57.39429753248339238780, 42.08707495871314563374, -1.97763153852878303951 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_2');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.16542491911229942336, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.16542491892541816290, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(57.39429753248339949323, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(44.74559775494429914033, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(63.66880079927278757168, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.06011117382266835396, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(35.26367745920458673936, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.16542491911229942336, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-1.97763153852878303951, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.08144760340330899073, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-36.92186481482234938767, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_30" Id="{4de81f97-6bfa-40ca-a367-0928a45b7b8c}">
      <Declaration><![CDATA[METHOD Test_Trajectory_30
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 20.18249544120934046987, -10.33662927823941402039, -59.33613032688207766796 ],
    CurrentVelocity := [ -147.36941969263784812938, 276.37127321170169125253, -471.16528659637026521523 ],
    CurrentAcceleration := [ 5958.91709773212642176077, -6024.30381588076943444321, 4027.41742253926349803805 ],
    TargetPosition := [ 57.35278694063060811459, 37.88908861774962133495, 47.84009680376084361342 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_30');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.19875826019833076064, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.19875826019833078839, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(57.35278694063060811459, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.01314032839612196309, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(19.06299300602372071012, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.19875826019833076064, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(37.88908861774962133495, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-10.33662927823941402039, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.19875826019833076064, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(47.84009680376084361342, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.01996572822182592077, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-66.87937049880544293501, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_32" Id="{80fcbbf3-69f2-46af-adc1-894cfdbbce94}">
      <Declaration><![CDATA[METHOD Test_Trajectory_32
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -71.32072487430589546875, 75.77874394332496876814, -31.17619673281745917848 ],
    CurrentVelocity := [ -39.37043543026334191381, -314.80982911633589083067, -743.63983854388607142027 ],
    CurrentAcceleration := [ 918.61171848468075040728, -8240.24070744882010330912, 376.40421615367449703626 ],
    TargetPosition := [ -38.32577323859909057546, 76.88839801585137934126, 77.24450399202348194194 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_32');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.22561874467077386308, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.22561874467077389084, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-38.32577323859909057546, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.00883895720172546244, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-71.54075918203305661791, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.22561874448389260261, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(76.88839801585137934126, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.04326693976782886031, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(64.99037106700389188063, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.22561874467077386308, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(77.24450399202348194194, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.02452949472980790746, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-47.33615887649365561174, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_33" Id="{700ca3c0-7a65-472c-a638-df977d35440e}">
      <Declaration><![CDATA[METHOD Test_Trajectory_33
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -10.72081173000827902797, -58.44147038088563306246, 98.86324493851924444243 ],
    CurrentVelocity := [ -408.47451658779903027607, -786.19958599415508615493, -998.10812621012325962511 ],
    CurrentAcceleration := [ 3503.92425371204808470793, 3035.68280271572984929662, -8529.36175578239635797217 ],
    TargetPosition := [ -24.74505052699171869790, -29.66847304289291287205, -86.07591857423138037575 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_33');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.17123630970102474147, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-10.72081173000827902797, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.17123630970102476923, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-24.74505052699171869790, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.17123630970102471371, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-29.66847304289291287205, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.06908515615955748701, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-76.18339289032344652242, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(98.86324493851924444243, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.17123630970102474147, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-86.07591857423138037575, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_40" Id="{0583eeff-b654-4173-ae02-db44e8cebcd8}">
      <Declaration><![CDATA[METHOD Test_Trajectory_40
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 29.38520952151498022431, 0.54024576846694571941, -55.20826603737940274641 ],
    CurrentVelocity := [ -969.77050425776712927473, -274.95655325444397476531, 136.62875181670483470953 ],
    CurrentAcceleration := [ -3024.14261213553436391521, 816.78995976388432609383, -4328.68204209528175852029 ],
    TargetPosition := [ 1.97730433317153142525, -41.44239712071811254646, -63.08579022434781791162 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_40');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.13217815288228063064, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(29.38520952151498022431, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.06794606535212494025, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-9.67357879957821609196, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(0.54024576846694571941, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.13217815288228063064, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-41.44239712071811254646, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.01413581147570610458, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-54.08246211603182018735, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.13217815261799065185, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-63.08579022434781791162, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_49" Id="{72a5070e-83e4-4ffa-89e6-c521b0557d81}">
      <Declaration><![CDATA[METHOD Test_Trajectory_49
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -29.51211691133248393726, -68.13722912354262462031, 25.86635819923048984492 ],
    CurrentVelocity := [ -361.39127939828188118554, 280.60480492296255761175, 432.98890733596567770292 ],
    CurrentAcceleration := [ -4470.60901176135485002305, 6427.77132791660551447421, -7455.37531375192429550225 ],
    TargetPosition := [ 60.41587137499075765845, -7.73628974565106375394, 93.39422462833789495562 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_49');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.19300944274036524462, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.19300944274036524462, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(60.41587137499075765845, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.03058826126470169660, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-38.84193813948969165040, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.19300944274036524462, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-7.73628974565106375394, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-68.13722912354262462031, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.19300944274036524462, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(93.39422462833789495562, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(25.86635819923048984492, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_5" Id="{13f76fd9-ef01-482e-9806-d541fd789409}">
      <Declaration><![CDATA[METHOD Test_Trajectory_5
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -56.80336446239233794131, -86.51356035578187686497, -74.10635479722176910400 ],
    CurrentVelocity := [ -592.89949250113568268716, -990.58767738485028075957, 657.50930880589612570475 ],
    CurrentAcceleration := [ 1441.54985938923709909432, 5942.57310535894430358894, 9734.30059765397891169414 ],
    TargetPosition := [ -19.92529957498598491838, -6.87084002731369025696, 65.89578231878417113876 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_5');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.21893317752843077795, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.21893317722325497665, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-19.92529957498598491838, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.04539326985447761365, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-71.21834027209614248477, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.21893317699985082037, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-6.87084002731364940075, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.01757178361830132041, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-102.27910277467870514556, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.21893317752843075019, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(65.89578231878417113876, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-74.10635479722176910400, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_53" Id="{faa24a53-3c24-444f-a082-779aa468a44d}">
      <Declaration><![CDATA[METHOD Test_Trajectory_53
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 49.63749459770096450484, -62.67069199879444596490, 94.53868838473144364798 ],
    CurrentVelocity := [ 664.16399550988307964872, 189.17863757101872579369, -166.93673264110304899077 ],
    CurrentAcceleration := [ 3813.89534506026757298969, -4230.27473187632494955324, -810.58367009230460098479 ],
    TargetPosition := [ 40.02418382022895571026, 1.64383018244964773658, -62.79757540961892203768 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_53');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.19412157092543416703, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.05226266454630152519, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(72.04161381570744993041, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.19412157039685418169, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(40.02418382022894860484, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.19412157092543416703, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(1.64383018244964773658, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-62.67069199879444596490, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(94.53868838473144364798, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.19412157092543416703, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-62.79757540961892203768, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_59" Id="{a7494a40-e9ee-4ed7-b86c-d5f7b1b24137}">
      <Declaration><![CDATA[METHOD Test_Trajectory_59
VAR_INST

END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_59');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.12819874947134405, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');
// this test returns the same values as the ruckig cpp version it is compiled with,
// but the newest version results differ

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(48.86656216713086564596, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
// AssertEquals_LREAL(0.12819874947134405, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(25.57994474955607699940, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(31.55963588984187140341, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
// AssertEquals_LREAL(0.12819874947134405, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-15.83091418217285806236, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-13.09422790776093847853, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
// AssertEquals_LREAL(0.12819874947134405, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
// AssertEquals_LREAL(-48.94577744042891254139, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_6" Id="{e4769e83-a70a-495b-8650-48473eb66061}">
      <Declaration><![CDATA[METHOD Test_Trajectory_6
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 34.87125433480801461883, -76.41743919954686248275, -14.51229957505336187751 ],
    CurrentVelocity := [ -351.47533977255477566359, -987.15940067026019733021, 806.52305687867078631825 ],
    CurrentAcceleration := [ 1479.98184028979630966205, 8781.04772240824968321249, -8054.60406117963975702878 ],
    TargetPosition := [ 89.75739755287582966048, -1.42163448044479423515, -1.45152739794252738648 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_6');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.21185526251360681238, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.21185526251360681238, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(89.75739755287582966048, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.02315002269963775672, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(28.78538978510774271058, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.21185526251360681238, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-1.42163448044479423515, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.01402369034698968710, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-89.02987231727530570424, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.04895379271357422346, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(5.32847853519255032495, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-14.51229957505336187751, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_62" Id="{65ab1bc3-7c0d-4d67-930f-12ee3f027e42}">
      <Declaration><![CDATA[METHOD Test_Trajectory_62
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 12.59051349490785298713, 2.34116410267218100216, -83.91521339841989401975 ],
    CurrentVelocity := [ -551.49352374949262411974, 694.95621845049936382566, -934.69209805013122149830 ],
    CurrentAcceleration := [ -5149.29503825546817097347, -9527.17655518820902216248, -9641.67382351083688263316 ],
    TargetPosition := [ -69.43235683496359911260, 5.95471336539937112775, -76.71462247839342296629 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_62');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.19541920510428964497, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(12.59051349490785298713, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.19541920510428961721, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-69.43235683496359911260, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.04065736745126265206, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(16.73830873177616496150, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(2.34116410267218100216, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.19541920510428964497, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-76.71462247839342296629, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.10355548042620135729, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-123.55479709285413036923, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_64" Id="{6c69e6af-4862-4376-b2e6-a16c5b250733}">
      <Declaration><![CDATA[METHOD Test_Trajectory_64
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 84.12964321952199497900, 15.09477787023756434337, 10.23674324179428651860 ],
    CurrentVelocity := [ -970.87417203950269595225, -928.12491864862022339366, 286.06399288670468195050 ],
    CurrentAcceleration := [ 4961.60497362833666556980, 5135.12661885897978208959, 79.48669035600505594630 ],
    TargetPosition := [ -30.09864175377319384097, 39.92408869665283077666, 24.17762560090359613696 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_64');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.17167999763375443867, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(84.12964321952199497900, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.17167999763375441091, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-30.09864175377319384097, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.17167999763375443867, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(39.92408869665283077666, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.08124569148055139911, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-4.66763872582565753078, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.17167999763375443867, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(24.17762560090359613696, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(10.23674324179428651860, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_65" Id="{6e0e0934-027d-4357-8b2d-1ec83f92d0c2}">
      <Declaration><![CDATA[METHOD Test_Trajectory_65
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 33.17628426446438538733, 50.00168428476928283999, 61.64263417164463021436 ],
    CurrentVelocity := [ -519.65995269471272877126, 66.93100559795539084007, -520.26416261644567384792 ],
    CurrentAcceleration := [ 3662.19439283437168342061, -8995.68879146701328863855, 4153.78894930269962060265 ],
    TargetPosition := [ 68.69261284366797326584, -66.97490772805458902894, -0.91414242050534255668 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_65');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.17505526811503621665, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.17505526811503624440, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(68.69261284366797326584, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.04377678309027987352, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(23.42380651880664998998, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.00589507367218594907, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(50.21262355411419520124, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.17505526811503621665, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-66.97490772805458902894, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(61.64263417164463021436, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.17505526750468464181, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-0.91414242050535987616, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_68" Id="{893b900a-8ff0-42b8-a82e-528dfc832c4e}">
      <Declaration><![CDATA[METHOD Test_Trajectory_68
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 40.62614323446814523777, 62.35469594204587906461, 24.25299098284108367807 ],
    CurrentVelocity := [ 953.39433299337724747602, 990.56715267728145590809, -738.17109364107295732538 ],
    CurrentAcceleration := [ 3444.24110064584601786919, 3257.77518810100627888460, 851.25313620111410273239 ],
    TargetPosition := [ -19.90968527499555307259, -93.17120052432892407523, -41.77005066216172934901 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_68');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.27894619941724319023, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.08122133382222911091, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(76.63857184314483106391, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.27894619941724324574, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-19.90968527499555307259, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.02907221898512625524, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(89.25318532542951288633, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.27894619941724319023, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-93.17120052432892407523, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(24.25299098284108367807, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.27894619941724324574, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-41.77005066216172934901, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_7" Id="{f443cdcd-0a4e-4a5f-83c7-aa270d8c4f29}">
      <Declaration><![CDATA[METHOD Test_Trajectory_7
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -12.40730451188392180484, -80.83422386552678062799, 12.57670349433081469215 ],
    CurrentVelocity := [ 265.90445653002484505123, 357.90733431729245239694, 18.46515886490806224174 ],
    CurrentAcceleration := [ -2167.27013269919098092942, 949.55886260518127528485, 2528.49090058209003473166 ],
    TargetPosition := [ -97.77133953691699730371, -53.09340578221126349945, -63.96892666434119689711 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_7');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.17206395017599335207, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.02229091233412601111, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-8.49529533349170762335, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.17206395017599335207, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-97.77133953691699730371, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.17206395017599335207, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-53.09340578221126349945, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-80.83422386552678062799, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.01065410250964578427, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(12.75569141626643698828, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.17206395017599335207, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-63.96892666434119689711, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_1" Id="{cb021cd2-1eb2-497e-92b0-13ba4b162b4d}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_1
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 25.86378287162919775710, 39.97874579948185669309, 66.37850532037469974966 ],
    CurrentVelocity := [ 108.55224855824349106115, 850.67115953704592357099, -900.01891765084087637661 ],
    CurrentAcceleration := [ -4974.58899060919702606043, 128.05989999893972708378, 9868.96321801586236688308 ],
    TargetPosition := [ -21.36275651230414496240, -98.13914545695496371991, -58.44346444717753996656 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ 168.16084634060302960279, -985.57063173038272907434, -918.48462244327140524547 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_1');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.25340816376238173291, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.01138991764879995067, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(26.58049122869438463113, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.25340816376238173291, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-21.36275651230414496240, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.02516007487499867176, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(59.29861986755942382388, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.25094423718305564064, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-98.14014267936222779554, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(66.37850532037469974966, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.25111195220627335889, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-58.44427157893569813041, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_18" Id="{87bf6721-83d8-4b32-966c-99ac4a78d639}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_18
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 22.29044197833951557186, -39.95859595632313698843, 54.11499073315658847605 ],
    CurrentVelocity := [ 553.01033394001592569111, 267.36329442224518970761, 895.38647163815880958282 ],
    CurrentAcceleration := [ 4077.95591124392740312032, -4124.70260840723312867340, -6307.27396104388935782481 ],
    TargetPosition := [ 19.06397199072051762414, 8.08665977239270716836, -61.80722661584501054222 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ -663.32888732782430452062, 140.67534288890783500392, 211.50762532936892057478 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_18');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.23288436093144340711, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.04687484204301414770, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(39.64467835267222994844, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.23122603871312383261, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(19.06366796137865549099, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.23253267257422116643, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(8.08666267229066093591, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-39.95859595632313698843, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.01711590754869513759, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(67.84791417376290212360, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.23288436093144340711, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-61.80722661584501054222, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_26" Id="{78b2dd22-53cc-4816-80c8-7473b9a3d28e}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_26
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 77.39232107651710634855, -63.03832121402539456767, 50.64263565514380616150 ],
    CurrentVelocity := [ 390.27238163421588978963, -873.49794562195870639698, 981.87086783538688905537 ],
    CurrentAcceleration := [ 7745.26876878265466075391, -2376.69313379117920703720, 3911.92493779323558555916 ],
    TargetPosition := [ -47.12017227692884091539, 44.57407397341043520100, 81.30379250690350545483 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ 543.91131759469612916291, 821.67345447350203357928, 930.33404428054154777783 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_26');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.24230324879908460289, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.03468158596097831864, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(90.02357999691733425607, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.24230324879908460289, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-47.12017227692884091539, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.24024906516290109315, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(44.57465183860438884267, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.02797086641723897649, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-85.48273497475497606501, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.06985653728563799569, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(92.06916456436438522815, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(50.64263565514380616150, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_29" Id="{8b14fd82-1380-457d-b2f1-c9b66dfd3987}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_29
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 44.91183232377716194605, 20.60848326549906062155, -39.18243853552834110587 ],
    CurrentVelocity := [ 56.12947053833636346099, 974.84045859192679017724, 288.91800445440071598568 ],
    CurrentAcceleration := [ -7725.89726821354634012096, 1120.94279215741516964044, 3716.25460982452932512388 ],
    TargetPosition := [ 82.62783593756236655281, -34.57308232880984633084, 42.27769995179082229697 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ -115.18831231873787146469, 604.54144453707817774557, -488.03361084610719444754 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_29');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.21276205615654666947, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.21276205615654666947, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(82.62783593756236655281, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(44.91183232377716194605, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.02640117849019677290, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(44.28245347329226433430, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.21276205615654666947, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-34.57308232880984633084, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.21276205615654666947, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(42.27769995179082229697, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-39.18243853552834110587, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_37" Id="{aaa4a0ba-5130-46a0-8ffa-b27e907e8bd6}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_37
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 75.70258410717627839404, -31.81448222562724481577, -58.08554852109006816363 ],
    CurrentVelocity := [ 171.95882136884461033333, -584.70058950900761374214, 745.12321825604590230796 ],
    CurrentAcceleration := [ 5092.19654988173533638474, 7179.19572851603152230382, 1704.28450887377948674839 ],
    TargetPosition := [ 97.60417669221266123714, 88.97844242319803242935, -19.79432812800784802221 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ 983.95730849860865419032, -389.38723727042054179037, -311.43162034307158592128 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_37');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.21113509394885510151, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.20867520067760855773, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(97.60516902544232209493, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(75.70258410717627839404, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.21113509394885510151, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(88.97844242319803242935, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.01602600533935496022, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-39.71416974486287898571, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.21113509394885504600, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-19.79432812800784091678, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-58.08554852109006816363, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_39" Id="{e83eeeda-2b9f-4161-acea-d8df35bcdc43}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_39
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -21.93974605417949419461, -18.49856402298217972202, -96.65992156980888694306 ],
    CurrentVelocity := [ 560.92968123589912465832, -454.79210991651348194864, -556.36905002756998328550 ],
    CurrentAcceleration := [ 6747.73447463338743546046, 9628.82123479624351602979, 5462.73061834566397010349 ],
    TargetPosition := [ -36.27372063241573840742, 69.45477693939508867516, -56.03831440156044152445 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ 228.31394350642813151353, -518.68886336123591718206, -694.01647177787629061640 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_39');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.17804896497402217248, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.05596801189631349371, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-1.82711489240683677693, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.17804896497402203370, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-36.27372063241574551284, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.17804896497402217248, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(69.45477693939508867516, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.01296397345650469532, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-23.29484015015810172144, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.17804896497402220024, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-56.03831440156044152445, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.04613976266622405592, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-106.33609120894020350079, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_42" Id="{50384466-d3d3-4855-9ae2-90b2a541f15f}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_42
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 1.58314797372935345265, 90.58707779544036498010, 7.41484167737418431443 ],
    CurrentVelocity := [ 264.66369378964441239077, -967.86838256043972705811, 875.55912471800957064261 ],
    CurrentAcceleration := [ -5955.60883189429478079546, -8419.85921682317348313518, 8392.40723541911211214028 ],
    TargetPosition := [ -58.56616862494692554719, 73.15314018228875170280, 71.09694589628986705065 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ -714.77249466642297193175, -738.86959085233320365660, -949.40990195438507726067 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_42');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.16824213942746521488, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.01755548896013213109, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(4.59030121571332649921, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.16645520819079967501, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-58.56654901772477472832, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(90.58707779544036498010, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.09014117386002259980, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(45.07056608531748764790, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.13468422806677898818, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(73.02284673044322005353, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(7.41484167737418431443, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_43" Id="{9f4afb81-5dec-45e2-b726-8c31dd42c704}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_43
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 53.13739682938987130001, -22.44298053732963182938, -41.20042774153274223181 ],
    CurrentVelocity := [ -304.98663512538098530058, 35.02037430652057992120, 738.80078152761325327447 ],
    CurrentAcceleration := [ -7270.26712820171451312490, -845.41004591047749272548, -4566.56327336276262940373 ],
    TargetPosition := [ 81.86956314333414752582, 96.25424125499196748024, -65.78248687323761600965 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ -511.94239891635919548207, 447.91143210314089628810, -814.86235086373915237345 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_43');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.18070492746146707419, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.18070492746146707419, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(81.86956314333414752582, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.03408783391025214243, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(43.79836178330638318812, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.17958514888120891140, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(96.25433486131980487244, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-22.44298053732963182938, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.05355512909515708353, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-23.29997654589049815854, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.17866777158430743877, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-65.78305048691605350086, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_50" Id="{83986aec-d8d3-44b7-9035-1a2fe458a6b4}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_50
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 46.92101107231894729921, -0.50374158461752926996, 29.71857774981103261780 ],
    CurrentVelocity := [ -825.06102637463254723116, 756.18378067008961807005, -198.33013045881875768828 ],
    CurrentAcceleration := [ -4766.41159160333245381480, -5907.94068977043207269162, -2476.07236462418222799897 ],
    TargetPosition := [ 23.42250735434379294020, 12.51307920714354793290, 2.55459165158602274914 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ -489.78938572767407322317, 603.07786572774739397573, -878.19166450623129094311 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_50');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.12125503368046111619, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(46.92101107231894729921, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.06087090854331475565, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(14.37204891391303718251, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.04585205920535920243, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(18.22432050158307603738, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-0.50374158461752926996, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(29.71857774981103261780, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.11905955451919558730, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(2.55388615210469760441, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_57" Id="{ebd797d2-0238-4938-8213-925fec703cb4}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_57
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -41.78580401739355920654, -54.54341916085618890975, 0.34259842487062996952 ],
    CurrentVelocity := [ 281.70354130105670265038, 551.00897497765049592999, 302.83881748014778167999 ],
    CurrentAcceleration := [ 5924.00492373221095476765, 2065.11081253397605905775, 2773.66158712433571054135 ],
    TargetPosition := [ -35.55043245579965116576, 76.85926955676279703766, -20.12684108733012067205 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ -145.73534974155302279542, -148.36578074146780181763, 565.35337574115942516073 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_57');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.16010935183593069664, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.04108196819819977946, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-33.77372971830767056645, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-41.78580401739355920654, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.16010935183593069664, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(76.85926955676279703766, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-54.54341916085618890975, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.03210937502877184851, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(7.08882541134368349134, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.16010935183593069664, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-20.12684108733012067205, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_58" Id="{8c3b9170-2f82-40b2-a80f-6e21d7c72dfc}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_58
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -28.70185237428661650938, 6.46028600561162136273, 54.49537445608956431897 ],
    CurrentVelocity := [ 444.87185624636094871676, -148.96081495142607309390, -685.59201773629638410057 ],
    CurrentAcceleration := [ -4477.69170784135803842219, -9206.17944268960127374157, -6069.22291510937066050246 ],
    TargetPosition := [ 50.86344209922719983297, 61.53905874524528485381, 55.13748367012033213541 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ -17.25731180548393695062, -728.00753736594913334557, 553.61574831729717516282 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_58');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.15873464033901657499, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.15873464033901651948, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(50.86344209922719983297, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-28.70185237428661650938, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.15873464033901657499, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(61.53905874524528485381, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.03397614115949037367, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(1.31497479490398649915, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.15735060096822323095, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(55.13766041794363559347, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.06232337970714629805, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(28.75071222396190862014, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_63" Id="{7118233b-6700-4746-a588-47b64f552e26}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_63
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 92.10487433807648471884, 89.01461536061293600142, 43.32328991111594973518 ],
    CurrentVelocity := [ 582.24588381700414174702, -343.03367241945181831397, -453.35877163487862162583 ],
    CurrentAcceleration := [ -2628.64665337560109037440, 4464.34448190908915421460, 7008.64234603228396736085 ],
    TargetPosition := [ 92.91310177759680755116, 56.54940187438580778689, 5.30614662549113802470 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ -858.57813559612441167701, 114.62677054353116545826, 120.82597031040290858073 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_63');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.10861795461857774725, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.04225334172441400082, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(105.45722688838274905265, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(92.10487433807648471884, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(89.01461536061293600142, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.10861795461857774725, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(56.54940187438580778689, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(43.32328991111594973518, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.10861795461857774725, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(5.30614662549113802470, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_67" Id="{f0f13fcd-666a-41d3-a599-05259ea711bc}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_67
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -42.41545653101405832786, 92.92848487406354252016, 41.60376869401292765360 ],
    CurrentVelocity := [ 756.94781044141586789920, -102.29313054332476440322, -952.59491319783569451829 ],
    CurrentAcceleration := [ 2149.81876213580835610628, -9752.12830985097207303625, 1681.46952735132435918786 ],
    TargetPosition := [ 19.96620347711099441312, -33.22271553063156090957, 81.79650434185842300394 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ 338.30216212834284306155, -769.08223829335486243508, 288.55916186152558111644 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_67');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.19427872815214472513, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.19343297274682375031, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(19.96624380849144131389, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-42.41545653101405832786, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(92.92848487406354252016, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.19235602255641195968, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-33.22318938742549221388, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.19355733024749061100, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(81.79652937027475445575, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.02289816309081084411, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(21.83272724782310802993, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetAcceleration_8" Id="{3b045538-5e0c-4eba-ae88-0fe0e39c02f8}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_8
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -54.35725663889332537337, 73.34627152842679720379, 57.47066223304133814054 ],
    CurrentVelocity := [ 426.08308424218762411328, -345.66305862380568214576, -413.32694487152843976219 ],
    CurrentAcceleration := [ 9524.80086717570156906731, -252.65998868675160338171, -5446.63816621923797356430 ],
    TargetPosition := [ -57.26228589377893030132, 52.07811887222882774040, 59.76312002760343489172 ],
    TargetVelocity := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ],
    TargetAcceleration := [ -95.16447047882263632346, 304.06742831107862912177, 432.83693000105654391518 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_8');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.12951882982101459163, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.05777951162272600139, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-38.34599302369426965242, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.12928091864481283668, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-57.26228679152448819423, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(73.34627152842679720379, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.12951882982101459163, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(52.07811887222882774040, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.12843673749601175471, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(59.76320449744723362073, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.04091440731530187475, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(45.03211787982157687793, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_14" Id="{df9c4481-6c05-4858-9785-c91265efb52b}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_14
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -11.76337652905456820918, 33.14803985732422120236, 86.65785487127322994638 ],
    CurrentVelocity := [ 271.37440980320343442145, -405.04035428607960511727, -583.37082347654734348907 ],
    CurrentAcceleration := [ 1571.32061037071616738103, 6539.21833642809360753745, -6969.97966259226996044163 ],
    TargetPosition := [ 39.42489592371239837121, -50.65299900321387127633, -42.47174531332036195863 ],
    TargetVelocity := [ 952.72298352870916460233, 549.10216965310678460810, -199.96235985481098396122 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_14');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.18100561066533815691, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.18100561066533815691, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(39.42489592371239837121, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-11.76337652905456820918, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(33.14803985732422120236, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.15600561066533816246, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-62.29721991120820234755, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(86.65785487127322994638, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.18100561066533815691, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-42.47174531332036195863, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_15" Id="{2cecfef8-d2e2-495e-bebb-bc5a74fc5143}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_15
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -23.07515641447260179575, 60.68392399418829086244, -39.17377356735885030048 ],
    CurrentVelocity := [ 541.45099216081393933564, -955.24690185624820060184, -765.04814896218658759608 ],
    CurrentAcceleration := [ -9271.11300057422886311542, 4376.93095597828869358636, -2587.84193708146085555200 ],
    TargetPosition := [ -27.59745181479642894828, 97.62295145618037395252, -4.50546434605880108393 ],
    TargetVelocity := [ -636.72291881275850755628, 616.09073381933080781891, -82.52656519014260538825 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_15');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.18561602058648316027, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.13645534129957551106, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-9.75706058924097519025, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.18561602058648316027, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-27.59745181479642894828, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.18561602058648316027, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(97.62295145618037395252, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.07177100934221260220, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(33.68002966797480723926, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.17125230195322679871, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-3.71520543795192104142, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.02823480242135182477, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-58.80508937654931855832, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_17" Id="{fddf6355-7ab1-4f8f-94fa-f02648228ffd}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_17
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 29.09201686409977583025, 26.79555889099025023370, -2.56405583533239678218 ],
    CurrentVelocity := [ -865.74515531652343725000, -446.66804096341445529106, 715.70430296883705523214 ],
    CurrentAcceleration := [ -419.53152796798531198874, 3725.90159379652868665289, 3083.71115629947962588631 ],
    TargetPosition := [ -5.98395477362167582669, 85.98880639059657937651, -77.56683653164213865239 ],
    TargetVelocity := [ -487.77111778150026566436, 597.93719815311010279402, -19.66112295679818089411 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_17');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.20727577661691312660, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(29.09201686409977583025, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.20727577661691309885, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-5.98395477362167582669, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.20727577661691312660, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(85.98880639059657937651, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.03742622748756373185, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(19.01299187494276665689, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.02885463894537435015, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(16.16785534073141050726, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.20727577661691312660, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-77.56683653164213865239, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_19" Id="{12ac8376-83bf-4d7c-a523-0488d72cc5f9}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_19
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 80.71252725401120642346, 44.88025621959243949277, -12.15149697459605704353 ],
    CurrentVelocity := [ -948.15980924147334008012, -489.88340864146471176355, -827.37383618723242761916 ],
    CurrentAcceleration := [ -3514.54219608491530379979, -6906.59296787188577582128, 1315.32694212922615406569 ],
    TargetPosition := [ 59.95790772621657538366, -72.33902659712904892331, -15.83444921441858355138 ],
    TargetVelocity := [ -459.58488479420384464902, 187.24245841899073639070, 921.25657886294084164547 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_19');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.18063360611716061666, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(80.71252725401120642346, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.07992076514931607811, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(44.57478735687137572086, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(44.88025621959243949277, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.15899784530207772271, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-75.03978196031663117083, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-12.15149697459605704353, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.12139203206320470230, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-48.06891878044748267484, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_20" Id="{39cf6ad3-ef5c-48de-9c5b-1a87835b971f}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_20
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 83.23209059023531608545, -91.01412900146218021291, -45.02313424428616883688 ],
    CurrentVelocity := [ 478.85135262944709211297, 941.48041828651457763044, 233.77464784894095828349 ],
    CurrentAcceleration := [ 4901.95944988452902180143, -711.94018044516997179016, -6268.14311607610761711840 ],
    TargetPosition := [ -60.31306848800090847362, -76.05388552166272120303, -77.88363097381802901964 ],
    TargetVelocity := [ -28.42585943091080480372, 112.61218905881105456501, -518.94659889602689872845 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_20');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.23417815197351798950, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.03112744931235566018, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(96.49098387500299622843, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.23417815197351798950, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-60.31306848800090847362, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.05967434054652072384, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-58.39013538569540884282, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-91.01412900146218021291, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.01824400060866057660, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-42.59202121085846926007, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.23417815197351793399, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-77.88363097381802901964, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_21" Id="{e41ac4cf-8c86-4d4a-9d1f-d9e5dba955a9}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_21
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -90.18105588355366819542, 11.40426253106177512109, -96.96426550769332664004 ],
    CurrentVelocity := [ 268.68366267133455949079, -230.39092451139003969729, 217.37624370386924965715 ],
    CurrentAcceleration := [ 6950.36478944877671892755, -1973.79956680386658263160, 9973.29839097329022479244 ],
    TargetPosition := [ 56.23264204687242795444, 89.78670651839811966965, 35.61941562712866016227 ],
    TargetVelocity := [ -748.79294734560005508683, 279.58550802373474652995, 329.97469268802092301485 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_21');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.22811513995984869507, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.20311513995984870062, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(72.86913239717907231352, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-90.18105588355366819542, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.22811513995984869507, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(89.78670651839811966965, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.02659326510902134191, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(7.08705215721043568777, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.22811513995984869507, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(35.61941562712866016227, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-96.96426550769332664004, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_22" Id="{0921bf0c-1724-4feb-b2ce-f8a6875619ac}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_22
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -67.41063214653675572663, -34.84504669460216064181, 71.90844709145784463544 ],
    CurrentVelocity := [ -627.45307756820307076850, -697.56722522760969695810, -660.83791164052786371030 ],
    CurrentAcceleration := [ -7277.38846981411006709095, -2750.24172428648398636142, -978.85332476885741925798 ],
    TargetPosition := [ -57.66574268409263481772, -88.27667420321476754452, 96.97655926730644182499 ],
    TargetVelocity := [ -610.75498065854083051818, -654.20857948874163412256, 336.03100506981877515500 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_22');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.20245104517991782678, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.17745104517991783233, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-44.48020150096243696680, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.03409673558726764031, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-87.74964255933160472978, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-34.84504669460216064181, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.20245104517991779902, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-88.27667420321476754452, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.20245104517991782678, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(96.97655926730644182499, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.04944613992821229875, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(52.48505260032155916861, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_27" Id="{5df7da38-6b62-4d63-9965-5d59c1422b2d}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_27
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -29.47354331486815226526, 27.93495185982479256381, 25.04726746624395161689 ],
    CurrentVelocity := [ -230.41514646826715306815, -990.61050993041703804920, -730.89168845843755661917 ],
    CurrentAcceleration := [ 8742.55847153794820769690, 5915.09847409233043435961, 4511.30118221045631798916 ],
    TargetPosition := [ -46.00476070479609091990, -93.63874889974350423927, -84.98442462304464584122 ],
    TargetVelocity := [ 6.00636834947817987995, -353.84810777792165481515, -981.55918901141831156565 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_27');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.12586715797260131233, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-29.47354331486815226526, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.12199211979553833962, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-46.02027730923590809198, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(27.93495185982479256381, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.12586715797260131233, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-93.63874889974350423927, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(25.04726746624395161689, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.12586715797260131233, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-84.98442462304464584122, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_3" Id="{156e9032-b854-4120-85a4-c009510a36d1}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_3
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 26.53957997779905042535, -93.07095602825359037524, -22.16503543192527558858 ],
    CurrentVelocity := [ -978.47395774087203790259, 118.42434690487039006257, -240.97450183146906965703 ],
    CurrentAcceleration := [ 6077.24253675401814689394, 6138.16243012785889732186, -287.73427625073964009061 ],
    TargetPosition := [ -74.88074053142992170251, -34.02780494232007413302, 79.44667149152985530236 ],
    TargetVelocity := [ 90.05732775263027178880, 511.77846374302612275642, 384.28752753365688477061 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_3');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.16528629612631601242, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(26.53957997779905042535, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.15028151957411181594, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-75.78160058464112580623, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.16528629612631601242, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-34.02780494232007413302, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-93.07095602825359037524, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.16528629612631601242, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(79.44667149152985530236, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.02490687981607753870, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-26.19606685654071753788, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_34" Id="{6e6b4c5e-4c0b-4ee4-bf64-d2e11c192029}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_34
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 52.72619781679460970736, -25.78201897219773286452, 80.53760009793651875043 ],
    CurrentVelocity := [ -120.69783207836667315860, 178.50171370384009605914, -265.96277737557261389156 ],
    CurrentAcceleration := [ 9869.62339068779328954406, 8236.73224664633380598389, 4587.35631399299018085003 ],
    TargetPosition := [ -7.31302355801524583967, 98.53124939615054245223, -70.22704739896117587250 ],
    TargetVelocity := [ 648.92680228108224582684, 640.55767309494626715605, -28.66025813343185291160 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_34');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.19340758597333415625, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(52.72619781679460970736, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.16840758597333416180, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-21.45286028170894354616, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.19340758597333415625, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(98.53124939615054245223, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-25.78201897219773286452, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(80.53760009793651875043, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.19340758597333415625, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-70.22704739896117587250, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_35" Id="{d63d6fa5-15d2-4e6c-a421-4881ea92e8f9}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_35
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -34.17551015513085133080, -36.11913195800440234962, 51.20006403327516864010 ],
    CurrentVelocity := [ -436.11356880285654824547, -175.40667275745920505869, 746.11367552095180144534 ],
    CurrentAcceleration := [ -9866.78282408208724518772, -2137.40956356850620068144, 2870.77810427219810662791 ],
    TargetPosition := [ 94.89098874895094581916, -43.87608688101931875281, 99.33475834942979076914 ],
    TargetVelocity := [ 945.80038372223793885496, -169.18944510068342879094, 349.24092684862353053177 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_35');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.19433376507479860340, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.19433376507479860340, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(94.89098874895094581916, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.03733347853010261091, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-50.39525451816182055609, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-36.11913195800440234962, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.19433376507479860340, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-43.87608688101931875281, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.19433376507479860340, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(99.33475834942979076914, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(51.20006403327516864010, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_36" Id="{a29cd5cf-ffe9-4f03-a489-be3bc1df9990}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_36
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 64.35804589046725254775, -17.92542582379405757820, 1.48297994216896711350 ],
    CurrentVelocity := [ 464.92943892208950273925, -779.25597761349285974575, 998.42982599227457285451 ],
    CurrentAcceleration := [ 4749.41918638301285682246, -6355.94416374630964128301, 521.38908747176901670173 ],
    TargetPosition := [ 90.33897695077399703223, -51.53109090258827507114, -18.12118447758692241223 ],
    TargetVelocity := [ 651.93427968717173826008, 22.75188801650608638738, 576.72189974234174769663 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_36');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.22796271730102146691, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.22796271730102146691, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(90.33897695077399703223, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(64.35804589046725254775, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-17.92542582379405757820, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.21997970156554483290, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-51.64657663770686468752, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.09985417258924977890, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(25.50333501341721742506, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.20296271730102147246, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-30.45589863781214745586, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_4" Id="{26e930ca-eaec-46e3-a2b8-44e478f3b43a}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_4
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 39.65544040447574047903, -16.66018211442579399773, -58.50720512248746274508 ],
    CurrentVelocity := [ 152.61039713388095151458, -842.85004717237586646661, -233.59739104574180146301 ],
    CurrentAcceleration := [ -6325.89065787396975792944, -1505.68574067445842956658, -3102.88067432900697895093 ],
    TargetPosition := [ -66.91581266696782392955, -93.61689817230509902402, 29.78308499537988041084 ],
    TargetVelocity := [ 439.82482428242337846314, -284.79407434788117825519, -482.50326392108468098741 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_4');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.21237444505671645989, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.01316518724815633583, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(40.81213387351741772591, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.18737444505671646544, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-75.82809994069509684778, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-16.66018211442579399773, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.21237444505671648765, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-93.61689817230509902402, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.18737444505671646544, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(39.76233326007365320720, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.02835383367352977552, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-63.33854775889894028751, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_44" Id="{56c96b0b-fe80-4943-91c9-1fdcb81a6624}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_44
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 33.20927605983496277986, 90.97207853642058239529, -55.08094735406923092569 ],
    CurrentVelocity := [ -992.30424733188726804656, -901.32445813848187299300, 586.66877088523051497759 ],
    CurrentAcceleration := [ -2055.28947681546742387582, -6947.94625488244855660014, 5257.19066749439298291691 ],
    TargetPosition := [ 67.40661968603291143154, 85.00720295179675645159, 88.22002633481628208756 ],
    TargetVelocity := [ -402.53524157043091236119, -775.84245093694903516734, -256.32808117758236221562 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_44');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.23151950260302325835, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.20651950260302323614, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(75.38666739196018795610, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.10082888716067818502, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(6.96062616300369274569, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.20651950260302326390, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(102.31993089188715373439, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.09899354847148797432, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(59.91000069944395534094, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.20651950260302326390, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(92.54489503092254665262, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-55.08094735406923092569, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_45" Id="{ac33e000-d88d-4dfc-8992-a3f1cde5b407}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_45
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 94.90826698124541849211, 98.68601680143464704997, -94.06931326171563512162 ],
    CurrentVelocity := [ -430.89473663668559311191, -312.79662986488631304383, -992.83444762482452006225 ],
    CurrentAcceleration := [ -5676.65368720607239083620, -3762.56637347724063147325, 6550.62068049420850002207 ],
    TargetPosition := [ -39.76061431821072034154, -54.28480859989317508507, 99.44666750072161676144 ],
    TargetVelocity := [ -859.34940974039534467011, 795.33260348280805374088, -780.22698676244044690975 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_45');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.33133845625565350179, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(94.90826698124541849211, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.33133845625565355730, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-39.76061431821072034154, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(98.68601680143464704997, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.25596921475835221482, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-74.18217506467304644957, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.30633845625565347959, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(116.86900883644932491734, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.01681172414938223933, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-109.20131569941064242357, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_54" Id="{dfe940ba-a224-4684-aa6d-862aaca9f029}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_54
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 97.11911830820099567063, -34.96974423375549179127, -12.00449667266771314189 ],
    CurrentVelocity := [ 732.45673588056706648786, -364.10592093846560146631, 417.20885103824889483803 ],
    CurrentAcceleration := [ -7499.05473487195013149176, -3391.82282403053886810085, -1045.80444633833030820824 ],
    TargetPosition := [ -34.58240005713176401514, -14.14677543732022968470, -36.27520430827089370496 ],
    TargetVelocity := [ -912.82558763807946888846, 208.36586640296604855394, -568.50539307151495904691 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_54');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.18808008069304424370, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.01562618158141006186, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(107.14032815468360126943, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.18808008069304424370, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-34.58240005713176401514, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.18808008069304424370, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-14.14677543732022968470, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.03540881837579783198, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-44.10216499913330778782, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.03261360243271873433, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-3.46659095127397254288, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.18808008069304424370, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-36.27520430827089370496, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_55" Id="{0fbece0f-b41b-4f95-82e9-544a7b7e2adb}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_55
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 93.14320777040134657909, -89.74312540741888710727, -99.44513086937998025405 ],
    CurrentVelocity := [ 358.10280009786106347747, 608.03888639331830745505, 352.36242097628496594552 ],
    CurrentAcceleration := [ 2330.07739343047796864994, 9276.80286875897945719771, 5318.79396039618404756766 ],
    TargetPosition := [ 90.69471017690091230179, -41.60077247517397580623, 88.58596356723177223103 ],
    TargetVelocity := [ -791.02326773343907007074, -519.34342102358630199888, -658.93165900614667407353 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_55');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.24005299536906613000, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.18612405983992955094, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(115.79065190073221458533, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.24005299536906613000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(90.69471017690091230179, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.20158118915996722786, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-28.88685866039741512168, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-89.74312540741888710727, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.21505299536906613556, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(102.97592170905214459253, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-99.44513086937998025405, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_69" Id="{406457be-60fd-4e49-b447-3b03452fbb61}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_69
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 57.27064181935406850243, 60.77262566521827125143, 62.27255646349433959585 ],
    CurrentVelocity := [ 537.97467176664963517396, -420.66138587481805188872, -215.06636530667026363517 ],
    CurrentAcceleration := [ -1444.96134368556158733554, -9785.35194497229167609476, -7380.59859225371474167332 ],
    TargetPosition := [ -63.84344825014372304395, -56.97669545923665168630, -22.85605311820776819332 ],
    TargetVelocity := [ -201.51935759086109101190, 630.98179272467473310826, 276.24214614430115943833 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_69');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.20486873141224784534, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.02319379832039304701, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(67.69603683932946580626, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.20486873141224784534, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-63.84344825014372304395, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(60.77262566521827125143, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.17986873141224785089, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-70.66790694402018857545, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(62.27255646349433959585, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.17986873141224782313, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-27.67877343848196147746, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_9" Id="{bd04899e-e39d-49c0-b3f2-1ff83c02e385}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_9
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 51.69848597185645644458, 7.44342383280722685868, 34.92442688172334896990 ],
    CurrentVelocity := [ -421.44916669967597044888, -275.10229321522490408825, 914.94627896365750530094 ],
    CurrentAcceleration := [ 8837.53563716822463902645, -8661.28092822574944875669, -64.93681698721775319427 ],
    TargetPosition := [ 85.87288052559532047781, -50.28620894086743930984, -15.14712281129145310388 ],
    TargetVelocity := [ 635.15347000890233175596, 546.48145876800276710128, 277.88896365954042266821 ],
    TargetAcceleration := [ 0.00000000000000000000, 0.00000000000000000000, 0.00000000000000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_9');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.21938772367288389420, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.21938772367288389420, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(85.87288052559532047781, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.02559956417752039248, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(45.80781253564739330386, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(7.44342383280722685868, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.17034751041817919326, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-63.21307103826610074293, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.02491882897876597849, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(55.64054914337343404895, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.19438772367288389975, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-20.01101356944660381032, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_10" Id="{1de954f0-0a2b-47c4-922d-2b812dcb585b}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_10
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -39.47806403569489219763, 85.51350241283674336046, 44.68502449548182653416 ],
    CurrentVelocity := [ 850.44438005471602082253, -488.80559496892584547822, -700.94733690949385618296 ],
    CurrentAcceleration := [ -1858.32224098730875994079, -3187.99589590553750895197, 92.02409562680077215191 ],
    TargetPosition := [ 62.43779038863485197908, 75.32481099920960332383, 88.50314116872792169488 ],
    TargetVelocity := [ 123.28060327403977680660, 99.93105645665400516009, -988.17694465354713884153 ],
    TargetAcceleration := [ 523.22114524957532921690, -244.33148184356286947150, -78.54730785107437895931 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_10');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.25386401433668925876, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.25386401433668925876, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(62.43779038863485197908, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-39.47806403569489219763, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(85.51350241283674336046, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.04836149122526862271, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(71.36198278424123486730, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.22896219847150309223, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(111.02730430222078439328, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.02488496988046649816, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(29.32517254863061850756, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_11" Id="{13931c03-21c3-445e-8415-7b7006270f3c}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_11
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -11.00969981377717488158, 79.30083386555023139408, -79.33289322247576080827 ],
    CurrentVelocity := [ 340.34781182329970761202, 246.68864182540505680663, -994.15213442746357941360 ],
    CurrentAcceleration := [ 8700.39687173053971491754, -5148.82815689879680576269, 8397.80808154643818852492 ],
    TargetPosition := [ 10.69516269239538530655, -19.77457066315008660240, -45.65505563877125894123 ],
    TargetVelocity := [ -427.08539049490741490445, -334.25491167273139581084, -671.08698082447017441154 ],
    TargetAcceleration := [ 932.74239593593802055693, -718.28804857432260178030, 358.92850741837651185051 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_11');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.23152173952640786592, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.19546951360492895167, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(20.62712040740557739582, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-11.00969981377717488158, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.01856396480387650233, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(82.14015275808480964770, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.23152173952640786592, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-19.77457066315008660240, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.20607307889213488661, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-30.65808709370843132547, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.01450273989806695300, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-92.46095600628422062073, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_13" Id="{f57cc478-3ee7-4ec1-b0c5-b72080353083}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_13
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 9.69881262256657805665, 49.09528145802553922294, 90.83813935322746146994 ],
    CurrentVelocity := [ -433.54343331398354166595, 472.80041396309707124601, 363.83131582274700122070 ],
    CurrentAcceleration := [ 4083.49957317767075437587, 8321.57042699825615272857, 3041.72021404646875453182 ],
    TargetPosition := [ -40.75433231777056874989, 5.53885291167379989474, 72.17019091605928338140 ],
    TargetVelocity := [ 43.64296519726190126676, -988.37442788621763156698, 453.07334546629840588139 ],
    TargetAcceleration := [ 36.30955223704063428158, 458.49955170826592620870, 185.69577899128807985107 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_13');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.16126678162936489147, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(9.69881262256657805665, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.15086662057218858113, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-41.05627366867881988810, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.06070813242930364617, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(65.46161526012338072178, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.16126678162936489147, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(5.53885291167379989474, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.02880215026755808538, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(99.39315110411790499256, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.13649890135310399630, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(63.03132241192619744652, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_23" Id="{3d231d1e-c57a-4510-b4e7-6f33a49c2702}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_23
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 47.53700980033448786344, -67.27694012280542779081, -86.38486619516218922854 ],
    CurrentVelocity := [ 624.06318776028729189420, -26.67222535829409935104, 867.31073468942531690118 ],
    CurrentAcceleration := [ 8661.05253784820160944946, 1127.19399458656334900297, -862.51135134606010979041 ],
    TargetPosition := [ -44.06957139861784611412, -0.35301738432740137341, 34.14509493445279986190 ],
    TargetVelocity := [ -953.23022651827614026843, -141.30450499696496535762, 399.93502902002660448488 ],
    TargetAcceleration := [ -153.89029587917991648283, 786.51386102503238362260, -59.28726062308271593793 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_23');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.18439257781618231813, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.03582631567231025355, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(69.32203709773510524883, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.18439257781618231813, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-44.06957139861784611412, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.16458849419234267142, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(1.56399878718463591909, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.00687749187842422172, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-67.39034610548161197130, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.18439257781618231813, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(34.14509493445279986190, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-86.38486619516218922854, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_24" Id="{c2c01e64-dc44-49a9-bee8-b55016f0f163}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_24
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 55.38049842099269426399, -36.51718980157055227664, 46.34633267231370723493 ],
    CurrentVelocity := [ -275.90586981683884459926, 325.28418297116309076955, -569.40991459537576702132 ],
    CurrentAcceleration := [ -4904.07330886993440799415, 6037.59143415146354527678, 285.12822918885831313673 ],
    TargetPosition := [ 35.43064875422174964115, 95.51797326506493845955, 58.54459913513463220625 ],
    TargetVelocity := [ 257.68447580225415549648, 639.68339605466303510184, -872.58228531132567695749 ],
    TargetAcceleration := [ -374.50768793212057516939, 123.04281317134154960513, 26.25305058742901564983 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_24');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.20661176225146463126, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(55.38049842099269426399, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.18000578842985828776, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(30.93057238685970133929, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.20661176225146460350, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(95.51797326506493845955, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-36.51718980157055227664, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.12053321807179237513, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(79.04467479917035177550, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.02464358971351392896, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(34.39610348174581133662, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_25" Id="{c7e311d2-5dfb-4e51-a566-218e5a52fa90}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_25
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -43.61348212315061800837, 29.83034818219718431465, 49.28274589774380842755 ],
    CurrentVelocity := [ 445.78248483783545452752, -365.97477149155758979759, 834.21346728548428473005 ],
    CurrentAcceleration := [ 8151.27766250318381935358, 4550.14049799841450294480, -5778.56226010059071995784 ],
    TargetPosition := [ -60.34727868985516607836, -0.54575471898803584736, -65.76232312596496853985 ],
    TargetVelocity := [ 256.22760642234447914234, -829.37836652808050530439, -911.71719060686370994517 ],
    TargetAcceleration := [ 190.44282430417842988390, 16.22894859941652612179, -320.27777449957079625165 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_25');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.18857033031718306582, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.05441964492405890197, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-27.82441980071925158313, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.16380838384756329917, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-64.60920272819178933332, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(29.83034818219718431465, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.18857033031718306582, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-0.54575471898803584736, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.01777679717487426134, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(62.45030459150993351614, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.18857033031718306582, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-65.76232312596496853985, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_28" Id="{8e96e48c-6489-4b32-8734-dd18b59c5214}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_28
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -25.75950331902309642373, 25.28257521119543582699, 29.01217051002615221478 ],
    CurrentVelocity := [ -258.16394237742667883140, 916.64967525581641893950, -53.97433058993919985369 ],
    CurrentAcceleration := [ -9538.00892060086152923759, 3140.62431203669075330254, 714.16116385760506091174 ],
    TargetPosition := [ -99.15720752840965701580, -11.85176568807662533800, -0.99133804973871519906 ],
    TargetVelocity := [ -12.33203202805157161492, -43.09141691856916622783, 791.12283404668596631382 ],
    TargetAcceleration := [ -865.12500750031517782190, 291.33729215361222486536, -357.67243570276048103551 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_28');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.19601934217339064825, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-25.75950331902309642373, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.19601934217339067601, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-99.15720752840965701580, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.02892578039004586529, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(49.88430076962359294157, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.19601934217339064825, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-11.85176568807662533800, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(29.01217051002615221478, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.13019418227345949668, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-24.59064078002127473610, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_31" Id="{6ea2f4dd-29ae-4d36-8696-0b13eb748d83}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_31
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -54.94342725690739825950, -71.16344937395382430623, -99.92141940871530891854 ],
    CurrentVelocity := [ 203.04708462957614756306, -87.88615914847480325989, -244.40742200449426491105 ],
    CurrentAcceleration := [ -9414.24830241836389177479, 3433.58972946014000626747, -1048.10905719350193976425 ],
    TargetPosition := [ -30.34627507739200780179, 41.33313071646210801191, 94.47974487226861128875 ],
    TargetVelocity := [ -104.33706621689987059654, -659.36109838358197521302, 811.33117925934993763804 ],
    TargetAcceleration := [ 523.43053514200096287823, 100.75104632855459385610, 320.80199262854853259341 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_31');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.22338925049474450679, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.20657109030979783904, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-29.15176131633907630203, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-54.94342725690739825950, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.19826331168683380968, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(55.81702313192161568622, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.01113968648909354625, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-71.74511835894615785492, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.22338925049474447904, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(94.47974487226861128875, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.02606362117094545780, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-104.28684661857214166503, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_38" Id="{ecebe997-7b6c-416e-84b7-df34f73be55b}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_38
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 70.18836201933098095651, -77.67370458831963730972, -11.76145133517785268396 ],
    CurrentVelocity := [ -105.04558581308560860634, 265.56449346599174532457, 964.37814674831179218017 ],
    CurrentAcceleration := [ -6039.95733145092708582524, -2777.20507650207400729414, 4352.81085492715828877408 ],
    TargetPosition := [ 71.40233970199534496714, 5.40303445887771260914, 92.98580498819549688960 ],
    TargetVelocity := [ -236.50355991826609169948, -66.98837676043160627160, 870.41763001953563616553 ],
    TargetAcceleration := [ -500.07275325607560034769, 72.93763981243137095589, -942.49209154303241575690 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_38');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.14901888909886754075, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.12406814159805865105, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(75.12313380408009777511, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.02561480747291104351, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(67.75537848504214366585, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.13598633944686283614, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(5.98711873384755755012, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-77.67370458831963730972, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.14901888909886754075, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(92.98580498819549688960, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-11.76145133517785268396, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_41" Id="{21990934-9f5e-4c0c-955d-b5c7e30c5513}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_41
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 77.70133891525995295524, 7.01592092562633240505, 41.88398938907070601090 ],
    CurrentVelocity := [ -954.47536643469038608600, -572.16261829852851406031, 473.16402135503631143365 ],
    CurrentAcceleration := [ -2847.17654342300011194311, -1889.61698757276462856680, -3110.21768918452016805531 ],
    TargetPosition := [ 92.37579717709354554245, -14.04614057772144519731, -73.88361356505039623244 ],
    TargetVelocity := [ 519.95772801058456025203, 127.89327712966064609645, -380.91422286825297760515 ],
    TargetAcceleration := [ -890.64075852453197512659, 681.51569675393488978443, 390.99828361762297390669 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_41');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.18543052523247699481, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.18543052523247699481, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(92.37579717709354554245, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.07568410654937982041, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(41.15768150995504015555, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(7.01592092562633240505, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.16752625845292970497, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-15.47801998831725711625, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.02111222788851935261, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(49.92568034606993876423, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.18543052523247699481, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-73.88361356505039623244, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_46" Id="{e687be06-98c9-46be-a957-a0e3424f8f2b}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_46
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -81.70058267564624543411, -19.21897702137916041920, 94.53377990477645198553 ],
    CurrentVelocity := [ 791.96608977333426082623, 567.98007664216197554197, 949.19373974938935134560 ],
    CurrentAcceleration := [ -9852.41254141048739256803, -751.99368634466736693867, 3617.41551680202064744662 ],
    TargetPosition := [ 4.61526430014728816786, 47.19472748930556349478, -27.25527375543330776964 ],
    TargetVelocity := [ -365.39593288733976805815, -832.73312185042618693842, 15.48785727174674775597 ],
    TargetAcceleration := [ 393.54024330782590368472, -760.25458815149545444001, 23.06111995903222577908 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_46');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.25941536116832880632, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.23392343586419403478, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(11.84902844379517183881, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-81.70058267564624543411, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.19491405447314413824, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(72.37093782213797510394, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-19.21897702137916041920, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.02952176939600252917, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(120.70144362619019773319, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.25322160979530433655, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-27.31907826634350300310, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_47" Id="{4ab42851-4a77-4ce0-bb00-2db1043bcf55}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_47
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 81.61368863479273727535, 18.81647567172932156154, -89.15971183512543518646 ],
    CurrentVelocity := [ 614.05723536338791745948, 343.05287387529847364931, -371.00163086153361291508 ],
    CurrentAcceleration := [ 2762.36060607538092881441, -8252.84383845068077789620, 1522.48694311787949118298 ],
    TargetPosition := [ 31.53792392446635517445, -13.15393306556988761713, -67.81554985684867631335 ],
    TargetVelocity := [ 927.36256285251761255495, -453.39442766394324735302, -734.53754957298599492788 ],
    TargetAcceleration := [ -810.42747656261008160072, 683.82844872197824770410, -296.63416710646515639382 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_47');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.25287606970423076591, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.02845295075759422462, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(97.13230269209392986340, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.22686303535852750390, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(9.48720344289291794837, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.02241468542399701822, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(23.03639977720293785524, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.25287606970423076591, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-13.15393306556988761713, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.20039624088411220337, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-46.06681198459425274905, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.03284040362274634473, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-95.92347928545005686374, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_48" Id="{0dfcaf5e-82ec-4b4f-834b-a4f2a0637f24}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_48
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -88.66208591478776668282, -31.58880789945652622919, 65.04291982806716987398 ],
    CurrentVelocity := [ 580.03497340359649570019, -746.36896556027750193607, 812.20588456619907447021 ],
    CurrentAcceleration := [ -6519.58462448879436124116, -9252.12079111587627266999, -5505.83185145304014440626 ],
    TargetPosition := [ -85.04127215306982634502, -92.28954144915404356198, -74.37698578032075147348 ],
    TargetVelocity := [ -365.82662455999411577068, -112.69189210154274860543, 154.77689249662125803297 ],
    TargetAcceleration := [ -682.87003825383567345852, -247.18670592987155032461, -122.60845320130738400621 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_48');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.25037129752792702808, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.04415928948418586242, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-76.79539758143890537667, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-88.66208591478776668282, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-31.58880789945652622919, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.25037129752792697257, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-92.28954144915404356198, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.01811771018568369973, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(78.06162686897538094399, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.23054659268189173216, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-76.43062116116439597135, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_51" Id="{4910e5a2-2dd1-4c8d-a2ef-8b89e8d667fe}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_51
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 52.80919631150752024951, -81.68038555889982887948, 42.06917442755320735159 ],
    CurrentVelocity := [ -848.38044536898496517097, -694.53443230755419790512, -67.27027959540748724976 ],
    CurrentAcceleration := [ -7839.42279939661148091545, 2086.65454098016925854608, -1769.91408787331420171540 ],
    TargetPosition := [ 18.36498902426966139956, 7.18108207234031681310, -24.86667965964299753523 ],
    TargetVelocity := [ -484.52530887106502177630, -330.54249305132475456048, 184.78707869201707580942 ],
    TargetAcceleration := [ 34.47472473095945133537, 524.15868234202798703336, 659.72269096659351816925 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_51');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.22814955969060143892, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(52.80919631150752024951, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.06738171645932469755, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(13.99608603958429142722, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.20249436133767390045, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(13.58224981559266097975, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.02239168182377478805, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-95.21214742443424938756, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(42.06917442755320735159, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.20746496504559683305, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-27.36779954300167716497, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_52" Id="{053c2965-a6b9-4e9b-ad46-340e7ff2135e}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_52
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 70.08966543358397416341, 67.02576750918015591196, -99.48168571307132879156 ],
    CurrentVelocity := [ 588.65830717227800050750, 212.74254643247036256071, -635.02694193343779716088 ],
    CurrentAcceleration := [ 7993.12948784593754680827, -9408.59304495099058840424, 3250.48874447509660967626 ],
    TargetPosition := [ -7.48002668182049035295, 62.76200784473195426472, -18.86381020756616067047 ],
    TargetVelocity := [ 765.89719739525412478542, -627.93810950196188969130, 726.47320111923500007833 ],
    TargetAcceleration := [ -860.50425738071407977259, 155.49469744486259514815, -721.38398094755166312098 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_52');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.26685118878827923661, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.03499141185980741975, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(89.86858068606741767326, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.24077555846655335214, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-25.37984720034276975298, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.21928974415401750186, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(80.25503967122440940329, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.26685118878827929212, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(62.76200784473195426472, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.26685118878827923661, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-18.86381020756616067047, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.04884648491617400029, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-113.98183572111209116429, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_56" Id="{6ece3637-3eaa-4618-b255-cacd99d912ee}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_56
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -75.10494070961726720270, -6.22395011546019816251, 35.64048680664691914899 ],
    CurrentVelocity := [ -825.41867748520257919154, -559.17669137031361970003, 331.05712850319173412572 ],
    CurrentAcceleration := [ -2748.49249899548522080295, -2734.78689775577458931366, 8828.96129221495357342064 ],
    TargetPosition := [ -88.93249178580995817356, 32.61549251092765189242, -4.33333209618611192582 ],
    TargetVelocity := [ -969.86803709259822880995, 219.52159207481986413768, 145.45315840784223837545 ],
    TargetAcceleration := [ 673.73439439858611876843, 589.54870253816602598818, 268.61037017006333371683 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_56');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.22533279528439006945, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.13546282954524005437, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-60.83093977470542768060, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.08546282954524006548, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-97.18448406099201974939, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.22533279528439004169, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(32.61549251092765189242, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.04813186201257521613, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-22.45997635018479243740, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.04893648758049205100, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(47.07359821757206930215, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.20659644161609555524, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-6.13445732070238047839, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_60" Id="{589d4460-1fb2-4240-a9c3-49da90ff47a6}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_60
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -82.30425131320278353542, 95.77277574475397159404, -0.37873053404373990816 ],
    CurrentVelocity := [ 209.81667767709768668283, 666.24835564548857291811, -156.12978395261052355636 ],
    CurrentAcceleration := [ 554.62083613543836690951, 1781.55274365866716834716, -2304.74829583103382901754 ],
    TargetPosition := [ 78.56604956044506593571, -99.70839917358892989796, -88.26279812419441839211 ],
    TargetVelocity := [ 182.35588906091311400814, 216.59536701599199659540, -100.01197301996137412061 ],
    TargetAcceleration := [ 165.30880475002527418837, -915.29760737648621216067, 984.89234990536533587147 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_60');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.28418047012119368455, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.28418047012119368455, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(78.56604956044506593571, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-82.30425131320278353542, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.02722694092957333306, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(111.88188475863630344520, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.25973833461914580534, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-103.32890392255741573990, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-0.37873053404373990816, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.28418047012119368455, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-88.26279812419441839211, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_61" Id="{5f1a6e08-4af6-469c-94d5-ec075bc8a4a8}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_61
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ 69.02958196301639759440, -13.39780118806328346182, -96.66107573544628905893 ],
    CurrentVelocity := [ 100.84225227141041614232, -40.44627894454811212199, 363.36834103503497317433 ],
    CurrentAcceleration := [ -7135.55942272971151396632, -622.60760459453013027087, 1671.34292984182866348419 ],
    TargetPosition := [ -16.84074689714994121914, -92.09682308688789476037, -87.06215904519353898650 ],
    TargetVelocity := [ 537.25106843782555188227, -935.18562117857493376505, -396.85249080038204283483 ],
    TargetAcceleration := [ -310.44042758873558796040, -501.02391325450025760802, -57.28028759093501776078 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_61');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.19429164835544748824, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.00929214609675180735, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(69.55159049131329140891, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.16890359782096156516, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-28.39869225356863324805, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-13.39780118806328346182, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.19429164835544748824, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-92.09682308688789476037, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.15958331587242960414, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-78.59507311744690127853, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-96.66107573544628905893, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_66" Id="{df551abb-ef94-48f0-bd6c-eb2644b2e42f}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_66
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -48.80987185641822634352, 18.04364910313265113473, -24.74266082352920648191 ],
    CurrentVelocity := [ 988.42910759631240580347, -768.41448219800986407790, -207.75563249912386254437 ],
    CurrentAcceleration := [ 3735.71066306482680374756, -9295.98081225150599493645, 5866.28306601172880618833 ],
    TargetPosition := [ -12.17413972252995790768, 39.46835789725682275275, -82.53347662682273266910 ],
    TargetVelocity := [ 196.90336440418968777522, 718.33687283187941829965, -527.62167018153525077651 ],
    TargetAcceleration := [ -832.60782943610661277489, 502.29848616551748818893, 413.82241950646152872650 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_66');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.15504630751390929833, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.06757881268766546823, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-7.34951569385982939053, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-48.80987185641822634352, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.15504630751390929833, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(39.46835789725682275275, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.03661997601531438024, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-9.78096891406795521107, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-24.74266082352920648191, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.15504630751390929833, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-82.53347662682273266910, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_70" Id="{2807c9fd-c227-412f-8b2d-45de94481f19}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_70
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.00000000000000000000, 2000.00000000000000000000, 2000.00000000000000000000 ],
    MaxAcceleration := [ 20000.00000000000000000000, 20000.00000000000000000000, 20000.00000000000000000000 ],
    MaxJerk := [ 800000.00000000000000000000, 800000.00000000000000000000, 800000.00000000000000000000 ],
    CurrentPosition := [ -92.33184858939047501281, 71.73781926022004995502, -55.27032026177170109804 ],
    CurrentVelocity := [ -952.87828015244156176777, -234.88833123485505893768, 123.27287252024666486250 ],
    CurrentAcceleration := [ -7266.87319497806674917229, -1917.48167665642540669069, -9579.01136324118306220043 ],
    TargetPosition := [ -64.62381428735777433303, 58.03768693667834099870, 63.08437907080863737974 ],
    TargetVelocity := [ 812.70256182329512739670, -863.39780178803880517080, -492.22548367060147711527 ],
    TargetAcceleration := [ 53.46404855095147468091, -729.77327604858464837889, -373.83030360848226791859 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_70');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.22013991649512543169, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.22013991649512543169, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-64.62381428735777433303, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.08266151031223724355, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-135.90053229571682891219, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.16474949862477941687, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(86.19544571063090643293, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.22013991649512543169, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(58.03768693667834099870, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.19560720437463602339, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(73.07882819675037922025, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.00000000000000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-55.27032026177170109804, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
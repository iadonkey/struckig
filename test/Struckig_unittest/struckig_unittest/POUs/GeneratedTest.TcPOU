<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="GeneratedTest" Id="{8a002d40-1b8b-4a36-917f-04dd149a7db3}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK GeneratedTest EXTENDS TcUnit.FB_TestSuite]]></Declaration>
    <Implementation>
      <ST><![CDATA[Test_Trajectory_HasTargetVelocity_1();
Test_Trajectory_HasTargetVelocity_2();
Test_Trajectory_3();
Test_Trajectory_HasTargetVelocity_4();
Test_Trajectory_HasTargetAcceleration_7();
Test_Trajectory_8();
Test_Trajectory_HasTargetAcceleration_9();
Test_Trajectory_10();
Test_Trajectory_HasTargetVelocity_11();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_12();
Test_Trajectory_HasTargetAcceleration_13();
Test_Trajectory_HasTargetAcceleration_14();
Test_Trajectory_HasTargetAcceleration_15();
Test_Trajectory_HasTargetVelocity_16();
Test_Trajectory_HasTargetVelocity_17();
Test_Trajectory_HasTargetAcceleration_19();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_20();
Test_Trajectory_HasTargetVelocity_21();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_22();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_23();
Test_Trajectory_HasTargetVelocity_24();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_25();
Test_Trajectory_HasTargetAcceleration_26();
Test_Trajectory_HasTargetAcceleration_27();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_28();
Test_Trajectory_29();
Test_Trajectory_31();
Test_Trajectory_HasTargetVelocity_33();
Test_Trajectory_HasTargetAcceleration_34();
Test_Trajectory_HasTargetAcceleration_36();
Test_Trajectory_HasTargetAcceleration_38();
Test_Trajectory_HasTargetAcceleration_39();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_40();
Test_Trajectory_HasTargetAcceleration_41();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_44();
Test_Trajectory_HasTargetVelocity_45();
Test_Trajectory_HasTargetVelocity_46();
Test_Trajectory_HasTargetVelocity_47();
Test_Trajectory_HasTargetVelocity_48();
Test_Trajectory_49();
Test_Trajectory_51();
Test_Trajectory_HasTargetAcceleration_52();
Test_Trajectory_HasTargetVelocity_53();
Test_Trajectory_HasTargetVelocity_54();
Test_Trajectory_HasTargetVelocity_57();
Test_Trajectory_58();
Test_Trajectory_HasTargetAcceleration_59();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_60();
Test_Trajectory_61();
Test_Trajectory_HasTargetAcceleration_62();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_63();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_64();
Test_Trajectory_HasTargetAcceleration_65();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_66();
Test_Trajectory_67();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_68();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_69();
Test_Trajectory_HasTargetVelocity_70();
Test_Trajectory_HasTargetAcceleration_71();
Test_Trajectory_HasTargetAcceleration_72();
Test_Trajectory_HasTargetAcceleration_73();
Test_Trajectory_HasTargetVelocity_74();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_75();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_76();
Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_77();
Test_Trajectory_79();
Test_Trajectory_HasTargetVelocity_80();
]]></ST>
    </Implementation>

    <Method Name="Test_Trajectory_HasTargetVelocity_1" Id="{bf134b56-698e-4e9b-8de5-f49139fcc7a1}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_1
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -5.3045248614, -38.8977725447, -61.7598304337 ],
    CurrentVelocity := [ 489.2763435297, 105.1956258347, -984.0482160145 ],
    CurrentAcceleration := [ -1250.5642015824, 7230.9652819587, -4115.8218760175 ],
    TargetPosition := [ 13.2748945008, 3.1052701061, -87.0234056693 ],
    TargetVelocity := [ 874.4846862005, -113.7930698278, 781.9823045230 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_1');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1637372455, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1637372455, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(13.2748945008, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0964812477, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-15.0364193388, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1468706313, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(4.3848059777, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-38.8977725447, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-61.7598304337, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1118521717, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-111.5711500917, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_2" Id="{f268a187-15a8-452e-8349-257b6ddbbe11}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_2
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 91.2870494292, 98.8122005243, 85.7678998240 ],
    CurrentVelocity := [ 646.1048123388, 683.1686734758, 22.3756745006 ],
    CurrentAcceleration := [ -5998.8192986557, -8889.6858593240, -4197.9796611929 ],
    TargetPosition := [ -51.5573079024, 11.6257192649, -51.2457925586 ],
    TargetVelocity := [ -71.8676741326, -366.2679843665, 828.0056561451 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_2');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2460805437, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0175014759, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(100.9613489245, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2460805437, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-51.5573079024, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0522953040, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(110.8681307861, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2460805437, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(11.6257192649, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0038890004, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(85.8153305615, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2210805437, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-69.8626006289, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_3" Id="{5df8541e-04a1-402b-bf6b-47c2a6c4dce1}">
      <Declaration><![CDATA[METHOD Test_Trajectory_3
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -9.7896041244, 52.0865726208, 5.3968976237 ],
    CurrentVelocity := [ 151.2749789696, -656.0334724336, 391.9645933699 ],
    CurrentAcceleration := [ 9581.5377677332, 502.7189062280, -7661.1206831953 ],
    TargetPosition := [ -69.3339948634, 18.3102101906, 56.0895793572 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_3');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1645726747, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0348162329, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-4.3426453003, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1645726747, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-69.3339948634, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(52.0865726208, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1645726747, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(18.3102101906, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1645726742, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(56.0895793572, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(5.3968976237, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_4" Id="{4b24ded3-9c41-415b-8cbf-7dff8b41bacc}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_4
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 11.7732819852, 22.3095434793, -69.1291645884 ],
    CurrentVelocity := [ -943.5376854305, -935.6689333176, 131.8086864474 ],
    CurrentAcceleration := [ -888.7558792390, 7329.8655673700, -5601.1450722848 ],
    TargetPosition := [ -25.3614258244, -16.9411465784, -72.1903126548 ],
    TargetVelocity := [ -194.8058788068, -745.9123078331, 806.9029725924 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_4');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1543810771, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(11.7732819852, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1543810771, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-25.3614258244, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(22.3095434793, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1543810771, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-16.9411465784, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0124547183, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-68.1795461634, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0901193742, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-96.7296995498, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetAcceleration_7" Id="{c94d732e-f793-4d74-b825-7f1602dbe9b6}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_7
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -79.3572154950, 65.9553633985, -15.1632939946 ],
    CurrentVelocity := [ 525.6246868666, -818.8217244892, -223.1878064682 ],
    CurrentAcceleration := [ -901.4898881937, -2151.9564262679, -1921.1851336706 ],
    TargetPosition := [ -81.8415602532, 53.6326587851, 71.7546103743 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ -334.7281492492, 342.4368819378, -539.7749622315 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_7');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1756148539, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0387240702, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-66.9342893564, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1747780336, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-81.8415993198, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(65.9553633985, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0566573013, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(37.1068838678, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1756148539, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(71.7546103743, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0261446200, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-19.2722691025, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_8" Id="{fe823c4a-0216-46bd-ad55-afd0fa168618}">
      <Declaration><![CDATA[METHOD Test_Trajectory_8
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 47.9490352108, -61.7854897461, -78.2151662563 ],
    CurrentVelocity := [ -953.6791303257, 456.8923485520, -728.0133009140 ],
    CurrentAcceleration := [ -9579.8117072238, -5380.3381540769, 8651.1785503300 ],
    TargetPosition := [ -48.3814051184, 31.1022608722, -71.0268254176 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_8');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1456895968, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(47.9490352108, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1456895968, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-48.3814051184, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1456895968, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(31.1022608722, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-61.7854897461, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1456895968, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-71.0268254176, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0430491267, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-94.1079244727, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetAcceleration_9" Id="{fee47339-420f-4b07-bd32-c8fe398ede6d}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_9
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -57.1055714100, 18.5740634240, 52.7947651084 ],
    CurrentVelocity := [ 989.5928813174, -966.8360804436, 100.0689730159 ],
    CurrentAcceleration := [ -8110.1232727192, 3275.2349905215, -3331.9469493948 ],
    TargetPosition := [ -56.1719537666, 9.1524427231, -98.5616662234 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ -535.5421456097, -990.5750304792, 436.5266555224 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_9');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2020944297, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0539291738, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-28.4937091208, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-57.1055714100, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(18.5740634240, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0573965960, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-12.7996180858, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0121910776, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(53.5255305415, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2020944297, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-98.5616662234, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_10" Id="{443b94ae-3b7b-44fc-be67-6263484113aa}">
      <Declaration><![CDATA[METHOD Test_Trajectory_10
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 41.2266900520, 75.1662232071, -4.7676727058 ],
    CurrentVelocity := [ 448.7167957591, -79.1124194533, -741.5654827109 ],
    CurrentAcceleration := [ 2946.5040626593, -3916.9798271361, -8352.4178425241 ],
    TargetPosition := [ 79.3943917038, -13.5091660342, 90.9404966344 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_10');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2372447365, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.2372447365, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(79.3943917038, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(41.2266900520, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(75.1662232071, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2372447365, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-13.5091660342, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2372447365, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(90.9404966344, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0354405223, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-30.3593361882, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_11" Id="{649c89b3-dc37-42bf-8583-269e86005058}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_11
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 4.8388024915, 41.7711266010, 15.5628932593 ],
    CurrentVelocity := [ 741.6121809185, -775.7488610229, 387.2135541777 ],
    CurrentAcceleration := [ 3564.4030151220, 7585.4669052066, 6968.8648712653 ],
    TargetPosition := [ 40.3946118419, 29.9486074364, 4.0613600802 ],
    TargetVelocity := [ -428.7302685221, 812.8875165392, 760.0327534612 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_11');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1942730515, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1600242018, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(49.8354010340, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(4.8388024915, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(41.7711266010, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1409870983, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(3.7863831701, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0337110811, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(27.4680494242, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1692730515, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-12.8561254230, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_12" Id="{7af3b0eb-505e-47d6-a7c8-373a55d07bb0}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_12
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -87.2509610985, -96.7083441519, 38.8916007327 ],
    CurrentVelocity := [ -779.6129936928, -960.3508654985, 268.7889713586 ],
    CurrentAcceleration := [ 1022.9983880107, -576.6978656595, 4588.1952235677 ],
    TargetPosition := [ -63.1704871616, 88.9685002785, 88.1056289021 ],
    TargetVelocity := [ -677.2070910596, 161.1040066154, -94.1979117326 ],
    TargetAcceleration := [ -58.5890750350, -292.4855602967, -883.4674378345 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_12');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2766419303, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.2214527498, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-44.6029406022, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0591365607, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-109.9139495869, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2766419303, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(88.9685002785, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0257208723, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-119.3313692883, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2623607411, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(88.9724368236, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(38.8916007327, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetAcceleration_13" Id="{1b1349f3-865e-4f76-b758-237f7cc60e22}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_13
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -92.1539440777, 49.6314720865, 88.0437693504 ],
    CurrentVelocity := [ 36.4444537739, 18.8351384288, -257.8632323854 ],
    CurrentAcceleration := [ 354.2708665811, 3696.0423221721, 5499.5922213296 ],
    TargetPosition := [ 98.2084166978, 65.4983460487, -75.0927686024 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 808.6255581190, 447.4895602592, 324.2473885462 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_13');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2202833592, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.2182617953, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(98.2089674689, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-92.1539440777, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2191646353, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(65.4984393908, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(49.6314720865, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(88.0437693504, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2202833592, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-75.0927686024, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetAcceleration_14" Id="{aac2c719-ead6-468b-85e3-25db0cf4847c}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_14
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 50.6932040527, -36.2159303491, 36.5632645083 ],
    CurrentVelocity := [ 281.5762848119, 668.1004261972, -867.7955875989 ],
    CurrentAcceleration := [ -6164.7969130876, -5366.3696308497, 780.1900081078 ],
    TargetPosition := [ -36.5424178211, 66.0468355164, -73.7933795362 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 580.4750523395, 61.9201705769, 678.2747206578 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_14');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1691178059, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0172940039, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(53.9512490769, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1691178059, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-36.5424178211, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1689630055, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(66.0468357637, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-36.2159303491, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(36.5632645083, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1691178059, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-73.7933795362, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetAcceleration_15" Id="{e40dd4c3-ac7f-4f36-aa0d-0da2026124b0}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_15
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 65.1562344974, -0.6040805501, -97.7888443647 ],
    CurrentVelocity := [ 202.9371491523, -16.0912813340, -184.8492910506 ],
    CurrentAcceleration := [ 2730.9856981927, 1707.2950823344, 9627.7153658846 ],
    TargetPosition := [ -91.4565765026, 70.2254104581, 90.5566061199 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ -357.4630156217, 763.2749222642, -276.8310575426 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_15');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2213772081, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0261952255, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(69.0125531910, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2204835506, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-91.4566240823, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2194690208, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(70.2258736615, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0045578664, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-0.6470638908, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2213772081, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(90.5566061199, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0126018306, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-99.0869806192, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_16" Id="{d0ca00e1-2974-45b9-b064-1e379ddb44e8}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_16
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 79.6762307387, 7.2722248983, 29.3896822936 ],
    CurrentVelocity := [ 102.4897351169, 431.1427026262, 346.5543503146 ],
    CurrentAcceleration := [ -7023.8947726921, -6423.0477344346, 2466.8527644197 ],
    TargetPosition := [ -92.8251984311, 28.2939911932, 96.7700133898 ],
    TargetVelocity := [ 438.1496036204, -613.3028009008, 281.7166266124 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_16');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2381501151, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0094769228, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(80.2186171947, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2131501151, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-101.6956051882, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1947396023, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(44.8480786504, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(7.2722248983, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2381501151, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(96.7700133898, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(29.3896822936, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_17" Id="{81fb871c-46e0-4f8d-822d-42bca61ca546}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_17
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 37.4281086399, -35.0724588878, 2.8235227014 ],
    CurrentVelocity := [ -529.6859781332, -234.7842360684, 855.5310285717 ],
    CurrentAcceleration := [ -5878.1952041752, 7543.3186331447, 167.9297043852 ],
    TargetPosition := [ -17.9008946267, 59.2922849313, 99.2249720246 ],
    TargetVelocity := [ -149.2817624488, 361.8892754572, 300.5143470118 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_17');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1517129279, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(37.4281086399, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1517129279, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-17.9008946267, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1517129279, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(59.2922849313, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0155708517, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-37.3104485560, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1517129279, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(99.2249720246, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(2.8235227014, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetAcceleration_19" Id="{d997487c-5763-4201-96fb-e5664760bb7e}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_19
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 90.9013816046, -56.6233431572, 89.5353368382 ],
    CurrentVelocity := [ 595.3980793477, -454.0513437387, 263.1027991806 ],
    CurrentAcceleration := [ -6337.1919501498, 289.3101848090, 2219.3324567638 ],
    TargetPosition := [ -41.9193640013, 33.7746907312, 16.9079242695 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 234.6054610059, 696.6535341005, -305.5151636051 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_19');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2201364830, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0170785101, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(99.4815074512, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2201364830, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-41.9193640013, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2183948492, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(33.7750429231, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0246383623, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-65.7283865259, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0277741656, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(94.8421174811, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2193726951, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(16.9078945647, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_20" Id="{0cc40438-d551-427e-a96d-c39376a7c855}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_20
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 20.8368429169, 66.9425649243, -1.4939406557 ],
    CurrentVelocity := [ -731.3175607979, -425.4470481224, 448.9661977240 ],
    CurrentAcceleration := [ -1460.1665825916, 2370.8386554831, -8631.7056835390 ],
    TargetPosition := [ -65.6420864136, 76.0245079683, -80.8866443067 ],
    TargetVelocity := [ 693.5727318002, -224.9990928045, -216.1859078516 ],
    TargetAcceleration := [ -825.1696615914, -301.5760815826, -719.8295089620 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_20');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1750933691, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(20.8368429169, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1490619070, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-81.6243971225, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1517228054, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(79.4986982834, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0311490037, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(58.7661258258, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0142103679, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(3.6319057834, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1750933691, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-80.8866443067, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_21" Id="{90cf4d9c-f970-4ae6-9145-f55e3146ffd2}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_21
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 23.3821099727, 87.9615320411, -76.0243132258 ],
    CurrentVelocity := [ 833.1660612505, -779.3601530466, 802.4196687365 ],
    CurrentAcceleration := [ -2129.6836085737, -6397.7865209535, 8308.9187130205 ],
    TargetPosition := [ -75.4575203057, -39.0759719837, 72.6176254943 ],
    TargetVelocity := [ 176.3188208807, -101.3869577482, -102.0498895166 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_21');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2345987086, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0223378955, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(39.9757901642, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2136035412, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-77.9254157404, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(87.9615320411, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2345987086, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-39.0759719837, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2186260844, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(73.7042951842, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-76.0243132258, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_22" Id="{d80d4c95-19f5-468c-8e1b-f2263e1810b9}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_22
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -99.5712946121, -74.6921197193, -24.5562632009 ],
    CurrentVelocity := [ -925.9318826471, 856.5269304579, 182.8201299285 ],
    CurrentAcceleration := [ 2927.9394601011, -5867.4861586893, 6279.4269292818 ],
    TargetPosition := [ -17.1021671420, 76.6985357214, -5.5780519413 ],
    TargetVelocity := [ 12.8494175136, 548.8626605287, -125.0584498614 ],
    TargetAcceleration := [ 620.8121138351, -230.1765558308, -33.1028872486 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_22');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2199398428, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.2199398428, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-17.1021671420, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0213400757, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-117.3682948902, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2199398428, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(76.6985357214, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-74.6921197193, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2022062456, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-4.1085378482, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-24.5562632009, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_23" Id="{4c047aa9-4ab5-4c67-99f8-82c14c3750ea}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_23
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -97.1842606452, 19.1287304704, -79.5694788875 ],
    CurrentVelocity := [ -789.8377765096, -669.6679199517, -90.7788584122 ],
    CurrentAcceleration := [ -7021.4390773313, 2233.6766418272, 5466.3355205146 ],
    TargetPosition := [ 96.3826916790, -35.6096252272, 9.6589288721 ],
    TargetVelocity := [ 368.9407544236, -557.3559681625, 867.0806905562 ],
    TargetAcceleration := [ -866.8270946105, -562.5694598038, -261.9827155618 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_23');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2698189622, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.2698189622, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(96.3826916790, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0337767988, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-122.7297332855, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(19.1287304704, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2698189622, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-35.6096252272, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2698189622, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(9.6589288721, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0097090253, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-80.0711808650, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_24" Id="{594b7845-6c2f-4db3-b46a-b231c1eb575e}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_24
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -83.4995093070, 65.4482931624, 93.5465463307 ],
    CurrentVelocity := [ -924.4745249958, 144.3025050722, 239.2354636813 ],
    CurrentAcceleration := [ 8362.8653510358, 4818.7390137937, -2298.9419650993 ],
    TargetPosition := [ 72.8874705284, 73.0035205348, -50.0942189032 ],
    TargetVelocity := [ 387.1345721719, -611.8348168299, 484.5136905500 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_24');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2387562654, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.2387562654, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(72.8874705284, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0145464183, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-95.6521188561, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1946040582, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(89.5294026656, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(65.4482931624, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0217504303, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(96.8342648009, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2137562654, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-60.1237278336, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_25" Id="{675fda76-fffc-424b-9c42-9531a4aa5001}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_25
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -43.5724567999, -86.2089718102, 3.7364167263 ],
    CurrentVelocity := [ 484.8175047033, -573.0466680334, -601.4750562140 ],
    CurrentAcceleration := [ 462.0292616815, 3641.8958418158, 9188.2765121248 ],
    TargetPosition := [ -74.0730531725, 9.9073471040, 97.4948445714 ],
    TargetVelocity := [ -13.1574159403, 638.8781052362, -332.5468853835 ],
    TargetAcceleration := [ 911.3479044651, -545.2634656294, -841.7936351069 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_25');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2135039888, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0388012414, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-31.8937078416, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2135039888, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-74.0730531725, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2135039888, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(9.9073471040, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0204476302, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-96.0251672366, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1895562309, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(103.3860250098, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0135146544, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-3.2240908657, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetAcceleration_26" Id="{bd7d7651-b5ec-422c-9d8e-9eeaec7ef63e}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_26
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 35.9796951795, -84.2150916797, -24.6311705112 ],
    CurrentVelocity := [ 199.2027301292, -442.2047154793, 95.2007034401 ],
    CurrentAcceleration := [ 5830.4689873598, 835.6770941496, -4839.2516401327 ],
    TargetPosition := [ -71.4888277396, -64.2683020467, 62.6059547560 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 318.9226091017, 628.9246130105, 504.7784184860 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_26');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1953092318, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0307640958, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(40.9849111623, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1953092318, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-71.4888277396, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1937369203, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-64.2680429126, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0336533807, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-93.6640786881, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1940472857, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(62.6060887333, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-24.6311705112, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetAcceleration_27" Id="{326a3a21-b31c-4b33-9146-3a28e102c4a6}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_27
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -51.3377272755, 24.1943440000, 10.5333000232 ],
    CurrentVelocity := [ -773.9875435528, -309.1489175930, -244.5811823680 ],
    CurrentAcceleration := [ 1403.9283533378, 6355.6208080995, 1865.2100494029 ],
    TargetPosition := [ -30.7873569688, 97.2560012288, -2.6431922164 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 629.4709024239, 735.4166535974, -825.2863159734 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_27');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1616576734, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1600839962, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-30.7870971589, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0706989681, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-69.6801526339, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1598191318, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(97.2564155423, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0170554740, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(20.5075537897, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(10.5333000232, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1595944576, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-2.6437777377, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_28" Id="{1cd7d9ad-bdfa-4718-b649-b9b9ab7471b9}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_28
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -13.6260011175, 93.4918603695, -11.5814038261 ],
    CurrentVelocity := [ 259.6230464894, 108.2049857051, 658.8078147462 ],
    CurrentAcceleration := [ 1388.6532437671, 1385.2714979098, -600.2682835268 ],
    TargetPosition := [ 93.5022374254, -33.5863351504, -28.5085574905 ],
    TargetVelocity := [ -521.9867810520, 400.1436215382, 798.5246405002 ],
    TargetAcceleration := [ -998.6233798863, -974.9825780588, -137.1167072615 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_28');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2217255847, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1979738639, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(103.8320516888, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-13.6260011175, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0182697533, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(94.8868428496, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1955068565, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-42.0095943784, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0242496646, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(2.3166487945, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1475394159, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-49.3874061293, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_29" Id="{7bcdf6f9-5145-4048-b163-8bf6d95dbada}">
      <Declaration><![CDATA[METHOD Test_Trajectory_29
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -43.1797461012, -56.8989626265, -11.6112898895 ],
    CurrentVelocity := [ -288.9067036780, 181.0617064999, -209.6551902510 ],
    CurrentAcceleration := [ 9785.7783245068, 8504.0388196343, 6829.8189314677 ],
    TargetPosition := [ -51.8673311379, 15.7030088494, 53.4684471374 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_29');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1472810936, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-43.1797461012, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1472810934, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-51.8673311379, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1472810936, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(15.7030088494, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-56.8989626265, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1472810936, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(53.4684471374, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0158967808, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-13.5455270538, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_31" Id="{241c454d-506e-4f04-98bf-f3393eac534c}">
      <Declaration><![CDATA[METHOD Test_Trajectory_31
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 80.2488571181, 14.2375818005, -56.9195725825 ],
    CurrentVelocity := [ 345.3643370164, 627.2957603596, 224.6446530438 ],
    CurrentAcceleration := [ -384.4058183519, 5712.4157228442, 658.7907188279 ],
    TargetPosition := [ -28.1749653836, -50.7173475694, -28.3387527651 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_31');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1996101637, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0245194927, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(86.6359614220, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1996101637, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-28.1749653836, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0321405197, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(32.9228167442, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1996101637, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-50.7173475694, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1996101637, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-28.3387527651, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-56.9195725825, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_33" Id="{dbadc516-b82f-4038-812f-777db61c8126}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_33
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -21.5639755250, -18.8819966161, 11.1211079861 ],
    CurrentVelocity := [ 177.9167848344, 687.5995977236, -958.7964111630 ],
    CurrentAcceleration := [ 2687.9038945166, -2923.1613007855, -4551.1816515122 ],
    TargetPosition := [ 67.3614133763, -67.7357164622, -58.4432504597 ],
    TargetVelocity := [ -411.3126332052, -780.1992152346, -403.5278355722 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_33');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1753758080, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1503758080, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(75.5608958731, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-21.5639755250, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0572990785, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-3.1684549043, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1753758080, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-67.7357164622, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(11.1211079861, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1753758080, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-58.4432504597, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetAcceleration_34" Id="{b14fed40-2c71-46c6-90cc-4ba61a25b1d0}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_34
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -32.7763694410, 80.0289259780, -45.1980539691 ],
    CurrentVelocity := [ -596.7589721858, 885.7521895792, 952.0528444379 ],
    CurrentAcceleration := [ 4809.9001070290, -9493.5130015142, 1134.5641214504 ],
    TargetPosition := [ 99.1460320439, -63.5002987274, 95.5054518351 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 60.1409449565, -723.2028481518, -802.0879734857 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_34');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2453670308, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.2452166784, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(99.1460322705, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0189876249, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-42.3276010151, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0131331087, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(90.5408682186, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2435590236, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-63.5006927391, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2453670308, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(95.5054518351, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-45.1980539691, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetAcceleration_36" Id="{f7c6c1f2-1cf8-420e-92cf-da0b453950f0}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_36
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -9.2708597476, 31.3159120782, -80.2670239208 ],
    CurrentVelocity := [ -335.3831309927, 768.2584079622, 436.7271454936 ],
    CurrentAcceleration := [ 2771.9289889836, -8356.9246703327, 8273.7904007050 ],
    TargetPosition := [ 7.3834553008, -52.2262789928, 29.9024746433 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 401.9940990681, -144.1404790965, 946.8518809428 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_36');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2002208257, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1992158405, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(7.3835229695, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0267572969, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-14.7453117140, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0145538442, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(41.2009383520, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1998604745, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-52.2262821123, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1978536960, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(29.9033588930, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-80.2670239208, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetAcceleration_38" Id="{23c6b416-0154-41ad-b3de-343c56657ba7}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_38
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 1.1895045219, 39.2955395595, -65.1246654955 ],
    CurrentVelocity := [ 368.8929058660, 726.7541520888, -440.9383631618 ],
    CurrentAcceleration := [ 4989.5231914843, 1156.8375264721, -3503.4418759660 ],
    TargetPosition := [ -68.2479593932, 20.6549355872, 25.0037444407 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 781.5194730836, -131.9555885299, -390.6383495384 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_38');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1968232381, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0312369040, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(11.0829289585, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1968232381, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-68.2479593932, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0559392810, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(61.8408794673, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1964933491, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(20.6549331938, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1968232381, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(25.0037444407, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0293793023, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-76.2099732129, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetAcceleration_39" Id="{164fc56e-ba20-42f0-ac0e-221cb0b9b747}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_39
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -62.8532936129, -26.4646746829, -76.4148560790 ],
    CurrentVelocity := [ -373.4701068980, 290.0815930073, 48.2484141854 ],
    CurrentAcceleration := [ 9188.8819445227, 8032.5173960180, 7090.6047573182 ],
    TargetPosition := [ -53.4573483720, -85.5840851380, 33.7190860219 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 873.5121034640, -754.1303449254, -370.1232557337 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_39');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1727636573, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1705798770, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-53.4566540906, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0237947502, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-67.5710757226, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0350406467, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-17.1052838764, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1708783314, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-85.5845318916, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1727636573, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(33.7190860219, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-76.4148560790, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_40" Id="{528c0529-bb96-45e2-8cc5-50a0122c5f3a}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_40
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -37.6672094558, 50.8797846191, -2.9115016772 ],
    CurrentVelocity := [ 555.9547706200, -657.3364909380, -825.1220369005 ],
    CurrentAcceleration := [ 3193.1613528962, 3140.8981624913, -5318.1938999815 ],
    TargetPosition := [ 89.1055258006, 75.0579244843, -34.5376516179 ],
    TargetVelocity := [ -367.3928600988, 283.3405598119, -227.5372719253 ],
    TargetAcceleration := [ 206.5707956544, 518.9490172610, 420.3713155780 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_40');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1799940424, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1547358289, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(96.3025510970, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-37.6672094558, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1799940424, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(75.0579244843, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0450148668, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(34.8045397591, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-2.9115016772, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0640897749, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-36.3895480501, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetAcceleration_41" Id="{6d921b0d-854f-493d-a5f1-ce3e6349c12c}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_41
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -30.4876055937, -6.0184830640, -96.5007470647 ],
    CurrentVelocity := [ 383.7479501108, -818.1160020217, -310.3011084995 ],
    CurrentAcceleration := [ 6752.5642776311, 3202.8223890727, 7476.3245321700 ],
    TargetPosition := [ 20.6657117144, -82.5603288864, 14.8777044536 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ -648.0252796186, -723.2089190992, -940.8013999301 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_41');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1858378540, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1858378540, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(20.6657117144, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-30.4876055937, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-6.0184830640, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1840298317, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-82.5607229081, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1858378540, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(14.8777044536, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0156545943, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-99.9307655044, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_44" Id="{fcc90c7b-25a2-4c32-967f-2178f9db0c3f}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_44
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -34.6840675233, 53.3360806210, -11.4447471007 ],
    CurrentVelocity := [ 497.8876000537, -244.9013740760, -504.5377169519 ],
    CurrentAcceleration := [ 7120.0174089709, 1291.5373054590, -8795.5166731939 ],
    TargetPosition := [ -74.8295080769, -89.3569725699, 48.6037342853 ],
    TargetVelocity := [ -257.5415238634, 992.1634758750, -316.6596283815 ],
    TargetAcceleration := [ 827.2012090863, -124.4401022561, -127.1839418606 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_44');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2544638684, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0500875728, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-17.0036894257, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2544638684, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-74.8295080769, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(53.3360806210, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2293083183, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-112.2323002510, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2296228483, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(54.3868008114, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0359943958, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-29.0851025946, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_45" Id="{ea1e17d2-8ef8-40b0-a1f9-021c5b159683}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_45
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -21.3041075466, 26.2277764872, 33.1275833038 ],
    CurrentVelocity := [ 110.8792272288, 506.4883808494, -427.2696836188 ],
    CurrentAcceleration := [ 6199.0091855594, 9272.2245034829, 6234.7840527318 ],
    TargetPosition := [ -38.0099117931, 12.9950580704, 23.4214587884 ],
    TargetVelocity := [ -425.8606945119, -363.1932107312, 788.1314696049 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_45');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1331133156, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0261128943, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-18.6693557713, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1331133156, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-38.0099117931, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0674788807, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(44.4768087725, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1331133156, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(12.9950580704, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(33.1275833038, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0638888218, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(1.5609720573, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_46" Id="{054bb0fc-3c1b-42ca-bce3-2c6039bdf585}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_46
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 64.9959865641, -55.1896766705, 6.8946774878 ],
    CurrentVelocity := [ 55.0301981784, -740.9229259013, 308.6784757021 ],
    CurrentAcceleration := [ -3012.0662384048, -5334.3394346472, 51.7733566051 ],
    TargetPosition := [ -44.3701774834, 96.9679152176, -31.1791285570 ],
    TargetVelocity := [ -154.4346847738, -103.2267487695, -305.9865326509 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_46');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2674994560, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0085536567, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(65.2730631884, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2674994560, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-44.3701774834, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2514349961, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(98.0734365285, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0316679243, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-77.0935036753, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0282646803, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(12.6400987039, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2674994560, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-31.1791285570, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_47" Id="{b78de9f8-11c3-4e71-b000-1d5bd4abe527}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_47
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -44.8420497243, 47.7024850061, -72.4835382847 ],
    CurrentVelocity := [ 559.0289240492, -11.8408631936, 251.7115547836 ],
    CurrentAcceleration := [ 846.5684435873, 4659.9473533264, -8204.4392407914 ],
    TargetPosition := [ 52.9803347560, -61.8928954495, -93.0230252878 ],
    TargetVelocity := [ 805.4386608655, -82.5210647459, 858.7712269864 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_47');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1780103888, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1780103888, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(52.9803347560, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-44.8420497243, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(47.7024850061, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1780103888, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-61.8928954495, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0147444509, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-70.0913975655, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0947526909, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-113.9349892358, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_48" Id="{0764abb8-d625-484b-bece-758574ae5529}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_48
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 3.8075802254, -30.9316494317, -14.6168918758 ],
    CurrentVelocity := [ -821.1781042415, -601.9784791892, -571.5099860170 ],
    CurrentAcceleration := [ -6030.6262551572, 6590.2354624527, 8609.8891824977 ],
    TargetPosition := [ -55.2738930931, 79.0304809076, -30.5454866533 ],
    TargetVelocity := [ 475.9066211051, 658.5365648245, 51.6432030912 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_48');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1755089195, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(3.8075802254, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1282535075, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-65.1628365922, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1755089195, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(79.0304809076, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0167622057, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-39.4683418466, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-14.6168918758, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1641229482, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-30.9367204709, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_49" Id="{8e783ba2-b2cf-4bad-8338-8fd1f764f4f1}">
      <Declaration><![CDATA[METHOD Test_Trajectory_49
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 4.9651449918, 78.3724844850, 99.5590434737 ],
    CurrentVelocity := [ 598.8525065357, -938.0929802173, -735.9351816674 ],
    CurrentAcceleration := [ -1555.9877967807, 9008.9425856505, -7611.9145278546 ],
    TargetPosition := [ 74.9693459757, -90.6611987881, -11.7408778064 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_49');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1765919723, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1765919723, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(74.9693459757, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(4.9651449918, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(78.3724844850, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1765919723, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-90.6611987881, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(99.5590434737, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1765919723, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-11.7408778064, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_51" Id="{70ea4666-b7f6-4ba3-8d0c-c640b558ffa9}">
      <Declaration><![CDATA[METHOD Test_Trajectory_51
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 94.5209394260, 78.2387867557, -85.2213684574 ],
    CurrentVelocity := [ -990.0241821579, -177.1237979598, 891.9280577181 ],
    CurrentAcceleration := [ 1290.7142982571, -4848.2730777551, 7267.6197982589 ],
    TargetPosition := [ 64.2852202728, 23.5419384490, -75.6313835186 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_51');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1637428377, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(94.5209394260, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0639899803, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(59.5073173068, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(78.2387867557, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1637428377, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(23.5419384490, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0845371685, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-47.2807539328, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-85.2213684574, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetAcceleration_52" Id="{92483d63-2408-478d-9f6d-62cc8bea2de4}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_52
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 7.4805335998, 21.6609699611, 28.2920002915 ],
    CurrentVelocity := [ 601.2182174532, 917.7902794723, -173.9677153224 ],
    CurrentAcceleration := [ -8819.6693297982, -1033.9700375456, 4139.4495489134 ],
    TargetPosition := [ 29.9893878656, 78.4090763701, -21.1202362424 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 113.8943112742, -533.7619287340, -605.7736841119 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_52');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1230822273, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1227974915, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(29.9893894046, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(7.4805335998, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1230822273, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(78.4090763701, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(21.6609699611, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(28.2920002915, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1215677931, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-21.1204678005, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_53" Id="{39955fae-fc91-447f-9c2f-b8978b67d720}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_53
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 31.4413985433, -20.3169224034, -61.6274329505 ],
    CurrentVelocity := [ -573.3578529860, 408.5007840248, -281.8289869152 ],
    CurrentAcceleration := [ -4371.0752004288, 5345.5512578112, 8230.8138976407 ],
    TargetPosition := [ 12.1179602474, 81.4504005142, 73.9134951140 ],
    TargetVelocity := [ 207.4097376494, 182.7816487896, -372.9156822957 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_53');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2229401203, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(31.4413985433, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1966536942, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(8.8741585420, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2229401203, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(81.4504005142, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-20.3169224034, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1979401203, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(81.1530538380, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0147114826, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-64.4583373602, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_54" Id="{50633e59-9d42-4e06-bbdb-1fe252f43a08}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_54
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -80.9318256932, -86.1440886142, 51.3383917132 ],
    CurrentVelocity := [ -746.6824084113, -630.6356447881, 152.8294692832 ],
    CurrentAcceleration := [ -9061.9944969038, 2791.1451855278, 8133.8567820494 ],
    TargetPosition := [ 5.6230293660, 60.7497438457, 97.8133309255 ],
    TargetVelocity := [ 738.9562535471, -971.3359002517, -924.9094855716 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_54');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.3026399317, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.3026399317, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(5.6230293660, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0772808401, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-113.3152659886, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2776399317, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(82.9498080187, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0215110685, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-97.7368030702, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2391420039, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(130.0144469327, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(51.3383917132, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_57" Id="{11003957-f059-4e56-973d-7b7ff4a90b33}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_57
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 92.6346894322, 75.0531179022, 99.6855768954 ],
    CurrentVelocity := [ 737.8380013169, -40.0301133549, -534.6214378057 ],
    CurrentAcceleration := [ 5254.7353967356, -370.3053533334, -8553.4192859811 ],
    TargetPosition := [ -84.1280123539, -40.4007609242, -55.6360938803 ],
    TargetVelocity := [ 251.3325927289, 364.6880666218, -106.4204150156 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_57');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2883957601, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0315684192, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(114.3507471053, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2633957601, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-88.3279938388, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(75.0531179022, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2633957601, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-47.4346292564, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(99.6855768954, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2883957601, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-55.6360938803, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_58" Id="{632b0ad1-b7a9-4c45-9bcc-6ee5210c36a3}">
      <Declaration><![CDATA[METHOD Test_Trajectory_58
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 90.4430430356, -85.6204449389, -48.5549350156 ],
    CurrentVelocity := [ -311.0506349365, 594.4447852901, -329.9885571930 ],
    CurrentAcceleration := [ -2158.6219668941, 6015.3634803140, -3503.6837407820 ],
    TargetPosition := [ -83.0371007633, -66.5898704603, 94.4861747235 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_58');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2221631145, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(90.4430430356, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2221631145, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-83.0371007633, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0577391374, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-63.9490976152, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-85.6204449389, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2221631145, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(94.4861747235, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0293796047, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-56.3807457239, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetAcceleration_59" Id="{0a8e341e-762f-4138-9fe1-632d4c9c2af0}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_59
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 68.0013870078, 57.7551357097, 65.7923559428 ],
    CurrentVelocity := [ 974.8356928803, 646.8621610728, 776.2726468754 ],
    CurrentAcceleration := [ -6634.3326928417, -7578.4959675992, -6869.8791267164 ],
    TargetPosition := [ -11.1136053436, -78.7783781379, -45.9890559860 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ -815.7024181193, 4.0202314305, -636.5174676319 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_59');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2248696134, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0167070841, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(82.7403537021, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2228303573, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-11.1141707022, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0155268800, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(66.3862554913, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2248696134, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-78.7783781379, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0164126511, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(77.0182728332, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2232783197, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-45.9893246192, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_60" Id="{2476fa43-7c63-46ec-9fcb-c5a95c7fcf53}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_60
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 78.4681198270, -47.4035575365, 91.7939607984 ],
    CurrentVelocity := [ 385.0013558409, 364.0217081559, -171.0640410512 ],
    CurrentAcceleration := [ -5454.6436207981, -6818.7523264741, 8654.4881085155 ],
    TargetPosition := [ -52.3753459375, -22.5966268674, 58.8621419049 ],
    TargetVelocity := [ 232.5286535880, 561.3603915077, -469.2226163483 ],
    TargetAcceleration := [ -528.1146996711, -947.2778122193, 612.8899060866 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_60');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2208286613, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0181816955, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(83.7651291900, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1960488699, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-56.2707340534, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2208286613, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-22.5966268674, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-47.4035575365, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(91.7939607984, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2208286613, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(58.8621419049, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_61" Id="{98f781f5-5d4e-4b88-9c49-d19fdc73893d}">
      <Declaration><![CDATA[METHOD Test_Trajectory_61
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 80.4012355440, -5.7819906622, -20.4130758735 ],
    CurrentVelocity := [ 104.8321924310, -506.4050102149, 917.7065996577 ],
    CurrentAcceleration := [ -3882.0984196040, 3602.4419343698, -2497.8120539161 ],
    TargetPosition := [ 63.8340706796, 35.1769715171, -68.5060616975 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_61');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1953146706, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0120570242, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(81.1493418124, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1953146706, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(63.8340706796, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1953146706, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(35.1769715171, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0412280071, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-15.4427683146, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0218777349, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-2.3296987550, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1953146706, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-68.5060616975, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetAcceleration_62" Id="{8064577e-260c-44f6-bbae-94d8b49a028c}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_62
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -40.0517864405, -76.7941865674, 87.6091796752 ],
    CurrentVelocity := [ -510.2362581713, 585.9062057030, -279.5717878051 ],
    CurrentAcceleration := [ -3387.4097333593, 8353.3184677232, -9780.5328129267 ],
    TargetPosition := [ 95.9788891167, -73.6672770826, 48.8972943303 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 2.9718307483, 907.8964682809, -781.9276964318 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_62');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2308904871, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.2308830576, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(95.9788891168, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0292342622, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-53.0843676691, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0553807661, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-53.0820524245, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-76.7941865674, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(87.6091796752, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2289356679, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(48.8967963312, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_63" Id="{d442624e-c327-4897-a967-54540bd2abe9}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_63
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 39.8311398833, -10.2110931785, 71.1640994340 ],
    CurrentVelocity := [ 976.4878174995, 850.6799086322, -431.5387224515 ],
    CurrentAcceleration := [ -7329.8144610017, -6194.4069902809, 4175.3202071686 ],
    TargetPosition := [ 8.3705476897, -7.5995802476, -59.6022963477 ],
    TargetVelocity := [ 406.6321364002, 134.9737817852, 142.9885142230 ],
    TargetAcceleration := [ -665.0948997758, -294.7738486660, -134.5706058954 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_63');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2084552715, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0893097693, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(55.7097694950, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1826239029, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-0.0570485569, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0488460260, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(12.6252940418, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-10.2110931785, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(71.1640994340, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1893793989, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-61.4288782586, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_64" Id="{3f5cbb54-27c2-411b-a406-374ad9d139db}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_64
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -81.2513438231, -0.6022055386, -20.4440082764 ],
    CurrentVelocity := [ 87.9603215882, -399.9435740416, 131.5316401789 ],
    CurrentAcceleration := [ -9009.7856886106, 7378.2496627510, -6480.7660774006 ],
    TargetPosition := [ -13.4551122629, -60.2764042364, -68.4019292729 ],
    TargetVelocity := [ 828.3937419707, -897.2650439298, -735.9014736975 ],
    TargetAcceleration := [ -613.2064873891, -676.0152167766, -384.7415866954 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_64');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1156148791, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1156148791, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-13.4551122629, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-81.2513438231, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-0.6022055386, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1156148791, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-60.2764042364, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0117599239, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-19.5621840220, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1156148791, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-68.4019292729, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetAcceleration_65" Id="{341707da-2bf5-4401-8262-0a91445c8fec}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_65
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -91.9764067213, 67.8870229314, -6.0204287915 ],
    CurrentVelocity := [ 77.5152165649, -579.8104041663, -522.2305041915 ],
    CurrentAcceleration := [ -4555.8713721834, 3065.8456531824, -6033.2704860288 ],
    TargetPosition := [ 81.1369254593, 57.7350579458, 72.5679486345 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 185.8042260861, 230.0047242168, -966.3178612310 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_65');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2148607432, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.2143962326, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(81.1369321411, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-91.9764067213, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(67.8870229314, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0443168831, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(54.3962830350, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2148607432, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(72.5679486345, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0325415881, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-21.6144427960, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_66" Id="{b7e309cd-007f-4721-824d-4c6dc52c4cba}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_66
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -95.7637063839, -64.0003604654, 48.4213794677 ],
    CurrentVelocity := [ 780.2757722056, 427.7512480688, 144.8807781453 ],
    CurrentAcceleration := [ -123.9106121296, 5548.6682226774, -4348.8697034359 ],
    TargetPosition := [ -6.2023987969, -63.9749750414, -67.0796729315 ],
    TargetVelocity := [ 905.8821368781, -10.6328247215, -27.0757179462 ],
    TargetAcceleration := [ 929.7443642487, -818.3641520564, 859.6346164431 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_66');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1799660396, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1799660396, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-6.2023987969, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-95.7637063839, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0432174809, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-50.8226334684, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-64.0003604654, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0143566638, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(49.6586555416, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1799660396, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-67.0796729315, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_67" Id="{01466dc2-7255-494e-89b2-b8ae1a146580}">
      <Declaration><![CDATA[METHOD Test_Trajectory_67
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 34.2875351531, 99.4764630527, -31.7787308695 ],
    CurrentVelocity := [ -300.4105280893, -427.5720595127, -171.3853987811 ],
    CurrentAcceleration := [ 6664.0597145487, -1374.5106392745, -4504.9803140386 ],
    TargetPosition := [ -0.8871220609, 71.6719386976, 88.2184526023 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_67');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1993858448, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(34.2875351531, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1993858448, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-0.8871220609, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(99.4764630527, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1993858445, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(71.6719386976, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1993858448, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(88.2184526023, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0270828966, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-35.4238608501, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_68" Id="{11e8cf98-bfdb-4ca8-b3f7-a1b902d0f68b}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_68
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 59.2517364308, -85.1126954090, -57.0336359499 ],
    CurrentVelocity := [ -329.5523995135, -470.4338311835, 257.0766685994 ],
    CurrentAcceleration := [ -6100.6100671412, 2099.3226754925, -5253.3259688651 ],
    TargetPosition := [ 54.5051428652, 67.3531346810, -76.2413279170 ],
    TargetVelocity := [ -402.6580627808, -686.9442161690, -471.7465782376 ],
    TargetAcceleration := [ 643.4231924464, -451.5407789580, 767.2753376869 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_68');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2726281311, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.2366269099, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(63.5290144271, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0401888955, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(49.5109836158, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.2481925571, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(82.0588154104, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0223758467, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-93.6197603798, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0225426117, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-53.9070742600, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2726281311, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-76.2413279170, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_69" Id="{574e246c-9df9-44c0-973c-93968409bfe3}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_69
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -92.0715668384, -30.0799385017, -80.1923287712 ],
    CurrentVelocity := [ -771.6336959874, -52.3346331169, -620.3800706643 ],
    CurrentAcceleration := [ -4256.2449411265, 2117.9312829409, -7174.1236478465 ],
    TargetPosition := [ -49.2372586125, 64.9678362408, -1.4548807698 ],
    TargetVelocity := [ -253.2454725538, -251.0422970431, 445.9912841304 ],
    TargetAcceleration := [ -390.6304760107, -325.4712596405, 594.0432630459 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_69');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2080310795, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1835193676, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-45.1107586741, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0303203062, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-113.7076186058, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1834379186, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(69.0600637410, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0090933433, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-30.3680147931, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2080310795, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-1.4548807698, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0339676546, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-100.1783511963, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_70" Id="{fa1ae222-ee83-4e07-ab02-0cce318213c1}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_70
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 64.3283932807, 72.7311126680, -98.8051202204 ],
    CurrentVelocity := [ 92.5664773104, -573.3929915847, 399.4504315927 ],
    CurrentAcceleration := [ -3856.2273947813, -3381.2329857191, -2002.5280519408 ],
    TargetPosition := [ 61.0686945588, -64.1503052380, 56.3612799697 ],
    TargetVelocity := [ -978.3401642152, -192.7238990756, -271.1097347792 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_70');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2009331109, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1381126724, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(96.6861540333, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2009331109, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(61.0686945588, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(72.7311126680, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2009331109, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-64.1503052380, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1759331109, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(61.0556900059, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-98.8051202204, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetAcceleration_71" Id="{1c5263ad-f34b-4edd-9467-0bb374c49b95}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_71
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -59.2924595596, -78.0958770406, -16.7114117546 ],
    CurrentVelocity := [ 546.9975908558, 426.7488746319, 612.6654156657 ],
    CurrentAcceleration := [ 9205.6646800757, -9227.6643458911, -3245.6094739673 ],
    TargetPosition := [ 44.7760316693, 44.6632774330, 81.9030399911 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ -405.0372689788, 34.7152036765, 909.7051048469 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_71');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1729434446, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1729434446, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(44.7760316693, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-59.2924595596, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1728566566, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(44.6632774766, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-78.0958770406, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1706691819, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(81.9038241980, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-16.7114117546, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetAcceleration_72" Id="{92614780-6978-4c5a-98ec-c9199c9b4dc1}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_72
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 50.7832415090, 16.4428025338, -62.1387960459 ],
    CurrentVelocity := [ 692.8450444842, 175.2499820199, -666.8105946754 ],
    CurrentAcceleration := [ 6470.0699021620, -7177.5724916510, -5135.1354191318 ],
    TargetPosition := [ 77.4320332284, -23.0360380294, 21.1542103436 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 721.7152773894, -421.5950789019, -999.6585220220 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_72');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2133546605, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0653263039, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(78.3746715082, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(50.7832415090, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0138012889, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(17.8273942481, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2123006728, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-23.0361160871, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.2133546605, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(21.1542103436, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0314189193, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-81.4884830520, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetAcceleration_73" Id="{fdd50311-c9f0-475a-b120-aed1bfbd3b69}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetAcceleration_73
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 54.5813213440, 9.8807517250, -93.5100387934 ],
    CurrentVelocity := [ -91.8746689800, 115.1036247697, -407.6414619596 ],
    CurrentAcceleration := [ 8823.9973653645, -1770.3769477150, 7817.8609209614 ],
    TargetPosition := [ -16.4453223429, -28.0681016923, -24.6585080376 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 574.3291922545, -266.0340041739, -740.9375104064 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetAcceleration_73');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1617430296, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(54.5813213440, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1617430296, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-16.4453223429, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0148942292, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(10.9582154023, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1610779445, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-28.0681213052, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1617430296, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-24.6585080376, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0152276738, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-98.3402559794, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_74" Id="{b6f616a5-9c0f-42b8-9edf-7873358a3283}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_74
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -3.8537747136, 29.7662406283, 51.6714200863 ],
    CurrentVelocity := [ -174.0613621822, -193.1428983030, -792.5846171268 ],
    CurrentAcceleration := [ 7503.9299110048, -9932.3645836832, 820.8893995138 ],
    TargetPosition := [ -67.4868271747, 58.7572998703, -35.8123465528 ],
    TargetVelocity := [ 720.7569207862, 595.3814225976, -249.3479600593 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_74');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1946905227, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-3.8537747136, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1696905227, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-83.4224168610, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1946905227, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(58.7572998703, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0378398718, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(22.5683293035, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(51.6714200863, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1946905227, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-35.8123465528, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_75" Id="{0847b5c4-8650-44c8-bc05-a7652c5d7fbd}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_75
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 7.7904719379, -80.3901269413, 63.5259907352 ],
    CurrentVelocity := [ 932.0566192862, 419.0094417556, 818.0327895875 ],
    CurrentAcceleration := [ -1734.8136850217, -7271.6264048526, -8084.0639439415 ],
    TargetPosition := [ -13.0875435804, -27.3761130296, 34.5353867719 ],
    TargetVelocity := [ -609.5048530047, 850.6956342521, 41.4505776192 ],
    TargetAcceleration := [ -261.8071845931, -720.8677444298, -987.7577698199 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_75');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1644950353, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0722475880, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(36.4096968955, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1644950353, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-13.0875435804, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1644950353, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-27.3761130296, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-80.3901269413, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0719980660, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(76.5343028350, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.1530060258, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(34.1961724845, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_76" Id="{f3c011a2-cd6c-4dbf-a05a-6bfd0dedf8c1}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_76
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 9.7706595421, -12.1959892578, 46.3212617522 ],
    CurrentVelocity := [ 748.5697213762, -559.6967882429, -134.7309523881 ],
    CurrentAcceleration := [ -2387.6658303908, -2526.3991051978, 6017.1396905312 ],
    TargetPosition := [ 15.3167083412, -56.8887538790, 82.6421197882 ],
    TargetVelocity := [ 671.6528869920, 21.0536316675, -879.1137869826 ],
    TargetAcceleration := [ -166.9032263785, 450.7650126931, 803.9287998287 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_76');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1904285886, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0591631552, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(29.1029430043, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1320953478, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-2.5271103374, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-12.1959892578, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1837152624, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-56.9795945737, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.1644236776, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(103.4304313200, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0123128692, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(45.3673518561, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_77" Id="{4188460a-9b9d-4a71-8af3-d46b565b206c}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_HasTargetAcceleration_77
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 24.8839173173, 85.7060220409, 8.2358271411 ],
    CurrentVelocity := [ 629.5994952556, -855.0049871307, -708.7763504504 ],
    CurrentAcceleration := [ -7654.4470124818, 339.8154131846, 940.9849566091 ],
    TargetPosition := [ -57.6690065907, -99.8582874295, -78.5044749117 ],
    TargetVelocity := [ 591.0894229109, -572.2197361588, -294.1767168838 ],
    TargetAcceleration := [ -864.5615369063, 543.3446728301, 776.1064430597 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_HasTargetAcceleration_77');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2314713039, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0154319412, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(33.1984214179, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.2053906019, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-71.0137160500, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(85.7060220409, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.2314713039, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-99.8582874295, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(8.2358271411, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2314713039, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-78.5044749117, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_79" Id="{85607be4-2a41-4f2c-8d33-4f8a67f9b3a1}">
      <Declaration><![CDATA[METHOD Test_Trajectory_79
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ 92.6276445589, -31.4858230526, -99.7822778581 ],
    CurrentVelocity := [ -720.7159268794, 892.2411978041, 674.6772790631 ],
    CurrentAcceleration := [ -2825.8926417675, -1574.1808249545, -8009.7375391121 ],
    TargetPosition := [ -69.7885476013, 26.0269800339, -91.9736304561 ],
    TargetVelocity := [ 0.0000000000, 0.0000000000, 0.0000000000 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_79');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.1711188526, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(92.6276445589, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.1711188526, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-69.7885476013, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.1711188526, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(26.0269800339, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-31.4858230526, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0417034368, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-85.4337513286, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0000000000, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-99.7822778581, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>

    <Method Name="Test_Trajectory_HasTargetVelocity_80" Id="{1629f4a8-8925-4359-a35e-01c5df23e551}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasTargetVelocity_80
VAR_INST
  ruckig : Struckig.Ruckig(0.001);
  input : Struckig.InputParameter(3) := (
    Synchronization := SynchronizationType.TimeSync,        
    MaxVelocity := [ 2000.0000000000, 2000.0000000000, 2000.0000000000 ],
    MaxAcceleration := [ 20000.0000000000, 20000.0000000000, 20000.0000000000 ],
    MaxJerk := [ 800000.0000000000, 800000.0000000000, 800000.0000000000 ],
    CurrentPosition := [ -51.6641955162, 57.5719716925, 15.9716309667 ],
    CurrentVelocity := [ -741.4792616738, 60.5572642254, 212.3300414714 ],
    CurrentAcceleration := [ 7388.8177451279, 9631.2337665940, -9146.5224209632 ],
    TargetPosition := [ -5.2535982458, 20.5101049061, -7.0209493300 ],
    TargetVelocity := [ -589.1160879016, 620.6088235408, -66.8680469572 ],
    TargetAcceleration := [ 0.0000000000, 0.0000000000, 0.0000000000 ]
  );
  output : Struckig.OutputParameter;
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasTargetVelocity_80');

ruckig.update(input, output);

// Check total duration of profiles
AssertEquals_LREAL(Expected := 0.2130358729, Actual := output.Trajectory.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := output.trajectory.profiles[0].positionExtrema();
AssertEquals_LREAL(0.1880358729, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(7.3909706184, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0157639778, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-61.9124670442, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := output.trajectory.profiles[1].positionExtrema();
AssertEquals_LREAL(0.0292533298, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(60.1266392171, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.1567487644, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(5.2717707510, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := output.trajectory.profiles[2].positionExtrema();
AssertEquals_LREAL(0.0149359773, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(17.6970240278, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.2130358729, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-7.0209493300, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    
  </POU>
</TcPlcObject>
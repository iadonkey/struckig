<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="MinDurationTest" Id="{ca9b5d56-8561-4a49-8e91-3b4374d172fa}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK MinDurationTest EXTENDS TcUnit.FB_TestSuite]]></Declaration>
    <Implementation>
      <ST><![CDATA[Test_Trajectory_HasMinDuration_HasTargetAcceleration_1();
Test_Trajectory_HasMinDuration_HasTargetAcceleration_2();
Test_Trajectory_HasMinDuration_HasTargetAcceleration_3();
Test_Trajectory_HasMinDuration_HasTargetAcceleration_4();
Test_Trajectory_HasMinDuration_HasTargetVelocity_5();
Test_Trajectory_HasMinDuration_HasTargetAcceleration_6();
Test_Trajectory_HasMinDuration_7();
Test_Trajectory_HasMinDuration_8();
Test_Trajectory_HasMinDuration_HasTargetVelocity_9();
Test_Trajectory_HasMinDuration_HasTargetVelocity_HasTargetAcceleration_10();
Test_Trajectory_HasMinDuration_HasTargetAcceleration_11();
Test_Trajectory_HasMinDuration_HasTargetVelocity_HasTargetAcceleration_12();
Test_Trajectory_HasMinDuration_13();
Test_Trajectory_HasMinDuration_14();
Test_Trajectory_HasMinDuration_HasTargetVelocity_HasTargetAcceleration_15();
Test_Trajectory_HasMinDuration_HasTargetVelocity_16();
Test_Trajectory_HasMinDuration_HasTargetAcceleration_17();
Test_Trajectory_HasMinDuration_HasTargetVelocity_HasTargetAcceleration_18();
Test_Trajectory_HasMinDuration_19();
Test_Trajectory_HasMinDuration_HasTargetVelocity_HasTargetAcceleration_20();
]]></ST>
    </Implementation>
    <Method Name="Test_Trajectory_HasMinDuration_13" Id="{28d86ea9-80e3-414e-bacd-18c5f15bb4fe}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasMinDuration_13
VAR_INST
  ruckig : Struckig.Struckig(0.001, 3) := (
  
    Synchronization := SynchronizationType.TimeSync,
    MinDuration := 8.0,
    MaxVelocity := [ 2000.0, 2000.0, 2000.0 ],
    MaxAcceleration := [ 20000.0, 20000.0, 20000.0 ],
    MaxJerk := [ 800000.0, 800000.0, 800000.0 ],
    CurrentPosition := [ 1.1694773064989192, -79.79875434933777, -86.29153082024368 ],
    CurrentVelocity := [ 876.2379533240828, 909.0293542700074, 204.90724883608482 ],
    CurrentAcceleration := [ -68.09095586171134, 4894.443101566274, 4257.694972396241 ],
    TargetPosition := [ -34.92331212819428, 11.554557728133503, 4.460284190197925 ],
    TargetVelocity := [ 0.0, 0.0, 0.0 ],
    TargetAcceleration := [ 0.0, 0.0, 0.0 ]
  );
  
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasMinDuration_13');

ruckig();

// Check total duration of profiles
AssertEquals_LREAL(Expected := 8.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check minimum duration
AssertEquals_LREAL(Expected := 8.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := ruckig._profiles[0].positionExtrema();
AssertEquals_LREAL(0.06457933411638962, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(31.162316883962312, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(7.999999999999999, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-34.92331212819428, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := ruckig._profiles[1].positionExtrema();
AssertEquals_LREAL(8.0, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(11.554557728133503, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-79.79875434933777, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := ruckig._profiles[2].positionExtrema();
AssertEquals_LREAL(8.0, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(4.460284190197925, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-86.29153082024368, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasMinDuration_14" Id="{94699194-d336-4f33-9f9c-639bf9f95dfd}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasMinDuration_14
VAR_INST
  ruckig : Struckig.Otg(0.001, 3) := (
  
    Synchronization := SynchronizationType.TimeSync,
    MinDuration := 7.0,
    MaxVelocity := [ 2000.0, 2000.0, 2000.0 ],
    MaxAcceleration := [ 20000.0, 20000.0, 20000.0 ],
    MaxJerk := [ 800000.0, 800000.0, 800000.0 ],
    CurrentPosition := [ 9.590430768397383, 39.54262361303532, 47.91880435556814 ],
    CurrentVelocity := [ -279.73110233883074, -397.2798941946028, -792.783818655297 ],
    CurrentAcceleration := [ 9419.249088701486, -5244.89074121808, -9282.308244489752 ],
    TargetPosition := [ 70.18041902211951, 76.40810294125586, -12.064967166259137 ],
    TargetVelocity := [ 0.0, 0.0, 0.0 ],
    TargetAcceleration := [ 0.0, 0.0, 0.0 ]
  );
  
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasMinDuration_14');

ruckig();

// Check total duration of profiles
AssertEquals_LREAL(Expected := 7.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check minimum duration
AssertEquals_LREAL(Expected := 7.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := ruckig._profiles[0].positionExtrema();
AssertEquals_LREAL(7.0, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(70.18041902211951, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.024939596648417404, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(6.5259576965994945, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := ruckig._profiles[1].positionExtrema();
AssertEquals_LREAL(6.999999999999999, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(76.40810294125586, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0482688279337284, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(27.490923337843135, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := ruckig._profiles[2].positionExtrema();
AssertEquals_LREAL(0.0, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(47.91880435556814, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(7.0, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-12.064967166259137, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasMinDuration_19" Id="{d57decd4-f0e9-4a01-8208-2097f96a7aa8}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasMinDuration_19
VAR_INST
  ruckig : Struckig.Struckig(0.001, 3) := (
  
    Synchronization := SynchronizationType.TimeSync,
    MinDuration := 3.0,
    MaxVelocity := [ 2000.0, 2000.0, 2000.0 ],
    MaxAcceleration := [ 20000.0, 20000.0, 20000.0 ],
    MaxJerk := [ 800000.0, 800000.0, 800000.0 ],
    CurrentPosition := [ 19.6107174579693, -14.671676826720102, -83.4266917323848 ],
    CurrentVelocity := [ -926.4357934162077, 856.3688940409422, -76.05611387446447 ],
    CurrentAcceleration := [ 8950.685844022108, -6737.3624163819, 7093.876397069776 ],
    TargetPosition := [ 45.75525505687679, -17.630601082354573, 68.42483173219557 ],
    TargetVelocity := [ 0.0, 0.0, 0.0 ],
    TargetAcceleration := [ 0.0, 0.0, 0.0 ]
  );
  
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasMinDuration_19');

ruckig();

// Check total duration of profiles
AssertEquals_LREAL(Expected := 3.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check minimum duration
AssertEquals_LREAL(Expected := 3.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := ruckig._profiles[0].positionExtrema();
AssertEquals_LREAL(3.0, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(45.75525505687679, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.05690150806828992, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-5.546975088681035, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := ruckig._profiles[1].positionExtrema();
AssertEquals_LREAL(0.05654489225740592, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(8.500086769282458, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(2.9999999999999996, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-17.630601082354573, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := ruckig._profiles[2].positionExtrema();
AssertEquals_LREAL(3.0, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(68.42483173219557, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.007991851854731072, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-83.74565322946518, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasMinDuration_7" Id="{a5041c91-ab6b-46ef-b79d-bda55e55eeca}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasMinDuration_7
VAR_INST
  ruckig : Struckig.Otg(0.001, 3) := (
  
    Synchronization := SynchronizationType.TimeSync,
    MinDuration := 3.0,
    MaxVelocity := [ 2000.0, 2000.0, 2000.0 ],
    MaxAcceleration := [ 20000.0, 20000.0, 20000.0 ],
    MaxJerk := [ 800000.0, 800000.0, 800000.0 ],
    CurrentPosition := [ -29.448435809827217, 90.57043249467455, -42.4422398449114 ],
    CurrentVelocity := [ -441.1423852905707, 792.9273075694584, 308.64691156030153 ],
    CurrentAcceleration := [ -114.57718650638526, -7587.445490507809, 1437.7422990266587 ],
    TargetPosition := [ -44.03078989692402, 83.77708613438409, -82.0575436244257 ],
    TargetVelocity := [ 0.0, 0.0, 0.0 ],
    TargetAcceleration := [ 0.0, 0.0, 0.0 ]
  );
  
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasMinDuration_7');

ruckig();

// Check total duration of profiles
AssertEquals_LREAL(Expected := 3.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check minimum duration
AssertEquals_LREAL(Expected := 3.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := ruckig._profiles[0].positionExtrema();
AssertEquals_LREAL(0.0, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-29.448435809827217, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(3.0, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-44.03078989692402, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := ruckig._profiles[1].positionExtrema();
AssertEquals_LREAL(0.05266649608484671, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(110.27502355296447, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(3.0, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(83.77708613438409, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := ruckig._profiles[2].positionExtrema();
AssertEquals_LREAL(0.03589522362162333, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-35.88360266407321, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(3.0000000000000004, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-82.0575436244257, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasMinDuration_8" Id="{f27518d5-3a55-42b1-9a4a-2570daffdc5a}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasMinDuration_8
VAR_INST
  ruckig : Struckig.Otg(0.001, 3) := (
  
    Synchronization := SynchronizationType.TimeSync,
    MinDuration := 7.0,
    MaxVelocity := [ 2000.0, 2000.0, 2000.0 ],
    MaxAcceleration := [ 20000.0, 20000.0, 20000.0 ],
    MaxJerk := [ 800000.0, 800000.0, 800000.0 ],
    CurrentPosition := [ -99.24620189721642, 98.804478840699, -87.42756778236038 ],
    CurrentVelocity := [ -829.4036440965908, 623.2680808978928, 45.75080930558306 ],
    CurrentAcceleration := [ -7246.76941372717, 1502.5540766079612, -230.12493771912523 ],
    TargetPosition := [ -96.24866507944863, -68.29579645255217, 3.1547755930834427 ],
    TargetVelocity := [ 0.0, 0.0, 0.0 ],
    TargetAcceleration := [ 0.0, 0.0, 0.0 ]
  );
  
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasMinDuration_8');

ruckig();

// Check total duration of profiles
AssertEquals_LREAL(Expected := 7.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check minimum duration
AssertEquals_LREAL(Expected := 7.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := ruckig._profiles[0].positionExtrema();
AssertEquals_LREAL(6.999999999999999, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(-96.24866507944863, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.07365733450421347, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-136.26275842325944, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := ruckig._profiles[1].positionExtrema();
AssertEquals_LREAL(0.05127223962572218, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(117.33454096897361, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(7.000000000000001, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-68.29579645255217, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := ruckig._profiles[2].positionExtrema();
AssertEquals_LREAL(7.000000000000001, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(3.1547755930834427, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-87.42756778236038, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasMinDuration_HasTargetAcceleration_1" Id="{10cc6401-0a0e-4275-85f9-198404a8b37f}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasMinDuration_HasTargetAcceleration_1
VAR_INST
  ruckig : Struckig.Otg(0.001, 3) := (
    Synchronization := SynchronizationType.TimeSync,
    MinDuration := 8.0,
    MaxVelocity := [ 2000.0, 2000.0, 2000.0 ],
    MaxAcceleration := [ 20000.0, 20000.0, 20000.0 ],
    MaxJerk := [ 800000.0, 800000.0, 800000.0 ],
    CurrentPosition := [ -19.81606164381961, 13.781968848302611, 8.093103744301672 ],
    CurrentVelocity := [ 726.8874662814426, 243.71684078988915, 635.9493654202183 ],
    CurrentAcceleration := [ 3652.605974217926, 644.8054101513426, -2503.0584587977 ],
    TargetPosition := [ -37.94747764035489, 31.097009748141545, 51.041074550360605 ],
    TargetVelocity := [ 0.0, 0.0, 0.0 ],
    TargetAcceleration := [ -885.392846257796, -430.70238502743985, -347.6934578997044 ]
  );
  
  positionExtrema : Struckig.PositionExtremaDesc;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasMinDuration_HasTargetAcceleration_1');

ruckig();

// Check total duration of profiles
AssertEquals_LREAL(Expected := 8.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check minimum duration
AssertEquals_LREAL(Expected := 8.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := ruckig._profiles[0].positionExtrema();
AssertEquals_LREAL(0.06287595543262448, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(6.175884472766756, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(7.9977865178843555, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-37.94820063785038, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := ruckig._profiles[1].positionExtrema();
AssertEquals_LREAL(7.999999999999999, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(31.097009748141545, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(13.781968848302611, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := ruckig._profiles[2].positionExtrema();
AssertEquals_LREAL(8.0, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(51.041074550360605, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(8.093103744301672, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasMinDuration_HasTargetAcceleration_11" Id="{89100ce4-a2c3-4f6d-a2d9-5d5f81e7407a}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasMinDuration_HasTargetAcceleration_11
VAR_INST
  ruckig : Struckig.Otg(0.001, 3) := (
  
    Synchronization := SynchronizationType.TimeSync,
    MinDuration := 1.0,
    MaxVelocity := [ 2000.0, 2000.0, 2000.0 ],
    MaxAcceleration := [ 20000.0, 20000.0, 20000.0 ],
    MaxJerk := [ 800000.0, 800000.0, 800000.0 ],
    CurrentPosition := [ -7.070165280610553, -80.38372522590178, -46.89812209342119 ],
    CurrentVelocity := [ 839.4919555565891, -203.32957691775698, 521.9568411481566 ],
    CurrentAcceleration := [ 3262.1046041862974, -1428.6156287598897, 5033.848829385297 ],
    TargetPosition := [ 39.58959333241566, -77.56627414027115, -4.797228333391573 ],
    TargetVelocity := [ 0.0, 0.0, 0.0 ],
    TargetAcceleration := [ -610.5754269308525, -729.7372379589295, -407.1344521857434 ]
  );
  
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasMinDuration_HasTargetAcceleration_11');

ruckig();

// Check total duration of profiles
AssertEquals_LREAL(Expected := 1.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check minimum duration
AssertEquals_LREAL(Expected := 1.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := ruckig._profiles[0].positionExtrema();
AssertEquals_LREAL(1.0, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(39.58959333241566, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-7.070165280610553, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := ruckig._profiles[1].positionExtrema();
AssertEquals_LREAL(1.0, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-77.56627414027115, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.030210863301643, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-83.98327189159232, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := ruckig._profiles[2].positionExtrema();
AssertEquals_LREAL(1.0000000000000002, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-4.797228333391573, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-46.89812209342119, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasMinDuration_HasTargetAcceleration_17" Id="{4a85467d-5048-4b59-80ff-39a2f6ec0c8d}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasMinDuration_HasTargetAcceleration_17
VAR_INST
  ruckig : Struckig.Otg(0.001, 3) := (
  
    Synchronization := SynchronizationType.TimeSync,
    MinDuration := 10.0,
    MaxVelocity := [ 2000.0, 2000.0, 2000.0 ],
    MaxAcceleration := [ 20000.0, 20000.0, 20000.0 ],
    MaxJerk := [ 800000.0, 800000.0, 800000.0 ],
    CurrentPosition := [ 41.06103962416182, -31.80504488955978, 63.99589133347962 ],
    CurrentVelocity := [ -749.439069786537, -605.1709178805476, -675.8190572055869 ],
    CurrentAcceleration := [ 4505.221832985957, 2158.0191432223, -7626.549080643861 ],
    TargetPosition := [ -49.277633620043005, -77.94196192090983, 7.643571349353522 ],
    TargetVelocity := [ 0.0, 0.0, 0.0 ],
    TargetAcceleration := [ -613.4884636354268, -619.351295536964, -177.16987102998473 ]
  );
  
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasMinDuration_HasTargetAcceleration_17');

ruckig();

// Check total duration of profiles
AssertEquals_LREAL(Expected := 10.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check minimum duration
AssertEquals_LREAL(Expected := 10.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := ruckig._profiles[0].positionExtrema();
AssertEquals_LREAL(0.0, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(41.06103962416182, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(9.998466278840914, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-49.27787413825579, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := ruckig._profiles[1].positionExtrema();
AssertEquals_LREAL(0.0, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-31.80504488955978, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(9.99845162176116, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-77.94220940080136, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := ruckig._profiles[2].positionExtrema();
AssertEquals_LREAL(0.0, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(63.99589133347962, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(9.999557075322427, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(7.643565556420371, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasMinDuration_HasTargetAcceleration_2" Id="{341eba0c-a113-4eed-abf5-c4e1e31450b5}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasMinDuration_HasTargetAcceleration_2
VAR_INST
  ruckig : Struckig.Otg(0.001, 3) := (
  
    Synchronization := SynchronizationType.TimeSync,
    MinDuration := 9.0,
    MaxVelocity := [ 2000.0, 2000.0, 2000.0 ],
    MaxAcceleration := [ 20000.0, 20000.0, 20000.0 ],
    MaxJerk := [ 800000.0, 800000.0, 800000.0 ],
    CurrentPosition := [ 66.72445317186691, -7.406214437890085, 70.46458426730621 ],
    CurrentVelocity := [ 342.4260974225069, 430.1494125839465, -220.57495791564202 ],
    CurrentAcceleration := [ -4058.8697131936115, -937.4004804082579, -453.3153688510465 ],
    TargetPosition := [ 81.54050823089204, 50.65362401587811, 41.70097854809535 ],
    TargetVelocity := [ 0.0, 0.0, 0.0 ],
    TargetAcceleration := [ -58.178994858405304, 929.3098774625403, 47.05996186659536 ]
  );
  
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasMinDuration_HasTargetAcceleration_2');

ruckig();

// Check total duration of profiles
AssertEquals_LREAL(Expected := 9.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check minimum duration
AssertEquals_LREAL(Expected := ruckig.MinDuration, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := ruckig._profiles[0].positionExtrema();
AssertEquals_LREAL(8.999999999999998, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(81.54050823089204, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(66.72445317186691, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := ruckig._profiles[1].positionExtrema();
AssertEquals_LREAL(8.997676725306345, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(50.65446002386552, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-7.406214437890085, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := ruckig._profiles[2].positionExtrema();
AssertEquals_LREAL(0.0, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(70.46458426730621, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(9.0, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(41.70097854809503, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasMinDuration_HasTargetAcceleration_3" Id="{7c6d4a86-19bc-408a-ab21-a87d335d88c3}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasMinDuration_HasTargetAcceleration_3
VAR_INST
  ruckig : Struckig.Otg(0.001, 3) := (
  
    Synchronization := SynchronizationType.TimeSync,
    MinDuration := 7.0,
    MaxVelocity := [ 2000.0, 2000.0, 2000.0 ],
    MaxAcceleration := [ 20000.0, 20000.0, 20000.0 ],
    MaxJerk := [ 800000.0, 800000.0, 800000.0 ],
    CurrentPosition := [ 92.93281918195305, -37.057893567967405, -56.41888208246879 ],
    CurrentVelocity := [ 919.2036906054796, -544.1333420501469, 731.0755464554313 ],
    CurrentAcceleration := [ -7047.99292674085, 7580.284725007419, -3564.1022106007276 ],
    TargetPosition := [ -46.16949731931599, 10.423824279825439, 25.094577416282803 ],
    TargetVelocity := [ 0.0, 0.0, 0.0 ],
    TargetAcceleration := [ -597.0749810615916, 575.2171643962115, 815.8548576022943 ]
  );
  
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasMinDuration_HasTargetAcceleration_3');

ruckig();

// Check total duration of profiles
AssertEquals_LREAL(Expected := 7.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check minimum duration
AssertEquals_LREAL(Expected := 7.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := ruckig._profiles[0].positionExtrema();
AssertEquals_LREAL(0.05717797410396826, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(118.91548267627095, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(6.998507312547345, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-46.169719044685195, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := ruckig._profiles[1].positionExtrema();
AssertEquals_LREAL(6.99856195708901, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(10.424022534884019, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0403879580291395, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-47.256877517684565, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := ruckig._profiles[2].positionExtrema();
AssertEquals_LREAL(6.997960362855993, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(25.095143091923283, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-56.41888208246879, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasMinDuration_HasTargetAcceleration_4" Id="{316b5cc9-77f5-4523-ac2f-248b3b9c4067}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasMinDuration_HasTargetAcceleration_4
VAR_INST
  ruckig : Struckig.Otg(0.001, 3) := (
  
    Synchronization := SynchronizationType.TimeSync,
    MinDuration := 3.0,
    MaxVelocity := [ 2000.0, 2000.0, 2000.0 ],
    MaxAcceleration := [ 20000.0, 20000.0, 20000.0 ],
    MaxJerk := [ 800000.0, 800000.0, 800000.0 ],
    CurrentPosition := [ -0.660339003647124, -95.83458227326918, -56.22509427236879 ],
    CurrentVelocity := [ -379.1557497186742, 437.2615639977953, 470.58690692947357 ],
    CurrentAcceleration := [ 7762.154315281241, -3727.206686180866, 7593.740905155453 ],
    TargetPosition := [ 84.07152685095582, 75.93155527258662, 84.6954649863176 ],
    TargetVelocity := [ 0.0, 0.0, 0.0 ],
    TargetAcceleration := [ -770.0559965976834, 741.3940743654641, -31.453470585175637 ]
  );
  
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasMinDuration_HasTargetAcceleration_4');

ruckig();

// Check total duration of profiles
AssertEquals_LREAL(Expected := 3.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check minimum duration
AssertEquals_LREAL(Expected := 3.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := ruckig._profiles[0].positionExtrema();
AssertEquals_LREAL(2.9999999999999996, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(84.07152685095582, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.028865029140955737, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-6.050680420215579, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := ruckig._profiles[1].positionExtrema();
AssertEquals_LREAL(2.9981465148140867, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(75.93197977102668, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-95.83458227326918, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := ruckig._profiles[2].positionExtrema();
AssertEquals_LREAL(2.9999999999999987, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(84.69546498631772, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-56.22509427236879, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasMinDuration_HasTargetAcceleration_6" Id="{1ea6c1fe-3b92-4bd9-930a-c673722e6749}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasMinDuration_HasTargetAcceleration_6
VAR_INST
  ruckig : Struckig.Struckig(0.001, 3) := (
  
    Synchronization := SynchronizationType.TimeSync,
    MinDuration := 10.0,
    MaxVelocity := [ 2000.0, 2000.0, 2000.0 ],
    MaxAcceleration := [ 20000.0, 20000.0, 20000.0 ],
    MaxJerk := [ 800000.0, 800000.0, 800000.0 ],
    CurrentPosition := [ 73.95774355738217, 67.34262397589043, 23.586005113842518 ],
    CurrentVelocity := [ -698.8785963385769, -727.2426189740956, 561.2286861746936 ],
    CurrentAcceleration := [ 5180.079571404243, -9987.23908551058, 8369.828846550932 ],
    TargetPosition := [ 26.101611930284065, -62.69432172088365, -69.25146432081932 ],
    TargetVelocity := [ 0.0, 0.0, 0.0 ],
    TargetAcceleration := [ -131.90971166520217, -629.8496867961894, -805.129073987833 ]
  );
  
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasMinDuration_HasTargetAcceleration_6');

ruckig();

// Check total duration of profiles
AssertEquals_LREAL(Expected := 10.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check minimum duration
AssertEquals_LREAL(Expected := 10.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := ruckig._profiles[0].positionExtrema();
AssertEquals_LREAL(0.0, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(73.95774355738217, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(9.999670225720838, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(26.101609539396815, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := ruckig._profiles[1].positionExtrema();
AssertEquals_LREAL(0.0, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(67.34262397589043, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(9.99842537578301, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-62.69458200011703, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := ruckig._profiles[2].positionExtrema();
AssertEquals_LREAL(0.06090028897692612, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(46.36974939931049, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(9.99798717731503, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-69.25200797820925, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasMinDuration_HasTargetVelocity_16" Id="{4eff1a4d-5610-42e4-96a4-c760e07db197}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasMinDuration_HasTargetVelocity_16
VAR_INST
  ruckig : Struckig.Otg(0.001, 3) := (
  
    Synchronization := SynchronizationType.TimeSync,
    MinDuration := 7.0,
    MaxVelocity := [ 2000.0, 2000.0, 2000.0 ],
    MaxAcceleration := [ 20000.0, 20000.0, 20000.0 ],
    MaxJerk := [ 800000.0, 800000.0, 800000.0 ],
    CurrentPosition := [ 7.986268223464748, 30.66263768305589, -71.99998699577253 ],
    CurrentVelocity := [ -536.7319233815753, 166.5896044550318, 426.8037118862651 ],
    CurrentAcceleration := [ -3017.084283791076, -9424.883074091185, -1013.896197334474 ],
    TargetPosition := [ -34.478967783797216, 52.15227078186672, -24.73548276773934 ],
    TargetVelocity := [ -753.4402086481915, 518.6153002230694, -127.83329734668075 ],
    TargetAcceleration := [ 0.0, 0.0, 0.0 ]
  );
  
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasMinDuration_HasTargetVelocity_16');

ruckig();

// Check total duration of profiles
AssertEquals_LREAL(Expected := 7.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check minimum duration
AssertEquals_LREAL(Expected := 7.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := ruckig._profiles[0].positionExtrema();
AssertEquals_LREAL(0.0, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(7.986268223464748, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(7.000000000000001, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-34.478967783797216, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := ruckig._profiles[1].positionExtrema();
AssertEquals_LREAL(7.000000000000002, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(52.15227078186672, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(30.66263768305589, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := ruckig._profiles[2].positionExtrema();
AssertEquals_LREAL(6.97793366414829, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-23.14319435212213, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-71.99998699577253, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasMinDuration_HasTargetVelocity_5" Id="{3c7dad3f-b701-4ec3-a274-bf42231bcefa}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasMinDuration_HasTargetVelocity_5
VAR_INST
  ruckig : Struckig.Otg(0.001, 3) := (
  
    Synchronization := SynchronizationType.TimeSync,
    MinDuration := 4.0,
    MaxVelocity := [ 2000.0, 2000.0, 2000.0 ],
    MaxAcceleration := [ 20000.0, 20000.0, 20000.0 ],
    MaxJerk := [ 800000.0, 800000.0, 800000.0 ],
    CurrentPosition := [ -3.497413438880301, 31.363081204112206, 63.367720727687384 ],
    CurrentVelocity := [ 866.434234141054, -171.78552231675485, 58.6036663712207 ],
    CurrentAcceleration := [ -6318.744631550888, -7187.849982760071, -3339.305374801589 ],
    TargetPosition := [ 53.47504800393719, 97.23185262639063, -88.75469905530662 ],
    TargetVelocity := [ 726.8020091222686, 210.07958633863836, 83.97764431780661 ],
    TargetAcceleration := [ 0.0, 0.0, 0.0 ]
  );
  
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasMinDuration_HasTargetVelocity_5');

ruckig();

// Check total duration of profiles
AssertEquals_LREAL(Expected := 4.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check minimum duration
AssertEquals_LREAL(Expected := 4.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := ruckig._profiles[0].positionExtrema();
AssertEquals_LREAL(4.0, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(53.47504800393719, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-3.497413438880301, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := ruckig._profiles[1].positionExtrema();
AssertEquals_LREAL(3.9999999999999996, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(97.23185262639063, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.03570009228167893, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(26.442768005713322, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := ruckig._profiles[2].positionExtrema();
AssertEquals_LREAL(0.00882488089698622, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(63.66429252791513, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(3.98506688402464, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-89.5691863512788, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasMinDuration_HasTargetVelocity_9" Id="{97e9d1c0-4d13-4bc5-80f6-09a79d5e11a7}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasMinDuration_HasTargetVelocity_9
VAR_INST
  ruckig : Struckig.Otg(0.001, 3) := (
  
    Synchronization := SynchronizationType.TimeSync,
    MinDuration := 7.0,
    MaxVelocity := [ 2000.0, 2000.0, 2000.0 ],
    MaxAcceleration := [ 20000.0, 20000.0, 20000.0 ],
    MaxJerk := [ 800000.0, 800000.0, 800000.0 ],
    CurrentPosition := [ 32.77976315061471, 86.05945833221364, 34.11738301725197 ],
    CurrentVelocity := [ -981.2868512691955, 673.690792063916, -116.7982550185385 ],
    CurrentAcceleration := [ -4108.818774560344, 3339.252734800917, -7298.314365481016 ],
    TargetPosition := [ -55.314233526195245, 80.34443440826854, -61.91751423362351 ],
    TargetVelocity := [ 817.0398878216338, -103.40219473844786, -439.1476692838428 ],
    TargetAcceleration := [ 0.0, 0.0, 0.0 ]
  );
  
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasMinDuration_HasTargetVelocity_9');

ruckig();

// Check total duration of profiles
AssertEquals_LREAL(Expected := 7.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check minimum duration
AssertEquals_LREAL(Expected := 7.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := ruckig._profiles[0].positionExtrema();
AssertEquals_LREAL(0.0, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(32.77976315061471, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(6.938765999899139, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-82.11714814813035, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := ruckig._profiles[1].positionExtrema();
AssertEquals_LREAL(0.060258152451987596, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(108.93997970698679, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(7.0, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(80.34443440826854, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := ruckig._profiles[2].positionExtrema();
AssertEquals_LREAL(0.0, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(34.11738301725197, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(7.0, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-61.91751423362351, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasMinDuration_HasTargetVelocity_HasTargetAcceleration_10" Id="{058543e5-dca4-46ad-ac79-6d8496fa1017}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasMinDuration_HasTargetVelocity_HasTargetAcceleration_10
VAR_INST
  ruckig : Struckig.Otg(0.001, 3) := (
  
    Synchronization := SynchronizationType.TimeSync,
    MinDuration := 5.0,
    MaxVelocity := [ 2000.0, 2000.0, 2000.0 ],
    MaxAcceleration := [ 20000.0, 20000.0, 20000.0 ],
    MaxJerk := [ 800000.0, 800000.0, 800000.0 ],
    CurrentPosition := [ -63.70257714146867, 22.730031520740937, -51.56243568859453 ],
    CurrentVelocity := [ -520.8565160201103, 365.56449403589454, 835.823452928573 ],
    CurrentAcceleration := [ 9598.328373658613, -2893.4545241775922, 121.46690068480166 ],
    TargetPosition := [ 22.750797061424464, 74.13128623236747, 69.96760822932885 ],
    TargetVelocity := [ -174.7936793360849, -636.488954459087, -938.8757724326924 ],
    TargetAcceleration := [ 391.8907382899415, -699.6872603922127, 978.1856283310506 ]
  );
  
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasMinDuration_HasTargetVelocity_HasTargetAcceleration_10');

ruckig();

// Check total duration of profiles
AssertEquals_LREAL(Expected := 5.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check minimum duration
AssertEquals_LREAL(Expected := 5.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := ruckig._profiles[0].positionExtrema();
AssertEquals_LREAL(4.975346883096284, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(25.348702524320338, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(0.0358766442937755, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-72.4234881857976, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := ruckig._profiles[1].positionExtrema();
AssertEquals_LREAL(4.949024471203024, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(91.55742573849955, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.0, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(22.730031520740937, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := ruckig._profiles[2].positionExtrema();
AssertEquals_LREAL(4.933596685985829, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(104.72094552143355, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-51.56243568859453, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasMinDuration_HasTargetVelocity_HasTargetAcceleration_12" Id="{1b39d57a-b186-4c46-b718-c62410c3fdc5}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasMinDuration_HasTargetVelocity_HasTargetAcceleration_12
VAR_INST
  ruckig : Struckig.Otg(0.001, 3) := (
  
    Synchronization := SynchronizationType.TimeSync,
    MinDuration := 8.0,
    MaxVelocity := [ 2000.0, 2000.0, 2000.0 ],
    MaxAcceleration := [ 20000.0, 20000.0, 20000.0 ],
    MaxJerk := [ 800000.0, 800000.0, 800000.0 ],
    CurrentPosition := [ 34.32407664987838, -19.61426768221135, 0.08400152186804632 ],
    CurrentVelocity := [ -637.0909066222588, -315.93942928026286, -768.0946853095916 ],
    CurrentAcceleration := [ 5239.657334131169, -3857.903449466051, 5261.930344314516 ],
    TargetPosition := [ -0.6332298839860186, 7.05929814872006, 84.95032201129774 ],
    TargetVelocity := [ -688.3030057720259, 935.2283186121415, -773.3660434214753 ],
    TargetAcceleration := [ 75.12349151093213, -861.2904239623496, 251.41067093552897 ]
  );
  
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasMinDuration_HasTargetVelocity_HasTargetAcceleration_12');

ruckig();

// Check total duration of profiles
AssertEquals_LREAL(Expected := 8.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check minimum duration
AssertEquals_LREAL(Expected := 8.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := ruckig._profiles[0].positionExtrema();
AssertEquals_LREAL(0.0, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(34.32407664987838, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(8.0, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-0.6332298839860186, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := ruckig._profiles[1].positionExtrema();
AssertEquals_LREAL(8.0, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(7.05929814872006, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.04490272145795441, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-27.725399337897105, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := ruckig._profiles[2].positionExtrema();
AssertEquals_LREAL(7.941603003365496, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(109.67291667846435, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.05210502444806486, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-19.88492411775111, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasMinDuration_HasTargetVelocity_HasTargetAcceleration_15" Id="{96333348-4848-4d80-8c69-0b35f594a328}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasMinDuration_HasTargetVelocity_HasTargetAcceleration_15
VAR_INST
  ruckig : Struckig.Otg(0.001, 3) := (
  
    Synchronization := SynchronizationType.TimeSync,
    MinDuration := 6.0,
    MaxVelocity := [ 2000.0, 2000.0, 2000.0 ],
    MaxAcceleration := [ 20000.0, 20000.0, 20000.0 ],
    MaxJerk := [ 800000.0, 800000.0, 800000.0 ],
    CurrentPosition := [ 80.29599725108966, -16.595240167642288, -10.563218674718456 ],
    CurrentVelocity := [ -665.2939916748119, -252.31162160327165, 910.7605496896838 ],
    CurrentAcceleration := [ -6038.086221066726, 5702.712022046548, -5391.38537360544 ],
    TargetPosition := [ -15.947396233027035, -52.93402548041466, -99.24861248238838 ],
    TargetVelocity := [ -82.3068299752083, 810.5242632500622, -475.5452525569576 ],
    TargetAcceleration := [ 797.6779209006231, 304.9451091028675, 294.8876599912337 ]
  );
  
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasMinDuration_HasTargetVelocity_HasTargetAcceleration_15');

ruckig();

// Check total duration of profiles
AssertEquals_LREAL(Expected := 6.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check minimum duration
AssertEquals_LREAL(Expected := 6.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := ruckig._profiles[0].positionExtrema();
AssertEquals_LREAL(0.0, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(80.29599725108966, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(5.999999999999999, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-15.947396233027035, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := ruckig._profiles[1].positionExtrema();
AssertEquals_LREAL(0.0, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(-16.595240167642288, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(5.939358209422553, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-79.08901602854112, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := ruckig._profiles[2].positionExtrema();
AssertEquals_LREAL(0.058957419609001596, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(16.2518405159937, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(6.0, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-99.24861248238838, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasMinDuration_HasTargetVelocity_HasTargetAcceleration_18" Id="{8e8dfd3c-f7ed-465c-936b-0e0e78d29587}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasMinDuration_HasTargetVelocity_HasTargetAcceleration_18
VAR_INST
  ruckig : Struckig.Otg(0.001, 3) := (
  
    Synchronization := SynchronizationType.TimeSync,
    MinDuration := 6.0,
    MaxVelocity := [ 2000.0, 2000.0, 2000.0 ],
    MaxAcceleration := [ 20000.0, 20000.0, 20000.0 ],
    MaxJerk := [ 800000.0, 800000.0, 800000.0 ],
    CurrentPosition := [ 81.8189456654396, -34.648960679925025, -51.77657021421829 ],
    CurrentVelocity := [ 52.71918271967047, -512.6427429671598, 347.52161587573437 ],
    CurrentAcceleration := [ -463.2079718295354, -9185.891702573537, 7766.274147421525 ],
    TargetPosition := [ 28.57172398615708, 23.600629576782865, -2.4216248210818776 ],
    TargetVelocity := [ 159.80128500214232, -165.6494233580952, 407.13274543851867 ],
    TargetAcceleration := [ -496.57312685360756, 646.2561464861296, 884.0412488799539 ]
  );
  
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasMinDuration_HasTargetVelocity_HasTargetAcceleration_18');

ruckig();

// Check total duration of profiles
AssertEquals_LREAL(Expected := 6.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check minimum duration
AssertEquals_LREAL(Expected := 6.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := ruckig._profiles[0].positionExtrema();
AssertEquals_LREAL(0.012217427498857257, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(82.2020759262068, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(5.975125497966807, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(26.251513510769477, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := ruckig._profiles[1].positionExtrema();
AssertEquals_LREAL(5.9750978983936935, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(26.068274316521368, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.059557771163129256, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-55.87398334808502, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := ruckig._profiles[2].positionExtrema();
AssertEquals_LREAL(6.0, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(-2.4216248210818776, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-51.77657021421829, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
    <Method Name="Test_Trajectory_HasMinDuration_HasTargetVelocity_HasTargetAcceleration_20" Id="{a8a5845b-edb2-44fb-8e2e-2f35b2f08076}">
      <Declaration><![CDATA[METHOD Test_Trajectory_HasMinDuration_HasTargetVelocity_HasTargetAcceleration_20
VAR_INST
  ruckig : Struckig.Otg(0.001, 3) := (
  
    Synchronization := SynchronizationType.TimeSync,
    MinDuration := 1.0,
    MaxVelocity := [ 2000.0, 2000.0, 2000.0 ],
    MaxAcceleration := [ 20000.0, 20000.0, 20000.0 ],
    MaxJerk := [ 800000.0, 800000.0, 800000.0 ],
    CurrentPosition := [ 74.13037097871606, 50.87684992213954, -35.461969837009065 ],
    CurrentVelocity := [ -104.6717721730954, 978.8741284865525, 932.4293320305519 ],
    CurrentAcceleration := [ -1484.1311843071398, -3303.1671799903806, -254.44992328560875 ],
    TargetPosition := [ -53.87981386222778, -79.63304774882201, 29.944494194232874 ],
    TargetVelocity := [ -444.5052876664206, 76.57672906373682, 439.3701152281369 ],
    TargetAcceleration := [ 223.1822145745084, 144.20762241820466, 871.7177536324762 ]
  );
  
  positionExtrema : Struckig.PositionExtremaDesc;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[TEST('Trajectory_HasMinDuration_HasTargetVelocity_HasTargetAcceleration_20');

ruckig();

// Check total duration of profiles
AssertEquals_LREAL(Expected := 1.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check minimum duration
AssertEquals_LREAL(Expected := 1.0, Actual := ruckig.Duration, DELTA := 1E-8, Message := 'Duration incorrect');

// Check duration for each phase
positionExtrema := ruckig._profiles[0].positionExtrema();
AssertEquals_LREAL(0.0, positionExtrema.Tmax, 1E-9, message:='Profile[0] Tmax incorrect');
AssertEquals_LREAL(74.13037097871606, positionExtrema.Maximum, 1E-9, message:='Profile[0] maximum incorrect');
AssertEquals_LREAL(1.0, positionExtrema.Tmin, 1E-9, message:='Profile[0] Tmin incorrect');
AssertEquals_LREAL(-53.87981386222778, positionExtrema.Minimum, 1E-9, message:='Profile[0] minimum incorrect');

positionExtrema := ruckig._profiles[1].positionExtrema();
AssertEquals_LREAL(0.05795449228928962, positionExtrema.Tmax, 1E-9, message:='Profile[1] Tmax incorrect');
AssertEquals_LREAL(82.91327789055885, positionExtrema.Maximum, 1E-9, message:='Profile[1] maximum incorrect');
AssertEquals_LREAL(0.9863428350510189, positionExtrema.Tmin, 1E-9, message:='Profile[1] Tmin incorrect');
AssertEquals_LREAL(-80.32577887227478, positionExtrema.Minimum, 1E-9, message:='Profile[1] minimum incorrect');

positionExtrema := ruckig._profiles[2].positionExtrema();
AssertEquals_LREAL(1.0, positionExtrema.Tmax, 1E-9, message:='Profile[2] Tmax incorrect');
AssertEquals_LREAL(29.944494194232874, positionExtrema.Maximum, 1E-9, message:='Profile[2] maximum incorrect');
AssertEquals_LREAL(0.0, positionExtrema.Tmin, 1E-9, message:='Profile[2] Tmin incorrect');
AssertEquals_LREAL(-35.461969837009065, positionExtrema.Minimum, 1E-9, message:='Profile[2] minimum incorrect');
   

TEST_FINISHED();]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
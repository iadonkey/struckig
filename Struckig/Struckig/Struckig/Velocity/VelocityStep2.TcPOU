<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="VelocityStep2" Id="{44d0404d-f840-43a5-b935-c3fca779d43d}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK VelocityStep2 
VAR
  p0, v0, a0 : LREAL;
  tf, vf, af : LREAL;
  aMax, aMin, jMax : LREAL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="CheckAll" Id="{5edd91ed-f446-4dff-95cf-42bfd1ecd2c0}">
      <Declaration><![CDATA[METHOD CheckAll : BOOL
VAR_IN_OUT
  Profile : ProfileDesc;
END_VAR
VAR_INPUT
  aMax, aMin, jMax : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CheckAll := time_acc0(Profile, aMax, aMin, jMax) OR_ELSE time_none(Profile, aMax, aMin, jMax);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Get" Id="{291bf2c1-3902-431e-bdad-f5b9a8de3521}">
      <Declaration><![CDATA[METHOD Get : BOOL
VAR_IN_OUT
  Profile : ProfileDesc;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[Profile.SetBoundaryVelocity(p0, v0, a0, vf, af);

// Test all cases to get ones that match
// However we should guess which one is correct and try them first...
IF (vf > v0) THEN
  Get := CheckAll(Profile, aMax, aMin, jMax) OR_ELSE CheckAll(Profile, aMin, aMax, -jMax);
ELSE
  Get := CheckAll(Profile, aMin, aMax, -jMax) OR_ELSE CheckAll(Profile, aMax, aMin, jMax);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Set" Id="{1ea081ff-38e9-4265-a71e-f22d7dc2ecbe}">
      <Declaration><![CDATA[METHOD Set
VAR_INPUT
  tf : LREAL;
  p0, v0, a0 : LREAL;
  vf, af : LREAL;
  aMax, aMin : LREAL;
  jMax : LREAL; 
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.p0 := p0;
THIS^.v0 := v0;
THIS^.a0 := a0;
THIS^.tf := tf;
THIS^.vf := vf;
THIS^.af := af;
THIS^.aMax := aMax;
THIS^.aMin := aMin;
THIS^.jMax := jMax;]]></ST>
      </Implementation>
    </Method>
    <Method Name="time_acc0" Id="{139ae830-064a-498c-9553-ea8f79b368be}">
      <Declaration><![CDATA[METHOD PRIVATE time_acc0 : BOOL
VAR_IN_OUT
  Profile : ProfileDesc;
END_VAR
VAR_INPUT
  aMax, aMin, jMax : LREAL;
END_VAR
VAR
  h1 : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// UD Solution 1/2
h1 := (-a0*a0 - af*af + 2*a0*af + 2*jMax*((a0 + af)*tf - 2*(vf - v0)))/(jMax*jMax) + tf*tf;
IF h1 >= 0
THEN
  h1 := SQRT(h1);
  
  Profile.t[0] := (af - a0)/(2*jMax) + (tf - h1)/2;
  Profile.t[1] := h1;
  Profile.t[2] := tf - (Profile.t[0] + h1);
  Profile.t[3] := 0;
  Profile.t[4] := 0;
  Profile.t[5] := 0;
  Profile.t[6] := 0;
  
  IF (Profile.CheckForVelocity(ProfileJerkSigns.uddu, ProfileLimits.Acc0, jMax, aMax, aMin)) THEN
    Profile.pf := Profile.p[7];
    time_acc0 := TRUE;
    RETURN;
  END_IF
END_IF

// UU Solution
h1 := (a0 - af + jMax*tf);

Profile.t[0] := -((a0*a0 + af*af - 2*a0*af - 2*jMax*(vf - v0 - a0*tf))/(2*jMax*h1));
Profile.t[1] := h1/jMax;
Profile.t[2] := 0;
Profile.t[3] := 0;
Profile.t[4] := tf - (Profile.t[0] + Profile.t[1]);
Profile.t[5] := 0;
Profile.t[6] := 0;

IF (Profile.CheckForVelocity(ProfileJerkSigns.udud, ProfileLimits.Acc0, jMax, aMax, aMin))
THEN
  Profile.pf := Profile.p[7];
  time_acc0 := TRUE;
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="time_none" Id="{b7252407-1ffc-4203-89cb-177864a2876c}">
      <Declaration><![CDATA[METHOD PRIVATE time_none : BOOL
VAR_IN_OUT
  Profile : ProfileDesc;
END_VAR
VAR_INPUT
  aMax, aMin, jMax : LREAL;
END_VAR
VAR
  h1, jf : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (ABS(a0) < Constants.DoubleEpsilon AND_THEN ABS(af) < Constants.DoubleEpsilon AND_THEN ABS(vf - v0) < Constants.DoubleEpsilon) THEN
  Profile.t[0] := 0;
  Profile.t[1] := 0;
  Profile.t[2] := 0;
  Profile.t[3] := 0;
  Profile.t[4] := 0;
  Profile.t[5] := 0;
  Profile.t[6] := 0;
  
  IF (Profile.CheckForVelocity(ProfileJerkSigns.uddu, ProfileLimits.None, jMax, aMax, aMin)) THEN
    Profile.pf := Profile.p[7];
    time_none := TRUE;
    RETURN;
  END_IF
END_IF
    
// UD Solution 1/2
Profile.t[0] := -(2*(af*tf + v0 - vf))/(a0 - af);
Profile.t[1] := tf - Profile.t[0];
Profile.t[2] := 0;
Profile.t[3] := 0;
Profile.t[4] := 0;
Profile.t[5] := 0;
Profile.t[6] := 0;

jf := (a0 - af)*(a0 - af)/(2*(af*tf + v0 - vf));
IF (ABS(jf) < ABS(jMax) + 1E-12 AND_THEN Profile.CheckForVelocity(ProfileJerkSigns.uddu, ProfileLimits.None, jf, aMax, aMin))
THEN
  Profile.pf := Profile.p[7];
  time_none := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
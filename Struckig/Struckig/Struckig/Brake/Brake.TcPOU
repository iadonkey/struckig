<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="Brake" Id="{71bb0e37-952f-49d1-ab84-8c5adc30ea54}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK Brake
VAR
  t_to_a_max : LREAL;
  t_to_a_zero : LREAL;
  v_at_a_max : LREAL;
  v_at_a0 : LREAL;
  v_at_a_min : LREAL;
  t_to_v_max : LREAL;
  t_to_v_min : LREAL;  
  t_to_a_min : LREAL;
  t_min_to_v_max : LREAL;
  t_to_v_max_with_constant : LREAL;
  t_to_v_min_with_constant : LREAL;    
END_VAR
VAR CONSTANT
  eps : LREAL := 2.2E-14;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="accelerationBrake" Id="{dfef5ef2-f60f-4f35-9f3f-5bcdd49b8338}">
      <Declaration><![CDATA[METHOD accelerationBrake
VAR_INPUT
  v0, a0 : LREAL;
  vMax, vMin : LREAL;
  aMax, aMin : LREAL;
  jMax : LREAL;
END_VAR
VAR_IN_OUT
  t_brake : ARRAY[0..1] OF LREAL;
  j_brake : ARRAY[0..1] OF LREAL;    
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[j_brake[0] := -jMax;

t_to_a_max := (a0 - aMax) / jMax;
t_to_a_zero := a0 / jMax;

v_at_a_max := v_at_t(v0, a0, -jMax, t_to_a_max);
v_at_a0 := v_at_t(v0, a0, -jMax, t_to_a_zero);

IF (v_at_a0 > vMax AND_THEN jMax > 0) OR_ELSE (v_at_a0 < vMax AND_THEN jMax < 0)
THEN
  velocityBrake(v0, a0, vMax, vMin, aMax, aMin, jMax, t_brake, j_brake);

ELSIF (v_at_a_max < vMin AND_THEN jMax > 0) OR_ELSE (v_at_a_max > vMin AND_THEN jMax < 0)
THEN
  t_to_v_min := -(v_at_a_max - vMin)/aMax;
  t_to_v_max := -aMax/(2*jMax) - (v_at_a_max + vMax)/aMax;
  t_brake[0] := t_to_a_max + eps;
  t_brake[1] := MAX(MIN(t_to_v_min, v_at_a_max - eps), 0.0);
ELSE
  t_brake[0] := t_to_a_max + eps;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="get_position_brake_trajectory" Id="{ab7c1bc1-5de4-4c10-8515-0a1d1e69f808}">
      <Declaration><![CDATA[METHOD get_position_brake_trajectory
VAR_INPUT
  v0, a0 : LREAL;
  vMax, vMin : LREAL;
  aMax, aMin : LREAL;
  jMax : LREAL;
END_VAR
VAR_IN_OUT
  t_brake : ARRAY[0..1] OF LREAL;
  j_brake : ARRAY[0..1] OF LREAL;    
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[t_brake[0] := 0.0;
t_brake[1] := 0.0;
j_brake[0] := 0.0;
j_brake[1] := 0.0;

IF a0 > aMax
THEN
  accelerationBrake(v0, a0, vMax, vMin, aMax, aMin, jMax, t_brake, j_brake);
ELSIF a0 < aMin
THEN
  accelerationBrake(v0, a0, vMin, vMax, aMin, aMax, -jMax, t_brake, j_brake);
ELSIF ((v0 > vMax AND_THEN v_at_a_zero(v0, a0, -jMax) > vMin) OR_ELSE (a0 > 0 AND_THEN v_at_a_zero(v0, a0, jMax) > vMax))
THEN
  velocityBrake(v0, a0, vMax, vMin, aMax, aMin, jMax, t_brake, j_brake);
ELSIF ((v0 < vMin AND_THEN v_at_a_zero(v0, a0, jMax) < vMax) OR_ELSE (a0 < 0 AND_THEN v_at_a_zero(v0, a0, -jMax) < vMin))
THEN
  velocityBrake(v0, a0, vMin, vMax, aMin, aMax, -jMax, t_brake, j_brake);      
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="get_velocity_brake_trajectory" Id="{a8861f54-8722-4cea-8a17-f5634e69b8af}">
      <Declaration><![CDATA[METHOD get_velocity_brake_trajectory
VAR_INPUT
  v0, a0 : LREAL;
  aMax, aMin : LREAL;
  jMax : LREAL;
END_VAR
VAR_IN_OUT
  t_brake : ARRAY[0..1] OF LREAL;
  j_brake : ARRAY[0..1] OF LREAL;    
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[t_brake[0] := 0.0;
t_brake[1] := 0.0;
j_brake[0] := 0.0;
j_brake[1] := 0.0;

IF (a0 > aMax)
THEN
  j_brake[0] := -jMax;
  t_brake[0] := (a0 - aMax)/jMax + eps;
ELSIF (a0 < aMin)
THEN
  j_brake[0] := jMax;
  t_brake[0] := -(a0 - aMin)/jMax + eps;
END_IF ]]></ST>
      </Implementation>
    </Method>
    <Method Name="v_at_a_zero" Id="{2e5e7dc2-a290-4b96-ae01-441e92ef0874}">
      <Declaration><![CDATA[METHOD v_at_a_zero : LREAL
VAR_INPUT
  v0, a0 : LREAL;
  j : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[v_at_a_zero := v0 + (a0 * a0) / (2 * j);]]></ST>
      </Implementation>
    </Method>
    <Method Name="v_at_t" Id="{17ed7fcc-6e58-492d-b214-1fe08f730141}">
      <Declaration><![CDATA[METHOD v_at_t : LREAL
VAR_INPUT
  v0, a0 : LREAL;
  j : LREAL;
  t : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[v_at_t := v0 + t * (a0 + j * t * 0.5);]]></ST>
      </Implementation>
    </Method>
    <Method Name="velocityBrake" Id="{9e5ad2c9-7f6b-4d2e-8d38-8721c2405309}">
      <Declaration><![CDATA[METHOD velocityBrake
VAR_INPUT
  v0, a0 : LREAL;
  vMax, vMin : LREAL;
  aMax, aMin : LREAL;
  jMax : LREAL;
END_VAR
VAR_IN_OUT
  t_brake : ARRAY[0..1] OF LREAL;
  j_brake : ARRAY[0..1] OF LREAL;    
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[j_brake[0] := -jMax;
t_to_a_min := (a0 - aMin)/jMax;
t_to_v_max := a0/jMax + SQRT(a0*a0 + 2 * jMax * (v0 - vMax)) / ABS(jMax);
t_to_v_min := a0/jMax + SQRT(a0*a0 / 2 + jMax * (v0 - vMin)) / ABS(jMax);
t_min_to_v_max := MIN(t_to_v_max, t_to_v_min);

IF (t_to_a_min < t_min_to_v_max)
THEN
  v_at_a_min := v_at_t(v0, a0, -jMax, t_to_a_min);
  t_to_v_max_with_constant := -(v_at_a_min - vMax)/aMin;
  t_to_v_min_with_constant := -0.5*aMin/jMax - (v_at_a_min - vMin)/aMin;
  t_brake[0] := t_to_a_min - eps;
  t_brake[1] := MAX(MIN(t_to_v_max_with_constant, t_to_v_min_with_constant), 0.0);
ELSE
  t_brake[0] := t_min_to_v_max - eps;
END_IF]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
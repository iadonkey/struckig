<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="BrakeProfile" Id="{1eceebc8-e02e-4905-a883-8b9d67dc9558}" SpecialFunc="None">
    <Declaration><![CDATA[/// Calculates (pre- or post-) profile to get current or final state below the limits
FUNCTION_BLOCK INTERNAL BrakeProfile
VAR_INPUT
  Duration : LREAL; //! Overall duration
  t, j, a, v, p : ARRAY[0..1] OF LREAL; //! Profile information for a two-step profile  
  IsUsed : BOOL;
END_VAR
VAR
  t_to_a_min, t_to_a_max, t_min_to_v_max, t_to_a_zero, t_to_v_min, t_to_v_max : LREAL;
  t_to_v_max_with_constant, t_to_v_min_with_constant, v_at_a0, v_at_a_max, v_at_a_min : LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="AccelerationBrake" Id="{151af409-7ad6-4437-ae65-90af2283f00d}">
      <Declaration><![CDATA[METHOD AccelerationBrake
VAR_INPUT
  v0, a0 : LREAL;
  vMax, vMin : LREAL;
  aMax, aMin : LREAL;
  jMax : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[j[0] := -jMax;

t_to_a_max := (a0 - aMax) / jMax;
t_to_a_zero := a0 / jMax;

v_at_a_max := VelocityAtTime(v0, a0, -jMax, t_to_a_max);
v_at_a0 := VelocityAtTime(v0, a0, -jMax, t_to_a_zero);

IF (v_at_a0 > vMax AND_THEN jMax > 0) OR_ELSE (v_at_a0 < vMax AND_THEN jMax < 0)
THEN
  VelocityBrake(v0, a0, vMax, vMin, aMax, aMin, jMax);

ELSIF (v_at_a_max < vMin AND_THEN jMax > 0) OR_ELSE (v_at_a_max > vMin AND_THEN jMax < 0)
THEN
  t_to_v_min := -(v_at_a_max - vMin)/aMax;
  t_to_v_max := -aMax/(2*jMax) - (v_at_a_max + vMax)/aMax;
  t[0] := t_to_a_max + Constants.BrakeEpsilon;
  t[1] := MAX(MIN(t_to_v_min, v_at_a_max - Constants.BrakeEpsilon), 0.0);
ELSE
  t[0] := t_to_a_max + Constants.BrakeEpsilon;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Finalize" Id="{0fcf778f-80e5-4f55-9da3-b7c243c42728}">
      <Declaration><![CDATA[METHOD Finalize
VAR_IN_OUT
  ps : LREAL;
  vs : LREAL;
  as : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF t[0] <= 0 AND_THEN t[1] <= 0
THEN
  RETURN;
END_IF

Duration := t[0];
p[0] := ps;
v[0] := vs;
a[0] := as;
Integrate(t[0], p0:=ps, v0:=vs, a0:=as, j:=j[0], p:=ps, v:=vs, a:=as);

IF t[1] > 0
THEN
  Duration := Duration + t[1];
  p[1] := ps;
  v[1] := vs;
  a[1] := as;
  Integrate(t[1], p0:=ps, v0:=vs, a0:=as, j:=j[1], p:=ps, v:=vs, a:=as);
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="PositionBrakeTrajectory" Id="{95c53b9d-c397-464e-b5fb-c3d4cad36b7c}">
      <Declaration><![CDATA[METHOD PositionBrakeTrajectory
VAR_INPUT
  v0, a0 : LREAL;
  vMax, vMin : LREAL;
  aMax, aMin : LREAL;
  jMax : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[t[0] := 0.0;
t[1] := 0.0;
j[0] := 0.0;
j[1] := 0.0;

IF a0 > aMax
THEN
  AccelerationBrake(v0, a0, vMax, vMin, aMax, aMin, jMax);
ELSIF a0 < aMin
THEN
  AccelerationBrake(v0, a0, vMin, vMax, aMin, aMax, -jMax);
ELSIF ((v0 > vMax AND_THEN VelocityAtZeroAcceleration(v0, a0, -jMax) > vMin) OR_ELSE (a0 > 0 AND_THEN VelocityAtZeroAcceleration(v0, a0, jMax) > vMax))
THEN
  VelocityBrake(v0, a0, vMax, vMin, aMax, aMin, jMax);
ELSIF ((v0 < vMin AND_THEN VelocityAtZeroAcceleration(v0, a0, jMax) < vMax) OR_ELSE (a0 < 0 AND_THEN VelocityAtZeroAcceleration(v0, a0, -jMax) < vMin))
THEN
  VelocityBrake(v0, a0, vMin, vMax, aMin, aMax, -jMax);      
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="VelocityAtTime" Id="{f532e452-5e4d-4b4e-a9b9-55765c5c49dc}">
      <Declaration><![CDATA[METHOD VelocityAtTime : LREAL
VAR_INPUT
  v0, a0 : LREAL;
  j : LREAL;
  t : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[VelocityAtTime := v0 + t * (a0 + j * t * 0.5);]]></ST>
      </Implementation>
    </Method>
    <Method Name="VelocityAtZeroAcceleration" Id="{fadf7222-52a9-4a60-9bb7-04c04e997a4d}">
      <Declaration><![CDATA[METHOD VelocityAtZeroAcceleration : LREAL
VAR_INPUT
  v0, a0 : LREAL;
  j : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[VelocityAtZeroAcceleration := v0 + (a0 * a0) / (2 * j);]]></ST>
      </Implementation>
    </Method>
    <Method Name="velocityBrake" Id="{c8d0a7a0-928d-4c6d-8096-2b92af8cd1a4}">
      <Declaration><![CDATA[METHOD VelocityBrake
VAR_INPUT
  v0, a0 : LREAL;
  vMax, vMin : LREAL;
  aMax, aMin : LREAL;
  jMax : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[j[0] := -jMax;
t_to_a_min := (a0 - aMin)/jMax;
t_to_v_max := a0*a0 + 2 * jMax * (v0 - vMax);
t_to_v_min := a0*a0 / 2 + jMax * (v0 - vMin);

IF t_to_v_max < 0 OR_ELSE t_to_v_min < 0
THEN
  RETURN;
END_IF

t_to_v_max := a0/jMax + SQRT(t_to_v_max) / ABS(jMax);
t_to_v_min := a0/jMax + SQRT(t_to_v_min) / ABS(jMax);
t_min_to_v_max := MIN(t_to_v_max, t_to_v_min);

IF (t_to_a_min < t_min_to_v_max)
THEN
  v_at_a_min := VelocityAtTime(v0, a0, -jMax, t_to_a_min);
  t_to_v_max_with_constant := -(v_at_a_min - vMax)/aMin;
  t_to_v_min_with_constant := -0.5*aMin/jMax - (v_at_a_min - vMin)/aMin;
  t[0] := MAX(t_to_a_min - Constants.BrakeEpsilon, 0);
  t[1] := MAX(MIN(t_to_v_max_with_constant, t_to_v_min_with_constant), 0.0);
ELSE
  t[0] := MAX(t_min_to_v_max - Constants.BrakeEpsilon, 0);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="VelocityBrakeTrajectory" Id="{33c02e8e-5511-4646-952e-73b09c9f73ca}">
      <Declaration><![CDATA[METHOD VelocityBrakeTrajectory
VAR_INPUT
  v0, a0 : LREAL;
  aMax, aMin : LREAL;
  jMax : LREAL;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[t[0] := 0.0;
t[1] := 0.0;
j[0] := 0.0;
j[1] := 0.0;

IF (a0 > aMax)
THEN
  j[0] := -jMax;
  t[0] := (a0 - aMax)/jMax + Constants.BrakeEpsilon;
ELSIF (a0 < aMin)
THEN
  j[0] := jMax;
  t[0] := -(a0 - aMin)/jMax + Constants.BrakeEpsilon;
END_IF ]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
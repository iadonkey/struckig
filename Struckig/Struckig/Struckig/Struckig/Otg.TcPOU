<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="Otg" Id="{1c5850a2-5b12-4229-9d95-591ad970a07b}" SpecialFunc="None">
    <Declaration><![CDATA[{attribute 'conditionalshow_all_locals'}
FUNCTION_BLOCK Otg
VAR_INPUT
  CycleTime : LREAL;
  Dofs : INT;
  Enabled : ARRAY[0..ParameterList.MaxDoFs] OF BOOL;  
  ControlInterface : ControlInterfaceType := ControlInterfaceType.Position; //< The default position interface controls the full kinematic state.
  Synchronization : SynchronizationType := SynchronizationType.TimeSync; //< Synchronization behavior of multiple DoFs
  PerDofControlInterface : ARRAY[0..ParameterList.MaxDoFs] OF ControlInterfaceType; //< Per-DoF control interface (overwrites global ControlInterface)
  PerDofSynchronization: ARRAY[0..ParameterList.MaxDoFs] OF SynchronizationType; //< Per-DoF synchronization (overwrites global Synchronization)
  Discretization : DiscretizationType; //< Whether the duration should be a discrete multiple of the control cycle (off by default)
  CurrentPosition, CurrentVelocity, CurrentAcceleration : ARRAY[0..ParameterList.MaxDoFs] OF LREAL; //< Current state
  TargetPosition, TargetVelocity, TargetAcceleration : ARRAY[0..ParameterList.MaxDoFs] OF LREAL; //< Target state
  MaxVelocity, MaxAcceleration, MaxJerk : ARRAY[0..ParameterList.MaxDoFs] OF LREAL; //< Kinematic constraints
  MinVelocity, MinAcceleration : ARRAY[0..ParameterList.MaxDoFs] OF LREAL; //< Optional kindematic constraints
  MinDuration : LREAL := 0; //< Optional minimum duration of a trajectory. This is only considered if the Synchronization type is not none
  EnableAutoPropagate : BOOL; //< If set to true, PassOutputToInput is automatically called internally after calling the function block's body
END_VAR
VAR_OUTPUT
  NewPosition, NewVelocity, NewAcceleration : ARRAY[0..ParameterList.MaxDoFs] OF LREAL;
  NewCalculation : BOOL; //< Was a new trajectory calculation performed in the last cycle?
  Duration : LREAL;
  CurrentTime : LREAL;
  State : TrajectoryState;  
END_VAR
VAR
  _newSection : INT; //< not used in Struckig, ruckig pro feature
  _blocks : ARRAY[0..ParameterList.MaxDoFs] OF Block;  
  _profiles : ARRAY[0..ParameterList.MaxDoFs] OF ProfileDesc;
  _independentMinDurations : ARRAY[0..ParameterList.MaxDoFs] OF LREAL;	
  _positionStep1 : PositionStep1;
  _positionStep2 : PositionStep2;
  _velocityStep1 : VelocityStep1;
  _velocityStep2 : VelocityStep2;  
  
  _inp_min_velocity, _inp_min_acceleration : ARRAY[0..ParameterList.MaxDoFs] OF LREAL;
  _inp_per_dof_control_interface : ARRAY[0..ParameterList.MaxDoFs] OF ControlInterfaceType; //< Per-DoF control interface
  _inp_per_dof_synchronization : ARRAY[0..ParameterList.MaxDoFs] OF SynchronizationType; //< Per-DoF synchronization
  
  _dofs, _dofsEnd : INT;
  _enabled : ARRAY[0..ParameterList.MaxDoFs] OF BOOL;  
  _controlInterface : ControlInterfaceType := ControlInterfaceType.Position; //< The default position interface controls the full kinematic state.
  _synchronization : SynchronizationType := SynchronizationType.TimeSync; //< Synchronization behavior of multiple DoFs
  _perDofControlInterface : ARRAY[0..ParameterList.MaxDoFs] OF ControlInterfaceType; //< Per-DoF control interface
  _perDofSynchronization: ARRAY[0..ParameterList.MaxDoFs] OF SynchronizationType; //< Per-DoF synchronization
  _discretization : DiscretizationType; //< Whether the duration should be a discrete multiple of the control cycle (off by default)
  _currentPosition, _currentVelocity, _currentAcceleration : ARRAY[0..ParameterList.MaxDoFs] OF LREAL; //< Current state
  _targetPosition, _targetVelocity, _targetAcceleration : ARRAY[0..ParameterList.MaxDoFs] OF LREAL; //< Target state
  _maxVelocity, _maxAcceleration, _maxJerk : ARRAY[0..ParameterList.MaxDoFs] OF LREAL; //< Kinematic constraints
  _minVelocity, _minAcceleration : ARRAY[0..ParameterList.MaxDoFs] OF LREAL; //< Optional kindematic constraints
  _minDuration : LREAL := 0; //< Optional minimum duration of a trajectory. This is only considered if the Synchronization type is not none
  _dt : LREAL; //< Time step between updates (cycle time) in [s]
  _errorId : INT;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[NewCalculation := FALSE;
State := TrajectoryState.Busy;

IF Change()
THEN
  _dofsEnd := Dofs - 1; // for looping

  _errorId := Calculate();
  IF _errorId <> 0 THEN
    State := State := TrajectoryState.Error;
    RETURN;
  END_IF

  // Store the desired state to check for potential changes
  _dofs := Dofs;
  _enabled := Enabled;
  _controlInterface := ControlInterface;
  _synchronization := Synchronization;
  _discretization := Discretization;
  _currentPosition := CurrentPosition;
  _currentVelocity := CurrentVelocity;
  _currentAcceleration := CurrentAcceleration;
  _targetPosition := TargetPosition;
  _targetVelocity := TargetVelocity;
  _targetAcceleration := TargetAcceleration;
  _maxVelocity := MaxVelocity;
  _maxAcceleration := MaxAcceleration;
  _maxJerk := MaxJerk;
  _minVelocity := MinVelocity;
  _minAcceleration := MinAcceleration;
  _minDuration := MinDuration;
  _perDofControlInterface := PerDofControlInterface;
  _perDofSynchronization := PerDofSynchronization;
  _dt := CycleTime;
  CurrentTime := 0.0;
  NewCalculation := TRUE;  
END_IF

CurrentTime := CurrentTime + _dt;
AtTime(CurrentTime, ADR(NewPosition), ADR(NewVelocity), ADR(NewAcceleration), ADR(_newSection));

_currentPosition := NewPosition;
_currentVelocity := NewVelocity;
_currentAcceleration := NewAcceleration;

IF (CurrentTime > Duration) THEN
  State := TrajectoryState.Idle;
END_IF

IF EnableAutoPropagate
THEN
  PassOutputToInput();
END_IF]]></ST>
    </Implementation>
    <Method Name="AtTime" Id="{bf1093a4-cb3c-415c-bc2d-e44ec3ea9553}">
      <Declaration><![CDATA[{attribute 'conditionalshow'}
METHOD AtTime
VAR_INPUT
  t : LREAL;
  new_position : POINTER TO LREAL;
  new_velocity : POINTER TO LREAL;
  new_acceleration : POINTER TO LREAL;
  new_section : POINTER TO INT;
END_VAR
VAR
  dof : INT;
  p : REFERENCE TO ProfileDesc;
  t_diff : LREAL;
  index : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (t >= Duration) THEN
  // Keep constant acceleration
  //new_section := 1;
  FOR dof:=0 TO _dofsEnd DO
    Integrate(t - (_profiles[dof].Brake.Duration + _profiles[dof].t_sum[6]), _profiles[dof].p[7], _profiles[dof].v[7], _profiles[dof].a[7], 0, p:=new_position[dof], v:=new_velocity[dof], a:=new_acceleration[dof]);
  END_FOR
  RETURN;
END_IF

new_section := 0;
FOR dof:=0 TO _dofsEnd DO
  p REF= _profiles[dof];

  t_diff := t;
  
  // Brake pre-trajectory
  IF (p.Brake.Duration > 0) THEN
    IF (t_diff < p.Brake.Duration) THEN
      index := SEL(t_diff < p.Brake.t[0], 1, 0);
      IF (index > 0) THEN
        t_diff := t_diff - p.Brake.t[index - 1];
      END_IF

      Integrate(t_diff, p.Brake.p[index], p.Brake.v[index], p.Brake.a[index], p.Brake.j[index], p:=new_position[dof], v:=new_velocity[dof], a:=new_acceleration[dof]);
      CONTINUE;
    ELSE
      t_diff := t_diff - p.Brake.Duration;
    END_IF
  END_IF
  
// Accel post-trajectory
// if (new_section == profiles.size() - 1 && p.accel.duration > 0) {
//     if (t_diff_dof > p.t_sum[6]) {
//         const size_t index = (t_diff_dof < p.accel.t[0]) ? 1 : 0;
//         if (index > 0) {
//             t_diff_dof -= p.accel.t[index - 1];
//         }

//         std::tie(new_position[dof], new_velocity[dof], new_acceleration[dof]) = integrate(t_diff_dof, p.accel.p[index], p.accel.v[index], p.accel.a[index], p.accel.j[index]);
//         continue;
//     }
// }

  // Non-time synchronization
  IF (t_diff >= p.t_sum[6]) THEN
    // Keep constant acceleration
    Integrate(t_diff - p.t_sum[6], p.p[7], p.v[7], p.a[7], 0, p:=new_position[dof], v:=new_velocity[dof], a:=new_acceleration[dof]);
    CONTINUE;
  END_IF

  FOR index:=0 TO 6 DO
    IF p.t_sum[index] > t_diff
    THEN
      EXIT;
    END_IF
	END_FOR
  
  IF (index > 0) THEN
    t_diff := t_diff - p.t_sum[index - 1];
  END_IF

  Integrate(t_diff, p.p[index], p.v[index], p.a[index], p.j[index], p:=new_position[dof], v:=new_velocity[dof], a:=new_acceleration[dof]);
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Calculate" Id="{d4e77b2d-b7a2-4486-8e6b-9e101a6d8b8b}">
      <Declaration><![CDATA[METHOD PRIVATE Calculate : TrajectoryErrorCode
VAR_INST
  dof, i : INT;
  p, p_limiting : REFERENCE TO ProfileDesc;
  found_profile : BOOL;
  limiting_dof : INT := -1; // The DoF that doesn't need step 2
  discrete_duration, found_synchronization, found_time_synchronization : BOOL;
  new_max_jerk : ARRAY[0..ParameterList.MaxDoFs] OF LREAL;
  t_profile : LREAL;
  noneSynchronizationCount, phaseSychronizationIndex, phaseOrNoneSychronizationCount, positionControlInterfaceCount : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[State := TrajectoryState.Busy;

IF NOT ValidateInput(currentState:=FALSE, targetState:=TRUE)
THEN
  Calculate := TrajectoryErrorCode.InvalidInput;
  RETURN;
END_IF

FOR dof:=0 TO _dofsEnd
DO
  p REF=_profiles[dof];
  
  IF NOT Enabled[dof]
  THEN
    p.p[7] := CurrentPosition[dof];
    p.v[7] := CurrentVelocity[dof];
    p.a[7] := CurrentAcceleration[dof];    
    p.t_sum[6] := 0.0;
    _blocks[dof].Tmin := 0.0;
    _blocks[dof].A.IsUsed := FALSE;
    _blocks[dof].B.IsUsed := FALSE;    
    CONTINUE;
	END_IF
  
  _inp_min_velocity[dof] := SEL(ABS(MinVelocity[dof]) < Constants.Epsilon, MinVelocity[dof], -MaxVelocity[dof]);
  _inp_min_acceleration[dof] := SEL(ABS(MinAcceleration[dof]) < Constants.Epsilon, MinAcceleration[dof], -MaxAcceleration[dof]);
  _inp_per_dof_control_interface[dof] := SEL(PerDofControlInterface[dof] = ControlInterfaceType.Undefined, PerDofControlInterface[dof], ControlInterface);
  _inp_per_dof_synchronization[dof] := SEL(PerDofSynchronization[dof] = SynchronizationType.Undefined, PerDofSynchronization[dof], Synchronization); 
  
  CASE _inp_per_dof_control_interface[dof]
  OF
    ControlInterfaceType.Position:
      p.Brake.PositionBrakeTrajectory(CurrentVelocity[dof], CurrentAcceleration[dof], MaxVelocity[dof], _inp_min_velocity[dof], MaxAcceleration[dof], _inp_min_acceleration[dof], MaxJerk[dof]);
      p.SetBoundaryPosition(CurrentPosition[dof], CurrentVelocity[dof], CurrentAcceleration[dof], TargetPosition[dof], TargetVelocity[dof], TargetAcceleration[dof]);
      
    ControlInterfaceType.Velocity:
      p.Brake.VelocityBrakeTrajectory(CurrentVelocity[dof], CurrentAcceleration[dof], MaxAcceleration[dof], _inp_min_acceleration[dof], MaxJerk[dof]);
      p.SetBoundaryPosition(CurrentPosition[dof], CurrentVelocity[dof], CurrentAcceleration[dof], TargetPosition[dof], TargetVelocity[dof], TargetAcceleration[dof]);      
	END_CASE
  
  p.Brake.Finalize(p.p[0], p.v[0], p.a[0]);

  CASE _inp_per_dof_control_interface[dof]
  OF
    ControlInterfaceType.Position:
      _positionStep1.Set(p.p[0], p.v[0], p.a[0], p.pf, p.vf, p.af, MaxVelocity[dof], _inp_min_velocity[dof], MaxAcceleration[dof], _inp_min_acceleration[dof], MaxJerk[dof]);
      found_profile := _positionStep1.Get(p, _blocks[dof]);
    ControlInterfaceType.Velocity:
      _velocityStep1.Set(p.v[0], p.a[0], p.vf, p.af, MaxAcceleration[dof], _inp_min_acceleration[dof], MaxJerk[dof]);
      found_profile := _velocityStep1.Get(p, _blocks[dof]);
	END_CASE
  
  IF NOT found_profile
  THEN
    Calculate := TrajectoryErrorCode.CalculateStep1Failed;
    RETURN; 
	END_IF

  _independentMinDurations[dof] := _blocks[dof].Pmin.Brake.Duration + _blocks[dof].Tmin;
END_FOR


discrete_duration := (Discretization = DiscretizationType.discrete);
found_synchronization := Synchronize(discrete_duration, MinDuration, Duration, limiting_dof);
IF NOT found_synchronization THEN
  Calculate := TrajectoryErrorCode.SynchronizationFailed;
  RETURN;
END_IF

// None Synchronization
FOR dof:=0 TO _dofsEnd
DO
  IF Enabled[dof] AND_THEN _inp_per_dof_synchronization[dof] = SynchronizationType.None
  THEN
    _profiles[dof] := _blocks[dof].Pmin;
    IF _blocks[dof].Tmin > Duration
    THEN
      Duration := _blocks[dof].Tmin;
      limiting_dof := dof;
		END_IF
	END_IF
END_FOR

IF (Duration = 0.0) THEN
  // Copy all profiles for end state
  FOR dof:=0 TO _dofsEnd
  DO
    _profiles[dof] := _blocks[dof].Pmin;
	END_FOR
  RETURN;
END_IF

noneSynchronizationCount := -1;
phaseSychronizationIndex := -1;
phaseOrNoneSychronizationCount := -1;
positionControlInterfaceCount := -1;
FOR dof:=0 TO _dofsEnd DO 
  IF _inp_per_dof_synchronization[dof] = SynchronizationType.None
  THEN
    noneSynchronizationCount := noneSynchronizationCount + 1;
    phaseOrNoneSychronizationCount := phaseOrNoneSychronizationCount + 1;
  ELSIF _inp_per_dof_synchronization[dof] = SynchronizationType.Phase
  THEN
    phaseOrNoneSychronizationCount := phaseOrNoneSychronizationCount + 1;
    IF phaseSychronizationIndex < 0
    THEN
      phaseSychronizationIndex := dof;
    END_IF
  END_IF
  
  IF _inp_per_dof_control_interface[dof] = ControlInterfaceType.Position
  THEN
    positionControlInterfaceCount := positionControlInterfaceCount + 1;
  END_IF 
END_FOR

IF NOT discrete_duration AND_THEN noneSynchronizationCount = _dofsEnd
THEN
  RETURN;
END_IF

IF NOT discrete_duration AND_THEN phaseSychronizationIndex >= 0 AND_THEN positionControlInterfaceCount = _dofsEnd THEN
  p_limiting REF= _profiles[limiting_dof];
  IF (IsInputCollinear(MaxJerk, p_limiting.Direction, limiting_dof, new_max_jerk)) THEN
    found_time_synchronization := TRUE;
    FOR dof:=0 TO _dofsEnd DO
      IF (NOT Enabled[dof] OR_ELSE dof = limiting_dof) THEN
        CONTINUE;
      END_IF

      p REF= _profiles[dof];
      t_profile := Duration - p.Brake.Duration - p.Accel.Duration;

      p.t := p_limiting.t; // Copy timing information from limiting DoF
      p.JerkSigns := p_limiting.JerkSigns;

      // Profile::Limits::NONE is a small hack, as there is no specialization for that in the check function
      CASE (p.JerkSigns) OF 
        ProfileJerkSigns.Uddu: 
          IF ( NOT p.CheckWithTiming(ProfileJerkSigns.Uddu, ProfileLimits.None, t_profile, new_max_jerk[dof], MaxVelocity[dof], _inp_min_velocity[dof], MaxAcceleration[dof], _inp_min_acceleration[dof])) THEN
              found_time_synchronization := FALSE;
          END_IF

        ProfileJerkSigns.Udud: 
          IF ( NOT p.CheckWithTiming(ProfileJerkSigns.Uddu, ProfileLimits.None, t_profile, new_max_jerk[dof], MaxVelocity[dof], _inp_min_velocity[dof], MaxAcceleration[dof], _inp_min_acceleration[dof])) THEN
              found_time_synchronization := FALSE;
          END_IF
      END_CASE

      p.Limits := p_limiting.Limits; // After check method call to set correct limits
    END_FOR

    IF found_time_synchronization AND_THEN phaseOrNoneSychronizationCount = _dofsEnd  THEN
      RETURN;
    END_IF
  END_IF
END_IF

// Time Synchronization
FOR dof:=0 TO _dofsEnd
DO
  IF NOT Enabled[dof] OR_ELSE ((dof = limiting_dof OR_ELSE _inp_per_dof_synchronization[dof] = SynchronizationType.None) AND_THEN NOT discrete_duration) THEN
    CONTINUE;
  END_IF
  
  p REF= _profiles[dof];
  t_profile := Duration - p.Brake.Duration - p.Accel.Duration;
  
  IF (_inp_per_dof_synchronization[dof] = SynchronizationType.TimeIfNecessarySync AND_THEN ABS(TargetVelocity[dof]) < Constants.Epsilon AND_THEN ABS(CurrentAcceleration[dof]) < Constants.Epsilon) THEN
      p := _blocks[dof].Pmin;
      CONTINUE;
  END_IF
  
  // Check if the final time corresponds to an extremal profile calculated in step 1
  IF (ABS(t_profile - _blocks[dof].Tmin) < Constants.Epsilon) THEN
      p := _blocks[dof].Pmin;
      CONTINUE;
  ELSIF (_blocks[dof].A.IsUsed AND_THEN ABS(t_profile - _blocks[dof].A.Right) < Constants.Epsilon)
  THEN
      p := _blocks[dof].A.Profile;
      CONTINUE;
  ELSIF (_blocks[dof].B.IsUsed AND_THEN ABS(t_profile - _blocks[dof].B.Right) < Constants.Epsilon)
  THEN
      p := _blocks[dof].B.Profile;
      CONTINUE;
  END_IF
  
  CASE (_inp_per_dof_control_interface[dof])
  OF  
    ControlInterfaceType.Position: 
      _positionStep2.Set(t_profile, p.p[0], p.v[0], p.a[0], p.pf, p.vf, p.af, MaxVelocity[dof], _inp_min_velocity[dof], MaxAcceleration[dof], _inp_min_acceleration[dof], MaxJerk[dof]);
      found_time_synchronization := _positionStep2.Get(p);

    ControlInterfaceType.Velocity: 
      _velocityStep2.Set(t_profile, p.v[0], p.a[0], p.vf, p.af, MaxAcceleration[dof], _inp_min_acceleration[dof], MaxJerk[dof]);
      found_time_synchronization := _velocityStep2.Get(p);
  END_CASE

  IF (NOT found_time_synchronization) THEN
    (*
      if constexpr (throw_error) {
          throw std::runtime_error("[ruckig] error in step 2 in dof: " + std::to_string(dof) + " for t sync: " + std::to_string(duration) + " input: " + to_string());
      }
      *)
    Calculate := TrajectoryErrorCode.SynchronizationFailed;
  END_IF
END_FOR]]></ST>
      </Implementation>
    </Method>
    <Method Name="Change" Id="{412a3b6e-c01a-46d6-b769-48dae1ba53ec}">
      <Declaration><![CDATA[METHOD PRIVATE Change : BOOL
VAR
  i : INT;  
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _dofs <> Dofs
THEN
  Change := TRUE;
  RETURN;
END_IF

FOR i:=0 TO _dofsEnd
DO
  IF _currentPosition[i] <> CurrentPosition[i] OR_ELSE
     _currentVelocity[i] <> CurrentVelocity[i] OR_ELSE
     _currentAcceleration[i] <> CurrentAcceleration[i] OR_ELSE
     _targetPosition[i] <> TargetPosition[i] OR_ELSE
     _targetVelocity[i] <> TargetVelocity[i] OR_ELSE
     _targetAcceleration[i] <> TargetAcceleration[i] OR_ELSE
     _maxVelocity[i] <> MaxVelocity[i] OR_ELSE
     _maxAcceleration[i] <> MaxAcceleration[i] OR_ELSE
     _maxJerk[i] <> MaxJerk[i] OR_ELSE
     _enabled[i] <> Enabled[i] OR_ELSE
     _minVelocity[i] <> MinVelocity[i] OR_ELSE
     _minAcceleration[i] <> MinAcceleration[i] OR_ELSE
     _perDofControlInterface[i] <> PerDofControlInterface[i] OR_ELSE
     _perDofSynchronization[i] <> PerDofSynchronization[i]
  THEN
    Change := TRUE;  
    RETURN;
	END_IF
END_FOR

IF _controlInterface <> ControlInterface OR_ELSE
   _synchronization <> Synchronization OR_ELSE
   _discretization <> Discretization OR_ELSE
   _minDuration <> MinDuration   
THEN
  Change := TRUE;
  RETURN;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="ErrorCode" Id="{df1856aa-ddd6-43c2-8198-e93b1db87e8a}">
      <Declaration><![CDATA[METHOD ErrorCode : TrajectoryErrorCode
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ErrorCode := _errorId;]]></ST>
      </Implementation>
    </Method>
    <Method Name="ErrorMessage" Id="{ff9991e9-176b-43d5-a3fb-79c9a996762a}">
      <Declaration><![CDATA[METHOD ErrorMessage : STRING(255)
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CASE _errorId
OF
  TrajectoryErrorCode.CalculateStep1Failed: ErrorMessage := 'Trajectory generation failed in step1';
  TrajectoryErrorCode.InvalidInput: ErrorMessage := 'Trajectory-generation invalid input';
  TrajectoryErrorCode.SynchronizationFailed: ErrorMessage := 'Trajectory-generation synchronization failed';
ELSE
  IF State = TrajectoryState.Error
  THEN
    ErrorMessage := 'Unknown error';
	END_IF
END_CASE]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_init" Id="{b602f7a7-4307-4d87-b5fe-4e3716d1e55b}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
  cycletime : LREAL;
  dofs : SINT;
END_VAR
VAR_INST
  i : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.Dofs := dofs;
FOR i:=0 TO ParameterList.MaxDoFs
DO
  Enabled[i] := i < dofs;
END_FOR
_dt := THIS^.CycleTime := cycletime;]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsBlocked" Id="{fe13951c-4e92-4835-b744-475e6b7411b6}">
      <Declaration><![CDATA[METHOD INTERNAL IsBlocked : BOOL
VAR_INPUT
  block : REFERENCE TO Block;
  t : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IsBlocked := (t < block.Tmin) OR_ELSE (block.A.IsUsed AND_THEN block.A.Left < t AND_THEN t < block.A.Right) OR_ELSE (block.B.IsUsed AND_THEN block.B.Left < t AND_THEN t < block.B.Right);]]></ST>
      </Implementation>
    </Method>
    <Method Name="IsInputCollinear" Id="{b5765f6e-aa3e-4e0b-91ae-e26e46ffb952}">
      <Declaration><![CDATA[/// Is the trajectory (in principle) phase synchronizable?
METHOD INTERNAL IsInputCollinear : BOOL
VAR_INPUT
  jMax : REFERENCE TO ARRAY[0..ParameterList.MaxDoFs] OF LREAL;
  limitingDirection : ProfileDirection;
  limitingDof : INT;
  newMaxJerk : REFERENCE TO ARRAY[0..ParameterList.MaxDoFs] OF LREAL;
END_VAR
VAR_INST
  pdFoundNoneZero : BOOL := FALSE;
  v0Scale, a0Scale, vfScale, afScale, scale : LREAL;
  dof : INT;
  pd : ARRAY[0..ParameterList.MaxDoFs] OF LREAL;
  max_jerk_limiting : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[FOR dof:=0 TO _dofsEnd
DO
  IF _inp_per_dof_synchronization[dof] <> SynchronizationType.Phase
  THEN
    CONTINUE;
	END_IF
  
  pd[dof] := TargetPosition[dof] - CurrentPosition[dof];
  
  IF NOT pdFoundNoneZero AND_THEN ABS(pd[dof]) > Constants.Epsilon
  THEN
    v0Scale := CurrentVelocity[dof] / pd[dof];
    a0Scale := CurrentAcceleration[dof] / pd[dof];
    vfScale := TargetVelocity[dof] / pd[dof];
    afScale := TargetAcceleration[dof] / pd[dof];
    pdFoundNoneZero := TRUE;
	END_IF
END_FOR

IF NOT pdFoundNoneZero // position difference is zero everywhere...
THEN
  RETURN;
END_IF

max_jerk_limiting := SEL(limitingDirection = ProfileDirection.Up, -jMax[limitingDof], jMax[limitingDof]);
FOR dof:=0 TO _dofsEnd
DO
  IF dof = limitingDof OR_ELSE _inp_per_dof_synchronization[dof] <> SynchronizationType.Phase
  THEN
    CONTINUE;
	END_IF
  
  // Are the vectors colinear?
  IF CurrentVelocity[dof] - v0Scale * pd[dof] > Constants.EpsilonColinear OR_ELSE
    CurrentAcceleration[dof] - a0Scale * pd[dof] > Constants.EpsilonColinear OR_ELSE
    TargetVelocity[dof] - vfScale * pd[dof] > Constants.EpsilonColinear OR_ELSE
    TargetAcceleration[dof] - afScale * pd[dof] > Constants.EpsilonColinear
  THEN
    RETURN;
	END_IF
  
  scale := pd[dof] / pd[limitingDof];  
  newMaxJerk[dof] := scale * max_jerk_limiting;
END_FOR

IsInputCollinear := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="PassOutputToInput" Id="{94fb36df-eba6-444f-9aba-af59065260ef}">
      <Declaration><![CDATA[METHOD PassOutputToInput
VAR_INPUT
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CurrentPosition := NewPosition;
CurrentVelocity := NewVelocity;
CurrentAcceleration := NewAcceleration;

// Remove first intermediate waypoint if section did change
// not supported in Struckig, this is a Ruckig Pro Feature
//IF HasSectionChanged AND_THEN IntermediatePositionCount > 0
//THEN
//  IntermediatePositionIndex := IntermediatePositionIndex + 1;
//END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Synchronize" Id="{190d7ca7-bc21-4bc2-982d-9be9e1cca821}">
      <Declaration><![CDATA[METHOD INTERNAL Synchronize : BOOL
VAR_INPUT
  discrete_duration : BOOL;
END_VAR
VAR_IN_OUT
  Tmin : LREAL;
  t_sync : LREAL;
  limiting_dof : INT;
END_VAR
VAR_INST
  possible_t_syncs : ARRAY [0..3*ParameterList.MaxDoFs] OF LREAL;
  idx : ARRAY [0..3*ParameterList.MaxDoFs] OF INT;  
  idx_end : INT;
  possible_t_sync : REFERENCE TO LREAL;
  any_interval : BOOL;
  dof : INT;
  i,j, h : INT;
  is_blocked : BOOL;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (dofs = 0 AND_THEN Tmin <> 0 AND_THEN discrete_duration <> 0)
THEN 
  limiting_dof := 0;
  t_sync := _blocks[0].Tmin;
  _profiles[0] := _blocks[0].Pmin;
  RETURN;
END_IF

// Possible t_syncs are the start times of the intervals and optional Tmin
any_interval := FALSE;
FOR dof := 0 TO _dofsEnd
DO
  // Ignore DoFs without synchronization here
  IF _inp_per_dof_synchronization[dof] = SynchronizationType.None
  THEN
    possible_t_syncs[dof] := 0;
    possible_t_syncs[Dofs + dof] := Constants.Infinity;
    possible_t_syncs[2 * Dofs + dof] := Constants.Infinity;
  ELSE
    possible_t_syncs[dof] := _blocks[dof].Tmin;
    possible_t_syncs[Dofs + dof] := SEL(_blocks[dof].A.IsUsed, Constants.Infinity, _blocks[dof].A.Right);
    possible_t_syncs[2 * Dofs + dof] := SEL(_blocks[dof].B.IsUsed, Constants.Infinity, _blocks[dof].B.Right);
    any_interval := any_interval OR_ELSE _blocks[dof].A.IsUsed OR_ELSE _blocks[dof].B.IsUsed;
  END_IF
END_FOR

possible_t_syncs[3 * Dofs] := SEL(Tmin = 0, Tmin, Constants.Infinity);
any_interval := any_interval OR_ELSE Tmin > 0;
IF (discrete_duration)
THEN
  FOR i:=0 TO 3*Dofs-1
  DO
    possible_t_syncs[i] := Ceil(possible_t_syncs[i] / _dt) * _dt;        
  END_FOR
END_IF

// Bubblesort possible_t_syncs from best to worst
idx_end := SEL(any_interval, _dofsEnd, 3*DOFs);
BubbleSortLreal(ADR(possible_t_syncs), idx_end, indicesSorted:=ADR(idx));

// Start at last tmin (or worse)
FOR i:=_dofsEnd TO idx_end
DO  
  possible_t_sync REF= possible_t_syncs[idx[i]];
  
  is_blocked := FALSE;
  FOR dof:=0 TO _dofsEnd
  DO
    IF _inp_per_dof_synchronization[dof] = SynchronizationType.None
    THEN
      CONTINUE;
		END_IF
    
    IF IsBlocked(_blocks[dof], possible_t_sync) 
    THEN
      is_blocked := TRUE;
      EXIT;
		END_IF
	END_FOR
  
  IF is_blocked OR_ELSE possible_t_sync < Tmin
  THEN
    CONTINUE;
	END_IF
    
  t_sync := possible_t_sync;
  IF (idx[i] = 3*Dofs)  // Optional Tmin
  THEN
    limiting_dof := -1;
    Synchronize := TRUE;
    RETURN;
  END_IF

  limiting_dof := (idx[i] MOD Dofs);
  CASE TRUNC(idx[i] / Dofs)
  OF
    0: _profiles[limiting_dof] := _blocks[limiting_dof].Pmin;
    1: _profiles[limiting_dof] := _blocks[limiting_dof].A.Profile;
    2: _profiles[limiting_dof] := _blocks[limiting_dof].B.Profile;  
	END_CASE
  
  Synchronize := TRUE;
  RETURN;
  
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ValidateInput" Id="{e330fefe-c82d-4b3b-9555-b849f32242ef}">
      <Declaration><![CDATA[/// To check that *Struckig* is able to generate a trajectory before the actual calculation step,
/// ```st
/// ruckig.ValidateInput(input, currentState: FALSE, targetState: TRUE);
/// // returns boolean
/// ```
/// returns `FALSE` if an input is not valid. The two boolean arguments check that the current or target state are 
/// within the limits. The check includes a typical catch of jerk-limited trajectory generation: 
/// When the current state is at maximal velocity, any positive acceleration will inevitable lead to a velocity violation 
/// *at a future timestep*. In general, this condition is fulfilled when
/// ```
/// Abs(acceleration) <= Sqrt(2 * max_jerk * (max_velocity - Abs(velocity))).
/// ```
/// If both arguments are set to true, the calculated trajectory is guaranteed to be *within the kinematic limits throughout* 
/// its duration. Also, note that there are range constraints of the input due to numerical reasons, see below for more details.
{attribute 'conditionalshow'}
METHOD ValidateInput : BOOL
VAR_INPUT
  currentState : BOOL;
  targetState : BOOL;
END_VAR
VAR
  i, dofsEnd : INT;
  aMin, vMin, a0, af, v0, vf : LREAL;
  ci : ControlInterfaceType;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF Dofs = 0
THEN
  RETURN;
END_IF

dofsEnd := Dofs-1;
FOR i:=0 TO dofsEnd
DO

  IF MaxJerk[i] <> MaxJerk[i] OR_ELSE // isnan
     MaxJerk[i] < Constants.Minimum
  THEN
    RETURN;
	END_IF

  IF MaxAcceleration[i] <> MaxAcceleration[i] OR_ELSE // isnan
     MaxAcceleration[i] <= Constants.Minimum
  THEN    
    RETURN;
  END_IF

  aMin := SEL(MinAcceleration[i] = 0, MinAcceleration[i] ,-MaxAcceleration[i]);
  IF aMin <> aMin OR_ELSE // isnan
     aMin >= -Constants.Minimum
  THEN    
    RETURN;
  END_IF
  
  a0 := CurrentAcceleration[i];
  af := TargetAcceleration[i];
  IF a0 <> a0 OR_ELSE af <> af // isnan
  THEN
    RETURN;
	END_IF
  
  IF currentState AND_THEN (a0 > MaxAcceleration[i] OR_ELSE a0 < aMin)
  THEN
    RETURN;
  END_IF
  
  IF targetState AND_THEN (af > MaxAcceleration[i] OR_ELSE af < aMin)
  THEN
    RETURN;
  END_IF
  
  v0 := CurrentVelocity[i];
  vf := TargetVelocity[i];
  IF v0 <> v0 OR_ELSE vf <> vf // isnan
  THEN
    RETURN;
	END_IF
  
  ci := SEL(PerDofControlInterface[i] = ControlInterfaceType.Undefined, PerDofControlInterface[i], ControlInterface);
  IF (ci = ControlInterfaceType.position)
  THEN
  
    IF CurrentPosition[i] <> CurrentPosition[i] OR_ELSE //isnan
       TargetPosition[i] <> TargetPosition[i] //isnan
    THEN
      RETURN;
    END_IF
    
    IF MaxVelocity[i] <> MaxVelocity[i] OR_ELSE // isnan
       MaxVelocity[i] <= Constants.Minimum      
    THEN
      RETURN;
		END_IF
  END_IF
  
  vMin := SEL(MinVelocity[i] = 0, MinVelocity[i] ,-MaxVelocity[i]);
  IF vMin <> vMin OR_ELSE // isnan
     vMin >= -Constants.Minimum      
  THEN
    RETURN;
  END_IF
  
  IF (currentState AND_THEN (v0 > MaxVelocity[i] OR_ELSE v0 < vMin))
  THEN
    RETURN;
  END_IF
  
  IF (targetState AND_THEN (vf > MaxVelocity[i] OR_ELSE vf < vMin))
  THEN
    RETURN;
  END_IF
  
  IF (currentState AND_THEN ((a0 > 0 AND_THEN velocityAtZero(v0, a0, MaxJerk[i]) > MaxVelocity[i]) OR_ELSE (a0 < 0 AND_THEN velocityAtZero(v0, a0, -MaxJerk[i]) < vMin)))
  THEN
    RETURN;
	END_IF
  
  IF (targetState AND_THEN ((af < 0 AND_THEN velocityAtZero(vf, af, MaxJerk[i]) > MaxVelocity[i]) OR_ELSE (af > 0 AND_THEN velocityAtZero(vf, af, -MaxJerk[i]) < vMin)))
  THEN
    RETURN;
	END_IF

END_FOR

ValidateInput := TRUE;]]></ST>
      </Implementation>
    </Method>
    <Method Name="velocityAtZero" Id="{c17f4a08-90ee-4adc-b921-495797f60094}">
      <Declaration><![CDATA[METHOD INTERNAL velocityAtZero : LREAL
VAR_INPUT
  v0 : LREAL;
  a0 : LREAL;
  j : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[velocityAtZero := v0 + (a0 * a0)/(2 * j);]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="VelocityThirdOrderStep2" Id="{44d0404d-f840-43a5-b935-c3fca779d43d}" SpecialFunc="None">
    <Declaration><![CDATA[// Struckig
// Copyright (C) 2022 Stefan Besler

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with THIS PROGRAM.  IF NOT, see <http://www.gnu.org/licenses/>.
/// Mathematical equations for Step 2 in third-order velocity interface: Time synchronization
FUNCTION_BLOCK INTERNAL VelocityThirdOrderStep2 
VAR
  tf, a0, af, vd, ad : LREAL;
  aMax, aMin, jMax : LREAL;
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="CheckAll" Id="{5edd91ed-f446-4dff-95cf-42bfd1ecd2c0}">
      <Declaration><![CDATA[METHOD CheckAll : BOOL
VAR_IN_OUT
  Profile : ProfileDesc;
END_VAR
VAR_INPUT
  aMax, aMin, jMax : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[CheckAll := time_acc0(Profile, aMax, aMin, jMax) OR_ELSE time_none(Profile, aMax, aMin, jMax);]]></ST>
      </Implementation>
    </Method>
    <Method Name="Get" Id="{291bf2c1-3902-431e-bdad-f5b9a8de3521}">
      <Declaration><![CDATA[METHOD Get : BOOL
VAR_IN_OUT
  Profile : ProfileDesc;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// Test all cases to get ones that match
// However we should guess which one is correct and try them first...
IF (vd > 0) THEN
  Get := CheckAll(Profile, aMax, aMin, jMax) OR_ELSE CheckAll(Profile, aMin, aMax, -jMax);
ELSE
  Get := CheckAll(Profile, aMin, aMax, -jMax) OR_ELSE CheckAll(Profile, aMax, aMin, jMax);
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Set" Id="{1ea081ff-38e9-4265-a71e-f22d7dc2ecbe}">
      <Declaration><![CDATA[METHOD Set
VAR_INPUT
  tf : LREAL;
  v0, a0 : LREAL;
  vf, af : LREAL;
  aMax, aMin : LREAL;
  jMax : LREAL; 
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.a0 := a0;
THIS^.tf := tf;
THIS^.af := af;
THIS^.aMax := aMax;
THIS^.aMin := aMin;
THIS^.jMax := jMax;
THIS^.vd := vf - v0;
THIS^.ad := af - a0;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="time_acc0" Id="{139ae830-064a-498c-9553-ea8f79b368be}">
      <Declaration><![CDATA[METHOD PRIVATE time_acc0 : BOOL
VAR_IN_OUT
  profile : ProfileDesc;
END_VAR
VAR_INPUT
  aMax, aMin, jMax : LREAL;
END_VAR
VAR
  h1 : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// UD Solution 1/2
h1 := (-a0*a0 - af*af + 2*a0*af + 2*jMax*((a0 + af)*tf - 2*(vd)))/(jMax*jMax) + tf*tf;
IF h1 >= 0
THEN
  h1 := SQRT(h1);
  
  profile.t[0] := ad/(2*jMax) + (tf - h1)/2;
  profile.t[1] := h1;
  profile.t[2] := tf - (profile.t[0] + h1);
  profile.t[3] := 0;
  profile.t[4] := 0;
  profile.t[5] := 0;
  profile.t[6] := 0;
  
  IF (profile.CheckForVelocity(ProfileControlSigns.uddu, ReachedLimits.Acc0, jMax, aMax, aMin)) THEN
    profile.pf := profile.p[7];
    time_acc0 := TRUE;
    RETURN;
  END_IF
END_IF

// UU Solution
h1 := (jMax*tf - ad);

profile.t[0] := -ad*ad/(2*jMax*h1) + (vd - a0*tf)/h1;
profile.t[1] := -ad/jMax + tf;
profile.t[2] := 0;
profile.t[3] := 0;
profile.t[4] := 0;
profile.t[5] := 0;
profile.t[6] := tf - (profile.t[0] + profile.t[1]);

IF (profile.CheckForVelocity(ProfileControlSigns.Uddu, ReachedLimits.Acc0, jMax, aMax, aMin))
THEN
  profile.pf := profile.p[7];
  time_acc0 := TRUE;
  RETURN;
END_IF

// UU Solution - 2 step
profile.t[0] := 0;
profile.t[1] := -ad/jMax + tf;
profile.t[2] := 0;
profile.t[3] := 0;
profile.t[4] := 0;
profile.t[5] := 0;
profile.t[6] := ad/jMax;

IF (profile.CheckForVelocity(ProfileControlSigns.Uddu, ReachedLimits.Acc0, jMax, aMax, aMin))
THEN
  profile.pf := profile.p[7];
  time_acc0 := TRUE;
  RETURN;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="time_none" Id="{b7252407-1ffc-4203-89cb-177864a2876c}">
      <Declaration><![CDATA[METHOD PRIVATE time_none : BOOL
VAR_IN_OUT
  profile : ProfileDesc;
END_VAR
VAR_INPUT
  aMax, aMin, jMax : LREAL;
END_VAR
VAR
  h1, jf : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (ABS(a0) < Constants.DoubleEpsilon AND_THEN ABS(af) < Constants.DoubleEpsilon AND_THEN ABS(vd) < Constants.DoubleEpsilon) THEN
  profile.t[0] := 0;
  profile.t[1] := tf;
  profile.t[2] := 0;
  profile.t[3] := 0;
  profile.t[4] := 0;
  profile.t[5] := 0;
  profile.t[6] := 0;
  
  IF (profile.CheckForVelocity(ProfileControlSigns.uddu, ReachedLimits.None, jMax, aMax, aMin)) THEN
    profile.pf := profile.p[7];
    time_none := TRUE;
    RETURN;
  END_IF
END_IF
    
// UD Solution 1/2
IF ABS(af - a0) > Constants.DoubleEpsilon
THEN
  h1 := 2*(af*tf - vd);
  profile.t[0] := h1/(af - a0);
  profile.t[1] := tf - profile.t[0];
  profile.t[2] := 0;
  profile.t[3] := 0;
  profile.t[4] := 0;
  profile.t[5] := 0;
  profile.t[6] := 0;
  
  jf := Power2(a0 - af)/h1;
  IF (ABS(jf) < ABS(jMax) + 1E-12 AND_THEN profile.CheckForVelocity(ProfileControlSigns.uddu, ReachedLimits.None, jf, aMax, aMin))
  THEN
    profile.pf := profile.p[7];
    time_none := TRUE;
  END_IF
END_IF
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
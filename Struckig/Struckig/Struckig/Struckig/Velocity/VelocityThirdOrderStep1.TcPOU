<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="VelocityThirdOrderStep1" Id="{0bad3140-2221-4abc-b516-4f31ef4a9048}" SpecialFunc="None">
    <Declaration><![CDATA[/// Mathematical equations for Step 1 in third-order velocity interface: Extremal profiles
FUNCTION_BLOCK INTERNAL VelocityThirdOrderStep1 
VAR
  a0, af : LREAL;
  aMax, aMin, jMax : LREAL;
  vd : LREAL;
  
  ValidProfiles : ARRAY[0..2] OF ProfileDesc; // Max 3 valid profiles
  ValidProfileCount : INT := -1;  
END_VAR]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="AddInterval" Id="{abe80916-4a80-43b9-af2c-99fa0b29f681}">
      <Declaration><![CDATA[METHOD AddInterval
VAR_INPUT
  interval : REFERENCE TO BlockInterval;
  Left : REFERENCE TO ProfileDesc;
  Right : REFERENCE TO ProfileDesc;
END_VAR
VAR_INST
  left_duration,right_duration : LREAL;   
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[left_duration := Left.t_sum[6] + Left.Brake.Duration + Left.Accel.Duration; 
right_duration := Right.t_sum[6] + Right.Brake.Duration + Right.Accel.Duration; 
IF (left_duration < right_duration)
THEN
  interval.Left := left_duration;
  interval.Right := right_duration;
  interval.Profile := Right;
  interval.IsUsed := TRUE;
ELSE
  interval.Left := right_duration;
  interval.Right := left_duration;
  interval.Profile := Left;
  interval.IsUsed := TRUE;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="AddProfile" Id="{dacf2638-5b01-461d-88f3-34e16bac6e68}">
      <Declaration><![CDATA[METHOD AddProfile
VAR_IN_OUT CONSTANT
  Profile : ProfileDesc;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ValidProfileCount := ValidProfileCount + 1;
ValidProfiles[ValidProfileCount] := Profile;
ValidProfiles[ValidProfileCount].pf := Profile.p[7];]]></ST>
      </Implementation>
    </Method>
    <Method Name="CalculateBlock" Id="{dc46def7-4a89-4ab7-8711-fc35caa0cac8}">
      <Declaration><![CDATA[METHOD CalculateBlock : BOOL
VAR_INPUT
  block : REFERENCE TO Block;
END_VAR
VAR
  i, j : INT;
  Tmin : LREAL;
  idx_min : INT;
  idx_else_1, idx_else_2, idx_else_3, idx_else_4 : INT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF (ValidProfileCount = 0) OR_ELSE (ValidProfileCount = 1 AND_THEN ABS(ValidProfiles[0].t_sum[6] - ValidProfiles[1].t_sum[6]) < 8*Constants.Epsilon)
THEN
  block.Pmin := ValidProfiles[0];
  block.Tmin := block.Pmin.t_sum[6] + block.Pmin.Brake.Duration + block.Pmin.Accel.Duration;  
  CalculateBlock := TRUE;
  RETURN;
// Only happens due to numerical issues
ELSIF (ValidProfileCount = 3) 
THEN
  // Find "identical" profiles
  IF (ABS(ValidProfiles[0].t_sum[6] - ValidProfiles[1].t_sum[6]) < 16*Constants.Epsilon OR_ELSE ValidProfiles[0].Direction <> ValidProfiles[1].Direction)
  THEN
    RemoveProfile(1);
  ELSIF (ABS(ValidProfiles[1].t_sum[6] - ValidProfiles[2].t_sum[6]) < 16*Constants.Epsilon  OR_ELSE ValidProfiles[2].Direction <> ValidProfiles[2].Direction)
  THEN
    RemoveProfile(2);
  ELSIF (ABS(ValidProfiles[0].t_sum[6] - ValidProfiles[2].t_sum[6]) < 256*Constants.Epsilon OR_ELSE ValidProfiles[0].Direction <> ValidProfiles[2].Direction)
  THEN
    RemoveProfile(2);
  ELSE
    RETURN;
  END_IF

ELSIF ((ValidProfileCount+1) MOD 2 = 0)
THEN
  RETURN;
END_IF

// Find index of fastest Profile
Tmin := Constants.Infinity;
FOR i:=0 TO ValidProfileCount
DO
  FOR j:=0 TO ValidProfileCount
  DO
    IF ValidProfiles[i].t_sum[6] + ValidProfiles[i].Brake.Duration < ValidProfiles[j].t_sum[6] + ValidProfiles[j].Brake.Duration AND_THEN
       ValidProfiles[i].t_sum[6] + ValidProfiles[i].Brake.Duration < Tmin
    THEN
      Tmin := ValidProfiles[i].t_sum[6] + ValidProfiles[i].Brake.Duration + ValidProfiles[i].Accel.Duration;
      idx_min := i;
		END_IF
  END_FOR
END_FOR

block.Pmin := ValidProfiles[idx_min];
block.Tmin := block.Pmin.t_sum[6] + block.Pmin.Brake.Duration + block.Pmin.Accel.Duration;  

IF (ValidProfileCount = 2)
THEN
  idx_else_1 := (idx_min + 1) MOD 3;
  idx_else_2 := (idx_min + 2) MOD 3;
  
  AddInterval(block.A, ValidProfiles[idx_else_1], ValidProfiles[idx_else_2]);
  CalculateBlock := TRUE;
  RETURN;

 ELSIF (ValidProfileCount = 4)
 THEN
  idx_else_1 := (idx_min + 1) MOD 5;
  idx_else_2 := (idx_min + 2) MOD 5;
  idx_else_3 := (idx_min + 3) MOD 5;
  idx_else_4 := (idx_min + 4) MOD 5;
  
  IF (ValidProfiles[idx_else_1].Direction = ValidProfiles[idx_else_2].Direction)
  THEN
    AddInterval(block.A, ValidProfiles[idx_else_1], ValidProfiles[idx_else_2]);
    AddInterval(block.B, ValidProfiles[idx_else_3], ValidProfiles[idx_else_4]);
  ELSE 
    AddInterval(block.A, ValidProfiles[idx_else_1], ValidProfiles[idx_else_4]);
    AddInterval(block.B, ValidProfiles[idx_else_2], ValidProfiles[idx_else_3]);
  END_IF
  
  CalculateBlock := TRUE;
  RETURN;
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="Get" Id="{cec2f89e-f52b-4f5e-9994-37aa8aef2d56}">
      <Declaration><![CDATA[METHOD Get : BOOL
VAR_INPUT
  input : ProfileDesc;
END_VAR
VAR_IN_OUT
  block : Block; 
END_VAR
VAR
  aMax, aMin, jMax : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[ValidProfileCount := -1;

// Zero-limits special case
IF THIS^.jMax = 0.0
THEN
  block.Pmin.SetBoundary(input);
  
  IF time_all_single_step(block.Pmin, THIS^.aMax, THIS^.aMin, THIS^.jMax)
  THEN
    block.Tmin := block.Pmin.t_sum[6] + block.Pmin.Brake.Duration + block.Pmin.Accel.Duration;
    AddInterval(block.A, block.Pmin, block.Pmin);
    IF ABS(a0) > Constants.DoubleEpsilon
    THEN
	  block.A.Left := block.Tmin;
      block.A.Right := Constants.Infinity;
    END_IF
    
    Get := TRUE;
    RETURN; 
	END_IF
  
  RETURN;  
END_IF

validProfiles[0].SetBoundary(input);

IF ABS(af) < Constants.DoubleEpsilon
THEN
  // There is no blocked interval when af==0, so return after first found profile
  aMax := SEL((vd >= 0), THIS^.aMin, THIS^.aMax);
  aMin := SEL((vd >= 0), THIS^.aMax, THIS^.aMin);
  jMax := SEL((vd >= 0), -THIS^.jMax, THIS^.jMax);
  
  time_none(input, aMax, aMin, jMax, TRUE);
  IF ValidProfileCount >= 0
  THEN 
    Get := CalculateBlock(block);
    RETURN;
	END_IF
  
  time_acc0(input, aMax, aMin, jMax, TRUE);
  IF ValidProfileCount >= 0
  THEN 
    Get := CalculateBlock(block);
    RETURN;
	END_IF
  
  time_none(input, aMin, aMax, -jMax, TRUE);
  IF ValidProfileCount >= 0
  THEN 
    Get := CalculateBlock(block);
    RETURN;
	END_IF
  
  time_acc0(input, aMin, aMax, -jMax, TRUE);
ELSE
  time_none(input, THIS^.aMax, THIS^.aMin, THIS^.jMax, FALSE);
  time_none(input, THIS^.aMin, THIS^.aMax, -THIS^.jMax, FALSE);
  time_acc0(input, THIS^.aMax, THIS^.aMin, THIS^.jMax, FALSE);
  time_acc0(input, THIS^.aMin, THIS^.aMax, -THIS^.jMax, FALSE);
END_IF

Get := CalculateBlock(block);]]></ST>
      </Implementation>
    </Method>
    <Method Name="RemoveProfile" Id="{5312d6a5-b56f-4307-be0e-533abbe4ad96}">
      <Declaration><![CDATA[METHOD PRIVATE RemoveProfile : BOOL
VAR_INPUT
  index : INT;
END_VAR
VAR
  i : INT;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// todo, this is pretty slow in twincat
FOR i:=index TO ValidProfileCount-2
DO
  ValidProfiles[i] := ValidProfiles[i + 1];
END_FOR

ValidProfileCount := ValidProfileCount - 1;]]></ST>
      </Implementation>
    </Method>
    <Method Name="Set" Id="{b830671d-0c64-4c64-98a7-036c1e36cf24}">
      <Declaration><![CDATA[METHOD Set
VAR_INPUT
  v0, a0 : LREAL; 
  vf, af : LREAL; 
  aMax, aMin : LREAL; 
  jMax : LREAL;   
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[THIS^.a0 := a0;
THIS^.vd := vf - v0;
THIS^.af := af;;
THIS^.aMax := aMax;
THIS^.aMin := aMin;
THIS^.jMax := jMax;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="time_acc0" Id="{196de754-de31-4539-a912-55eccbd9444f}">
      <Declaration><![CDATA[METHOD PRIVATE time_acc0
VAR_IN_OUT
  profile : ProfileDesc;
END_VAR
VAR_INPUT
  aMax, aMin, jMax : LREAL;
  return_after_found : BOOL;  
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[// UD
profile.t[0] := (-a0 + aMax)/jMax;
profile.t[1] := (a0*a0 + af*af - 2*aMax*aMax + 2*jMax*vd)/(2*aMax*jMax);
profile.t[2] := (-af + aMax)/jMax;
profile.t[3] := 0;
profile.t[4] := 0;
profile.t[5] := 0;
profile.t[6] := 0;

IF (Profile.CheckForVelocity(ProfileControlSigns.Uddu, ReachedLimits.Acc0, jMax, aMax, aMin))
THEN
  AddProfile(profile);
  IF return_after_found
  THEN
    RETURN;
	END_IF
END_IF]]></ST>
      </Implementation>
    </Method>
    <Method Name="time_all_single_step" Id="{04e93f46-943a-4eb4-9824-8983b7feb007}">
      <Declaration><![CDATA[METHOD PRIVATE time_all_single_step : BOOL
VAR_IN_OUT
  profile : ProfileDesc;
END_VAR
VAR_INPUT
  aMax, aMin, jMax : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF ABS(af - a0) > Constants.DoubleEpsilon
THEN 
  RETURN;
END_IF
    
profile.t[0] := 0;
profile.t[1] := 0;
profile.t[2] := 0;
profile.t[3] := 0;
profile.t[4] := 0;
profile.t[5] := 0;
profile.t[6] := 0;

IF ABS(a0) > Constants.DoubleEpsilon
THEN

  IF ABS(a0) > Constants.DoubleEpsilon
  THEN
    profile.t[3] := vd / a0;
    IF profile.CheckForVelocity(ProfileControlSigns.uddu, ReachedLimits.None, 0.0, aMax, aMin)
    THEN
      time_all_single_step := TRUE;
      RETURN;
    END_IF
	END_IF

 ELSE IF ABS(vd) < Constants.DoubleEpsilon
 THEN
    IF profile.CheckForVelocity(ProfileControlSigns.uddu, ReachedLimits.None, 0.0, aMax, aMin)
    THEN 
      time_all_single_step := TRUE;
      RETURN;
  END_IF
 END_IF
END_IF

]]></ST>
      </Implementation>
    </Method>
    <Method Name="time_none" Id="{f88d49e0-16f5-403f-a899-55296e113bff}">
      <Declaration><![CDATA[METHOD PRIVATE time_none
VAR_IN_OUT
  profile : ProfileDesc;
END_VAR
VAR_INPUT
  aMax, aMin, jMax : LREAL;
  return_after_found : BOOL;    
END_VAR
VAR
  h1 : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[h1 := (a0*a0 + af*af)/2 + jMax*vd;
IF h1>=0
THEN
  h1 := SQRT(h1);
  
  profile.t[3] := 0;
  profile.t[4] := 0;
  profile.t[5] := 0;
  profile.t[6] := 0;  
  
  // Solution 1
  profile.t[0] := -(a0 + h1)/jMax;
  profile.t[1] := 0;
  profile.t[2] := -(af + h1)/jMax;

  
  IF (profile.CheckForVelocity(ProfileControlSigns.uddu, ReachedLimits.None, jMax, aMax, aMin))
  THEN
    AddProfile(profile);
    IF return_after_found
    THEN
      RETURN;
    END_IF
  END_IF

  // Solution 2
  profile.t[0] := (-a0 + h1)/jMax;
  profile.t[1] := 0;
  profile.t[2] := (-af + h1)/jMax;
  
  IF (profile.CheckForVelocity(ProfileControlSigns.uddu, ReachedLimits.None, jMax, aMax, aMin)) THEN
    AddProfile(profile);  
  END_IF
END_IF
    ]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>
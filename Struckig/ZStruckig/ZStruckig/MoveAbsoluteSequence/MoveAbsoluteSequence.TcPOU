<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.11">
  <POU Name="MoveAbsoluteSequence" Id="{bec4f6d0-1088-49fe-b3ad-729f2d8a00d8}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK MoveAbsoluteSequence EXTENDS ZAux.Sequence
VAR_INPUT
  Position : LREAL;
  Speed : LREAL;
  MaxAcceleration : LREAL;
  MaxJerk : LREAL;
  CurrentToAccFactor : LREAL;
END_VAR
VAR_OUTPUT
END_VAR
VAR
  _base : ZEquipment.IAxisBase;
  _feedbackPosition : ZEquipment.IAxisFeedbackPosition;
  _feedbackVelocity : ZEquipment.IAxisFeedbackVelocity;
  _feedbackCurrent : ZEquipment.IAxisFeedbackCurrent;
  _moveInterpolatedPosition : ZEquipment.IAxisMoveInterpolatedPosition;
  _moveInterpolatedVelocity : ZEquipment.IAxisMoveInterpolatedVelocity;
  _moveInterpolatedCurrent : ZEquipment.IAxisMoveInterpolatedCurrent;  
  
  _step : ZCore.Step(MoveAbsoluteSequenceStep.Begin, MoveAbsoluteSequenceStep.End);  
  _otg : Struckig.Otg(cycletime:=0.010, dofs:=1);
  _rt : ZAux.RealTime;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[IF OnStart(_step)
THEN
  _otg.CycleTime := _rt.CycleTimeInSeconds();
  
  IF _moveInterpolatedPosition = 0 OR_ELSE _base = 0 OR_ELSE _feedbackPosition = 0
  THEN
    Abort('Initialization incomplete');
    RETURN;
	END_IF
END_IF

IF OnStop()
THEN
  RETURN;
END_IF

// Update Trajectory Generator once per cycle
_otg(EnableAutoPropagate := TRUE);

REPEAT
  LogStep();
  CASE _step.Index OF
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    MoveAbsoluteSequenceStep.Begin:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
      IF _step.OnEntry()
      THEN
        _moveInterpolatedPosition.MoveInterpolatedPositionAsync(THIS^);
      END_IF
      
      Await(obj1:=_base, nextStep:=MoveAbsoluteSequenceStep.Exec);
      
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    MoveAbsoluteSequenceStep.Exec:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
      IF _step.OnEntry()
      THEN
        _otg.MaxAcceleration[0] := MaxAcceleration;
        _otg.MaxJerk[0] := MaxJerk;
        _otg.CurrentPosition[0] := _feedbackPosition.ActualPosition;        
        _otg.CurrentVelocity[0] := SEL(_feedbackVelocity = 0, _feedbackVelocity.ActualVelocity, 0);
        _otg.CurrentAcceleration[0] := SEL(_feedbackCurrent = 0,  _feedbackCurrent.ActualCurrent * CurrentToAccFactor, 0);
        _otg.MaxVelocity[0] := Speed;
        _otg.TargetPosition[0] := Position;
        _otg(
          EnableAutoPropagate := FALSE
        );
      END_IF
      
      _moveInterpolatedPosition.SetInterpolatedPosition(THIS^, _otg.NewPosition[0]);
      
      IF _moveInterpolatedVelocity <> 0
      THEN
        _moveInterpolatedVelocity.SetInterpolatedVelocity(THIS^, _otg.NewVelocity[0]);      
			END_IF
      
      IF _moveInterpolatedCurrent <> 0
      THEN
        _moveInterpolatedCurrent.SetInterpolatedCurrent(THIS^, _otg.NewAcceleration[0] * CurrentToAccFactor);      
			END_IF
      
      Assert(_base);
      IF _otg.State = Struckig.TrajectoryState.Error
      THEN
        Abort(_otg.ErrorMessage());
      ELSIF _otg.State = Struckig.TrajectoryState.Idle
      THEN
        _step.SetNext(MoveAbsoluteSequenceStep.Exec);
      END_IF
   
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
    MoveAbsoluteSequenceStep.End:
    (* -------------------------------------------------------------------------------------------------------------------------------- *)
      SetBusy(FALSE);
  
  ELSE
    Abort('sequence contains unhandled step');
  END_CASE
UNTIL _step.IsNotRepeatable() OR_ELSE NOT IsBusy() END_REPEAT]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{9dfa072f-8cd7-459e-8892-2118509667fe}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
  base : ZEquipment.IAxisBase;
  feedbackPosition : ZEquipment.IAxisFeedbackPosition; 
  feedbackVelocity : ZEquipment.IAxisFeedbackVelocity; //< optional
  feedbackCurrent : ZEquipment.IAxisFeedbackCurrent; //< optional
  moveInterpolatedPosition : ZEquipment.IAxisMoveInterpolatedPosition;
  moveInterpolatedVelocity : ZEquipment.IAxisMoveInterpolatedVelocity; //< optional
  moveInterpolatedCurrent : ZEquipment.IAxisMoveInterpolatedCurrent; //< optional
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_base := base;
_feedbackPosition := feedbackPosition;
_feedbackVelocity := feedbackVelocity;
_feedbackCurrent := feedbackCurrent;
_moveInterpolatedPosition := moveInterpolatedPosition;
_moveInterpolatedVelocity := moveInterpolatedVelocity;
_moveInterpolatedCurrent := moveInterpolatedCurrent;]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>